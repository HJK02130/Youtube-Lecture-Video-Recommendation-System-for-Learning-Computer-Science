id,categoryId,description,publishedAt,title,thmbnails,channelTitle,duration,caption,viewCount,likeCount,dislikeCount,favoriteCount,commentCount,subtitle
Hvv4e0ddttU,22,"Over One Million People Enroll in Online Crypto Class                                                                                                                                                                CNBC&#8217;s Senior Tech Reporter Ari Levy detailshow the world&#8217;s most popular cryptocurrency, bitcoin, with its acceptance explosion and staggering valuations, now seems to have opened an entire new educational universe. Swiss Vocational School Lucerne University Accepts Bitcoin for TuitionThanks to Bitcoin, Crypto Courses Aren&#8217;t Just for PhDsProfessor Dan Boneh of Stanford University Computer Security Lab discussed the attraction to his cryptography course, and how it is due to &#8220;the huge valuations in these currencies&#8221; such as bitcoin.  Second only to machine learning, Computer Security and Cryptography is a wildly popular course.  It&#8217;s also true bitcoin is &#8220;a wonderful way to teach cryptography&#8221; he told Mr.  Levy of CNBC.  The advent of cryptocurrencies means &#8220;there are a whole bunch of new applications for cryptography that didn&#8217;t exist before,&#8221; Professor Boneh added. Getting to cryptography through bitcoin has meant a renewed interest in the mathematical language.  Professor Boneh &#8220;said that more than 1 million people have signed up for an online cryptography class he teaches through the websiteCoursera,&#8221; CNBC reports.",2017-11-01T10:15:28Z,Over One Million People Enroll in Online Crypto Class - Bitcoin News,https://i.ytimg.com/vi/Hvv4e0ddttU/hqdefault.jpg,Bitcoin News ðŸ”¥,PT5M12S,false,32,0,0,0,0,over 1 million people enroll in online crypto class CNBC in number 8200 17 s senior tech reporter Arie levy detail show the world and number 8200 17 s most popular cryptocurrency Bitcoin with its acceptance explosion in staggering valuations now seems to have opened an entire new educational universe swiss vocational school lucerne university accepts Bitcoin for tuition thanks to Bitcoin crypto courses aren in number 8200 17 t just forfeits professor Dan Boneh of Stanford University computer security lab discussed thee attraction to his cryptography course and how it is due to in number 8220 the huge valuations in these currencies in number 8221 such as bitcoin second only the machine learning computer security and cryptography is a wildly popular course it in number 8200 17s also true bitcoin is a number 8220 a wonderful way to teach cryptography in number 8221 he told mr. levy of CNBC the advent of crypto currencies means a number 8220 there are a whole bunch of new applications for cryptography that di DN and number eight thousand two hundred seventeen t exists before and number eight thousand 221 professor Bona added getting to cryptography through Bitcoin has meant a renewed interest in the mathematical language professor Bona number 8220 said that more than 1 million people have signed up for an online cryptography class he teaches through the website Coursera and number 8221 CNBC reports professor Dan Boneh Coursera boasts nearly 30 million registered users in 2000 different courses in a dozen languages registered for professor Bona number 8200 17s course and found to immediate options 7900 USD would earn participants a certificate along with educational feedback while the free option allows auditors a chance to take such a course as a test driver just for the sake of knowledge financially it is available and number 8220 cryptography is an indispensable tool for protecting information in computer systems and number 8221 the introduction states the classes okay an in two parts including cryptographic systems secret keys public keys programming projects and zero knowledge even a textbook authored by Professor Bona and fipple Boyle of Carnegie Mellon is freely available and frequently updated for anyone to self learn cryptocurrency is a DIY project for students professor Goyal and number 8220 spent seven years at Microsoft research in India where he was working on new kinds of cloud encryption and number 8221 according to CNBC and number 8220 he recently helped start that mu crypto group and number 8221 mr. Levy explains and number 8220 to take on research projects and number 8221 the group includes Turing Award winner Manuel Bloom both professors explain how cryptocurrency prices such as Bitcoin reaching 600 USD recently have encouraged students to attempt similar projects of their own professor bonus data and number 8220 there are many experiments underway and just like in the rest of the startup ecosystem some will do well in some will fail and number 8221 with such a neck motioning market valuations it in number 8200 17 s inevitable students will leave formal academia professor boyle notes how if they in number 8220 want to start a mobile app you probably need some investor funding for crypto currencies if you start your own and if people are interested you automatically get funded by the value of what you created and number 8221 with valuations continuing to skyrocket rest assured more crypto courses are on the way both UC Berkeley and MIT have offered their versions 
hAT7vPhZrqQ,28,"Clip 5/5
Speaker: Yvo Desmedt Â· University College London, UK 

Shannon started the unclassified scientific research in cryptography with his
October 1949 paper. First we briefly survey the scientific research in
cryptography since then. We discuss the strengths and weaknesses of this
research, attempting to present a balanced viewpoint.

The lecture will also discuss the progress we have not made. We will show that
not everything in modern cryptography is rosy. Besides above examples, we will
also talk about the discrepancy between the massive number of applications of
cryptography studied by academics and the fact most of these are being viewed
as completely irrelevant to the real world. 

For more information go to the CERIAS website (http://bit.ly/dsFCBF)",2010-08-31T02:35:49Z,CERIAS Security: 60 years of scientific research in cryptography: a reflection 5/5,https://i.ytimg.com/vi/hAT7vPhZrqQ/hqdefault.jpg,Christiaan008,PT6M53S,false,96,0,0,0,0,this is something I've been talking about for a few years one of the problems we have and it's not simply in cryptography but across much of computing our reward system has skewed what research is all about so we have a system whereby funding goes to those who can solve problems that are needed right away the solutions are neither right away so government does that companies do that instead of promoting longer-term more fundamental research we want to see the results right away they're not willing to fund research that produces negative results and so and so we've gotten to the point where very conservative in the kinds of things that we're willing to propose we also see in in the arena of publications that there's greater and greater competition to have higher rankings or better publication rates and so we see more and more papers with less impressive results and as a field of computing in general we don't really encourage or reward negative results or attempts to reconfirm what others have done in the biological sciences or physical sciences they redo experiments to go we don't do that because there's no publication in it and there's no money no one will fund it and so we've developed a discipline that increasingly is more and more ad hoc results that look good at first blush and then nobody looks back because there's no reward for it so I agree with you completely but I would say it's actually a much broader problem then submitted approaches I mean when you think about the internet that our approach we could consider as for example making a database it's not the first time I thought about that I basically spoke about using databases to look at all the schemes protocols etc that have been developed and make it available on the internet but it was a different context it was in the context of actually checking whether the some scheme that is being now proposed is actually more complex than a trivial combination of existing schemes but that same database could be used to related to your question where people basically say I taught this proof in my class okay and I have answered all the questions of the students and so yes I'm going to take that I actually thought this proof in my class means that somebody has actually looked at it don't valid it quiet in details and then having the possibility of students who say I don't understand it oops that's a back okay so i remember when i was in montreal actually was teaching students about the fiat shamir protocol for identification and then the sun student in the class actually mentioned that some attack against that scheme which then became a paper of crypto so that would be one solution and just not necessarily limited only to this area it might be done in broader context where people basically attach their name saying this hell has been verified not necessarily said it's kind of a trust building a petrasis it doesn't necessarily say that it is good and I do realize that also follow metals are limited it's kind of little bit when you look at you talked electrical engineer they design circuits so that they become easier to verify and that's also an approach but yeah the funding is a big problem and I heard that National Science Foundation has been basically clobbered and that goes back to the bush administration that's actually very very sad I know yeah one of the problems with with any anything that pertains to security biet cryptography beat systems security bit even national defense is credit is societal credit is often how do you claim credit how do you get credit for what did not occur I used to have on my slides I used to have a citation to somebody who had an asset oops i put these guys a personal citation on my slides and i haven't asked him his permission and so i've emailed him and he didn't basically want this citation as actually he told me and so then i removed which is really sad so what happened to him I'm not going to mention his name is not going to mention the company so it was a company that in the 80s invested a lot of fries a lot of money in actually using authentication to make sure that people who actually go in from outside the network and tried to go in that they're actually authorized and so they used des and other techniques at a time in order to guarantee the authenticity so this company came in financial problems in the 90s and they call the head of this group saying okay you have basically recommending us to implement all the script oh how much did you actually save and so when I teach about intrusion detection I say this includes diction thing although it quite limited is useful because then you can actually use it I actually spoke about it with actually mentioning his name about endurance detection and when you look at how much money has been saved and that is the issue and so he lost not only did he lost his shop but the whole group was fired because he couldn't demonstrate how much money the company had saved so yes this is an important aspect and that's why I think it's sad that that connection not mentioned the name his name and the name of the organization for which he worked I'm actually state what you exactly said yes yes it is you know there are people looking at economic aspects of security and so that's an issue that should be definitely there 
133Ysr71YOw,28,"Live from the February 2020 DC206 monthly meeting

DC206 Meeting Presentation:

Title: Public Key Cryptography, How and Why Does It Work?

Abstract: A description of the non-elliptic versions of RSA and DHA followed by a primer on the branches of math involved in understanding why they function. Itâ€™s expected you know basic algebra, and what powers and logarithms are. This will be a live-coding talk where Python is used to illustrate the concepts.

By: Omnifarious

Bio: Iâ€™ve been a programmer since computers captured my imagination when I was very young. Computer security and cryptography became a focus of my learning in 2003 when I worked at a very underfunded startup in the instant messaging space.",2020-02-16T22:35:29Z,"Public Key Cryptography, How and Why Does It Work? [DC206]",https://i.ytimg.com/vi/133Ysr71YOw/hqdefault.jpg,BLR Events,PT1H24M51S,false,1259,35,0,0,3,"what was that 17 is two times eight plus one so how about I'll throw out 123 because 23 is 2 times 11 plus 1 can anybody think of another so another one that we could think of or that we could work might be 79 does anybody for sure know that 79 is prime I think it is let's let's do some tests here okay that's five it's just we're just good and then how about like nine that's nine that's good yep that's good yep that's good okay so it's prime what I just did is a probabilistic prime Ella t-test this probabilistic pellet primality test is making use of a little thing called Fermat's little theorem Fermat's little theorem states that if you have a prime you can do a to the P mod P actually it says a to the P minus 1 mod P equals 1 right and so if we do a to the P mod P we'll get 1 times P so I just did that with her a bunch of different numbers and it all came back with the same number probably Prime there are numbers for which this prime allottee test succeeds for every single number you put in I believe those are called Carmichael numbers but I might be wrong I might be confusing it and getting the name wrong with and switching it with something else but there are a small number of numbers for which that will test succeeds for every single number that you throw at every a it still gives you one they are called pseudo Prime's and there's ways there's a complex probabilistic crime test called Rabine Miller that does that does a better job that where you can actually detect on that Carmichael numbers are not prime but that's that's not the focus here so we have 23 and 79 so I'll do RSA first even though it's the more complicated of the two algorithms it's the one that everybody probably knows better so in RSA you would have 23 and 79 would be your two primes and that's your private key your public key is those two primes multiplied together in this case 18 17 so for various reasons we need a funny algorithm that I owe a Nazi here what one do I need for that one yes that's the one I need so import so I made a algorithm called extended GCD I don't have a very good docstring for it now there is an algorithm called GCD and oh yes hmm and that one has a nice dock string and everybody knows about the GCD algorithm does everybody know what Euclid's algorithm is for finding the GCD anybody not know Euclid's algorithm for finding the GCD okay so here's how you cleanse algorithm for finding the GCD works so you start with like let's pick a number oh let's build something up times 3 times 7 and then we'll have 2 times 5 times 7 right so what's the GCD of 63 and 70 so what you write but with the way you do it or the way this algorithm works because it's supposed to work for any size number you can just eyeball this one and make a guess because you know you can sort of factorize it in your head and figure it out and also to the factors are sitting right there because I built it out other factors but if you wanted to know without knowing that and they were like huge numbers this algorithm will give them to you so the way you do it is 70 percent 63 that gives you 7 I'm going to use 63 percent 7 Thank You G 0 well 7 is the GCD and we can take arbitrary numbers like 237 that's likely prime will take 236 we'll pick something where we know there's a GCD that's not one like 236 and for 22 so that has a GCD of at least two and maybe something else so then we can do for 22 percent to 36 get 186 to 36 percent 186 and you get 5050 or 186 percent 50 it's not what that supposed to do oh that's what that supposed to do there we go and you get 36 50% 36 so it can take a few steps 14 percent 8 but now we can tell the answer that we're going to get out of this is 2 but you see how it sort of built sort of steps its way down to 2 and then once you have 6 percent to 0 so 2 is the answer I just pulled it out of the air I pick something that was divisible by 2 so that the GCD would not be wanted that was the only criteria so this algorithm can find the GCD of any two numbers and it takes on average about something related to the log of the size of the you know log of the number number of steps to it to get it done so the extended GCD algorithm does the same thing except on the way on the way as its doing that it looks really complicated but all its really doing is you have this equation down here and we're finding the GCD of 23 and 15 for some reason well yes I'll explain why those two numbers soon so you know you start out with the equation 23 is equal to 1 times 23 minus 0 times 15 and 15 is equal 1 times 15 minus 0 times 23 and then you just subtract the equations from each other and multiply things and keep sort of those equations in mind and then at the end you get what you had to multiply 15 by and what you had to multiply 23 by to make sure that the difference was one no so do you know why the GCD works by the GCD algorithm works so think of your two things you have your two numbers think of them as like what right but there's a nice graphical one that I've seen and so we can go for the graphical one so your number is composed of these equal sized chunks of some unknown divisor right because that's what it means that to have a factor right because the factor is some integer number times some other nurture number so you have this integer number whenever it is a a and you have like no BAS B times a that's supposed to be an asterisk I guess it looks sort of like a spider but it's supposed to be an asterisk and then you have like another number where you have some number of A's we'll say it's just three of them Oh nope we should make it forward them to make it a little more interesting so here we have C times that's supposed to be a C so C times a so all you're doing with TCT when you do the remainder you're sort of figuring out how many times can you stuff this one in here this case you can only step it once and then you get these two remaining ones as sort of your remainder so then you go your remainder are the two A's after you subtract sort of like you know this is the C times a partner so the two A's that are left so then you find out how many times do these go in here and you discover in fact that I made a mistake in that in fact a is not the biggest factor it's two times a that's the biggest factor because you can fit the a the 2a in there twice so whatever a is two times a is the biggest common factor and that's how this works basically remainder will always have the factor that you're looking for in it and so you're just chopping things down using the remainder until you get to just the factor you care about that's how extent that's how GCD works all extended GCD is doing is keeping track of like this is keeping track of the remainder extended GCD also keeps track of how many times each one of these fit in as you were chopping it down so that at the very end you actually find out what you had to multiply the two sides by to get a particular result if it's zero of course it's very uninteresting because then you just multiplied it by the other side divided by the greatest common divisor but if it's one it's a very interesting results for reasons I will get to shortly and so that's what extended GCD is all about and as you can see I sort of had the equations written out this is actually available on a website OS d end like here as a mercurial repository because I'm fond of material so you can actually if you want to see this code that's now on this screen you can grab it from here and mostly I did this because this is not too hard to write but it's complicated enough that it's really easy physics I didn't want to have to write it all in front of you so yes and as you can see essentially we're keeping track with the two sides and as we're chopping it down figuring out how many times we have to multiply each side by we're kind of keeping track of that through each step does anybody want me to go through all the steps for this particular example here for like 23 and 15 well I'm not only finding the common divisor I'm finding the numbers that I have to multiply both 23 and 15 by to get a difference of 1 and that does get me something really important that I will get to in a bit and that's the point of extended GCD versus GCD is that it gives you those numbers and I will I will I will demonstrate here so minus 13 so 23 times minus 13 plus 20 times 15 will be 1 if we cared about 23 here then we would also discover that if we did 10 times 23 percent 15 how does that work now so we have 20 times 15 oh that's right 2 times 23 percent 15 there we go and on the other side we would have 20 times 23 percent 23 this is that how that works oh I know no no that's not how many anyway I don't know how I will use it later so um you have our you have our two primes back here I used there we go twenty-three times seventy nine so we were looking for the math that extended GCD our number utils yes that's right extended GCD of not 23 and seventy-nine we're looking for 22 and seventy-eight actually we're looking for 22 times 78 and then we're picking something like the tree now we know 22 is prime minus 1 and 78 is prime minus 1 so 23 and 79 minus one and then three is just number we picked has to be it could be anything it's best if its prime and so there are different reasons to use different size numbers if you're doing an encryption key having it be small is good if you're doing a signing key it's not so important that it be small but it does have to be it does have to not divide 18 17 oh sorry no the sorry it has to not divide 22 times 78 and so this GCD has to be 1 let's not see here so let's see ah that's some threat one to do okay let's work this out here so we're getting oh they have a common factor the GCD was hmm so so let's go back up here and pick 23 and 47 okay so 1081 is our public key now we'll do this all over again 22 - 178 or 46 - 147 - 123 - 1 that's right 45 own dot 45 so 22 times 46 is 10 3 4 so 1032 times 3 percent that isn't the right way around so 1032 or 1034 - 675 okay this one is supposed to work so 2347 what am I doing wrong 22 times 46 oh that's what I'm doing wrong okay thank you um so again this time ten ten times three okay that wasn't the right way around so well - 675 oh you're right I'm so many things that I have to remember to change okay so ten twelve is the right one we want percent ten twelve and then we want percent ten twelve minus six seventy five that one wasn't the right one so ten twelve minus two times three percent ten twelve no no no I'm doing something wrong still okay we've got this we've got 22 times 46 now is 1012 the GCD is one something times 1012 so 675 times three it's 2025 ah there we go there we go hmm so 675 is the thing that we want so let's pick a message so the last number is the GCD so what we want here is minus 2 times 10 12 plus 6 75 times 3 is 1 so that's the what it's giving us I I need to have it print the output in a better format to make it more obvious exactly because what I'm looking for that I'll talk about later is I'm looking for the multiplicative inverse of 3 which that's a word that I don't expect anybody to get it there's a phrase that I don't expect anybody to get at this point in time but that's what I'm looking for is the multiplicative inverse and so I just play around with the numbers that I get out until I find out what the multiplicative inverse is I could actually fix the extended GCD to just tell me what the multiplicative inverse is yes but I haven't right right so basically we're looking for what we can multiply it three by to have a modulus of one when divided by ten twelve and that is the multiplicative inverse it's 3 mod 10 12 as I said whatever that means so we'll call our public key and we'll call our public key 2340 so we'll call our private a equals 23 come out 47 so we had burn away so let's pick a message um it can be any number that's less than a thousand twelve as a message any number times or 900 to the power of three percent 1012 it's 740 right so no that's our encrypted message is 740 so let's try decrypting it this actually is probably going to be a very very large number and I don't trust Python to do this correctly - like optimize it as Python doesn't optimize so python actually has this nice function for various reasons that already does this X star y % Z so we're going to do that we're going to do it 740 comma 675 comma 10 12 and that's equal to 740 start our six 75% 1012 hmm what am I doing wrong 23 times 47 oh that's what I'm doing wrong sorry we'll try this again 900 percent private key there we go now 625 add in this particular case 1081 they're much better public key sorry yes so actually I should rename this and we'll do it again just to make it clear and then this one so there now that means 675 had to be secret but you notice how we were able to derive 675 by knowing what the two values that went into our private key were we derived 675 because we knew that the two primes were 23 and 47 we had to multiply 22 by 46 in order to know that it was 22 and 46 we had to know that we started with 23 and 47 so in order to figure out 675 you have to know what the two primes are then go into your your public key but the 3 can be public in fact the 3 is public so part of the public key is actually the exponent you expect people to use when they're sending you a message does this make sense so far like you've seen the RSA algorithm work does this look like the RSA algorithm to you yes yeah because you have basically M star star E is the 900 times 3 thing so you know M would be equals 900 e equals 3 so you know M star sorry e percent public key that gives you your encrypted message and then you have so and then you have and 675 is a magic thing based on e that we derived with this extended GCD thing and the prime is minus 1 for some unknown reason okay so that's RSA and that's how it works the magic happens in the fact that you know to use the extended GCD algorithm in the way that you do and the fact that you need that you know that you should be using 22 and 46 that you should be using the prime minus 1 and there are some very good reasons for that and they have to do with with group theory but I'm not going to get into them right now that's that's what I intend to get into in a bit so the next thing to talk about is diffie-hellman luckily diffie-hellman is a little bit easier and in diffie-hellman you really really want to have Prime's that are of the form 2 times P plus 1 it's not as important for RSA the important thing for RSA is that the factors of prime minus 1 are not the same as the exponent that you're using but for diffie-hellman it's really important that the prime that you choose is the basis for your diffie-hellman group is of the form 2 times P minus 1 plus 1 so here for diffie-hellman diffie-hellman isn't for sending does anybody know what dippy Helmut is for yeah right so the goal of diffie-hellman is not to send of a secret message the goal of diffie-hellman is for two people to agree on a number without anybody in between being able to tell what that number is and that number is then becomes a key that you use usually for symmetric encryption for like 80s or something like that and so that's the goal of diffie-hellman it's not to send a secret message it's deuce just to both of you agree on a secret number so we'll start off with Alice and Bob will pick a an exponent Alice's exponent we can pick anything that's not - or we'll pick 47 as our as our basis prime so Alice can pick an exponent that's anything that's not like - or 23 so anything anything what was 1919 so LS is exponent is 19 Bob's exponent is anything again anything that's not - or 2350 except it has to be less than 47 yes 43 okay so then we will take we have error our diffie-hellman prime equals 47 then the other thing that we have to decide on is a generator and this generator is one that both Alice and Bob use it's called a generator for a reason but we'll pick four so here's what Alice sends Bob when Alice and Bob want to have a have a talk right Alice and Bob want to agree on a secret so Alice sends something to Bob Ellis takes G star star 19 percent 47 and these are small enough that I don't feel the need to use the palette Inc so Bob sends Alice sends Bob nine and and actually you know I should have used Ella's exponent here there and you should use D HP here okay now Bobson zealous this okay so they each sent each other some weird random number nine and 36 well once Alice gets her nine what alice is going to do with the nine is she is going to take nine star star B E or no stars are AE % 47 th P so she's going to get 42 and Bob is going to take his the number that Ella sent him he should have gotten 42 - now let's see why did this not happen so G star star AE % d HP is 9 so that's the Ellis's exponent 9 to the oh I did it the wrong way around should be 9 to the Bob's exponent and it should have been 36 to the Alice's exponent there we go sorry so here's what we're trying to do both sides are trying to compute both sides of trying to compute G Star star 19 no G Star star ae star star B e % d HP right that's what both sides are trying to do but one side is going to compute it in this direction and the other side is going to compute it in that direction so one side is going to send this and the other side is going to send that and then they will each be able to agree and you can easily see like this is on a symmetric equation they are both going to get the same result and in order to figure out what the original but LS is exponent is given 9 you have to solve a problem called the discrete logarithm problem you basically have to find the exponent you know finite field given a number and that turns out to be doing hard it's really easy in this case you could just generate what they all are without a lot of difficulty you know there's not that many numbers but when your numbers are in the size of you know 128 bits or you know 10,000 24 bits it starts getting really really hard to solve this problem so that is how diffie-hellman works well the generator and the DHP the the diffie-hellman Prime our public parameters that a lot of people use a lot of people will use the same because there's some interesting weird little mathematical quirks about the generator in the dhp and so you want them to be chosen by some Authority that's in fact done the work they figure out that you have good generators and good diffie-hellman primes um but those are public parameters they get used by a whole lot of people but the exponents themselves are the secrets and they aren't shared so in fact that's what diffie-hellman is for is for being able to come up with a agreed-upon shirt so why do these things work like I mean it's clear looking at the math for diffie-hellman why I mean it looks obvious why it should work like you know those things are commutative operations you should be able to switch them around but why does it turn out that the discrete logarithm problem is secure and RSA it's kind of a mystery why it works why are we using P you know when we have our primary public key created by P and Q where are we using P minus 1 and Q minus 1 what's the extent of GCD ogen I'm doing in there like those are kind of weird I remember first time I implemented I just did it and I didn't really understand what I was doing or why it worked the reason why it works is really interesting and I'm going to start going out telling you why so how many of people here have heard of a group in the mathematical sense actually another question how many people have questions about this RSA or diffie-hellman after my mistake written attempt to show you them look at use RSA for so RSA is used for two things so in RSA the exponent as we go way back up here we chose three as our exponent right that's a public value that's associated with the key the key the public key is in fact composed of two pieces the public key is composed of the two primes multiplied together and a public exponent for people to use and you just publish that tell everybody the world in the world my public key is such-and-such and in fact usually you're using RSA everybody's kind of agreed you know for this proton is going to use this as their public exponent it isn't like the public exponent has to be specific to the particular key everybody can use the same app but the public exponent and that's just fine but the public key had it so you just publish your public key in the newspaper or and then anybody can take I have a private message a pretty tiny private message because it had to fit be less than ten thousand twelve for a really large psyche your message can be as big as the key is almost and so you know you pick that big giant message and you just send it to somebody you take it to the exponent and you send them the result the and finding out what it was you took to the third power to get this back right so RSA you can actually send somebody a message um whereas diffie-hellman you don't get any control over with those with that secret number is right it's just a random secret number so if you're using a fairly large diffie-hellman Prime what I've done is I've passed the secret number through a hash like sha to gotten a 256 bits of stuff out of it use that as my secret key as my for a block based encryption like AES that's usually what you would do with it there are schemes to actually use this for doing signatures and stuff like that I'm not going to get into those here but that's what the public god what is it called the there's a public signature algorithm that's based on this that GPG supports yeah that the that nist came up with for a long time ago for using diffie-hellman to do digital signatures and so there is a way to do it [Music] no like so let's look here at the Alice are you talking about four digits or four oh the way you get around that is you get around it in the hash of the signing as later yes that's it DSA as when they melted they were still not wanting people to use it to encryption certain TSA has interesting property and then it works well for signatures but it's not i like RSA what's been doing Cookson and signing DSA was designed to make it strong for signatures but not efficient effective for encryption because the government was okay with you signing things but it doesn't want anything yes sure I've nurtured it because I haven't really cared on my opinion RSA does say and that's good enough for me the way you use our I'll explain how you use RSA for signing later but that three and that seventy five like the basic thing for RSA is you do RSA percent and then percent private exponent right you know public exponent then multiple message to the public exponent and then to the private exponent well that looks an awful lot like DSA right you can just switch them and so you can actually have two exponents that you pick you pick your signing exponent and you pick your you pick your message exponent and you have different private exponents for each and you just sign things with the signing private exponent and people can verify using the by decrypting it to make sure that they get the right value with the public signing exponent and then they send you a message using the public message exponent and then you can decrypt it with the private message exponent so you can use RSA for both sending a message and for signing things because the algum works symmetrically as far as the private you know using the private key versus the public the private versus the public exponent for your first exponentiation so that's why I've never really researched how DSA works and you're right about why DSA was created the way it is and it is based on diffie-hellman fundamentally so if i were going to figure out how it worked I would start with diffie-hellman and then figure out what they did to it to make it into a signing overlay which I'm guessing has something to do with either using the hash for the generator or using the hashes like the public you know an exponent somewhere I have no idea so now we get to the part with a group and a bunch of you knew what a mathematical group was so there's somebody who raises their hand can they tell me what properties what a group is the generalization of property looks operator properties it's like inverse whether I so a group is a set of thing of enough that set can be filled or it can be an opera I say integers in this example so is like the set of all and the operation plus the reason why it's not just a set plus an operation the operation has to have certain properties to one result is that if we have like a plus B plus C has to equal a plus B plus C for every single element of your set so a B and C can be any elements of your set and this has to be true for all of them and that of course will give me a an error because a isn't fine but there we go so the other property is that for any a there has to be there's two more properties I'll get to the this other one first so there has to be some element we'll call it e when you take it with any other element of the set you get that element of the set back and all the identity element for addition that it element zero so anything gives you whatever that thing is so yeah video proper you have that for there has to be some other element of the set such that this happens to be true so for integers it's the negative numbers you know 1 plus negative 1 is 0 5 plus negative 5 is 0 so for every for any integer come up with some other integer such that when you add the two together you get the identity element which for addition is 0 but for multiplication it would be 1 because 1 times something is is that something right so multiplication with just plain old integers is not a group because there are no inverses what do you multiply it by to get 1 there isn't anything you can so there's multiplication plus the integers is not a group that means a plus B has to be G is our group so this be true as well for any two numbers a property which is basically a day of stating the inverse property and that is saying that for a plus for any if you start with a some beat you have to get a distinct number for each possible be that you could add to it now that happens to be the same property as the inverse property those two are essentially equivalent properties if you have one you have the other so anyway that's what a group is and so we have you know really good examples of groups we have integers another really interesting group would be if we had integers under multiplication mod a number a prime and so I actually built this thing that will do print a group table and then we'll put in for our group list rave one because we want one through seven comma come abhi a times B seven so there so I lose one is one times two he has every single element tonight Polamalu every single element in it on this set this group has one other property that is for some group spin on which is that a times B is equal to B times a if groups of which the community holds are called abelian groups after this mathematician named something Abel Norwegian mathematician I could Nils baby what was it yep it is a little like that I've actually thought about seeing if I could think of a way to solve Sudoku puzzles but I don't there's some of the things that are true about Sudoku puzzles that make it's that it doesn't work but yes it's like a Sudoku puzzle and so as you can see it's a group let's look at let's try Oh fifteen will that be and in fact no one we get zero in some of these places zero isn't in our in our set right so right away not a group but also to you notice that for for example for like three only multiples for three show up there's no no other values that show up in here and yeah the reason why that is is because fifteen is in prime 15 has three is a factor so as you're multiplying you know as you go up by threes you will eventually wrap around and there's a whole bunch that you'll skip and you'll never get to essentially things if you're using multiplication mod something that isn't a prime you'll get false zeros you'll get zeros that aren't that don't look like zero from the start and that makes it so that it's not a GU zero can't be a member yes and zero can't be what was that okay I will do that poof and it's a group again so you can make a group out of any prime under multiplication by just modding by that prime so yes now there's actually this whole series of mathematical objects that allow you to apply more and more mathematical abstractions so you start with a group and group is one operation has the properties that I just talked about like you know associative property inverses all of that then you get up to something called a ring and a ring is a group with and another operation and that other operation we could call multiplication like if our original operation for our group was addition the other operation would be multiplication and then multiplication though doesn't have to have an inverse for a ring so all of the integers are a ring because any multiplication of any two integer still leads to an integer that's within the set of all integers it's just that there's no inverses so yes set of all integers is a ring and then the step up from that is a field and a field oh there's one other rule that has to be true for the two operations and we'll so we have to have a times B plus C has to equal a times B plus B times C so basically one operation has to distribute over the other yeah a times a times C yes mmm thank you so that's the other thing that has to be true for things that are ring so for fields you happen to have sort of two overlapping groups you have your group under multiplication and then you have your group under addition your group under addition is always going to be one bigger than your group under multiplication because your identity element for addition can't be the same identity element as the identity element for multiplication because zero zero can't be the identity element for multiplication now this is true for integers obviously when we're thinking about integers like zero times anything is going to be zero it doesn't Saturday group property right it actually there's a really nice and elegant proof that I don't remember that shows that if no matter what you do if you have a field you have to have distinct identity elements for both addition for your two operations you can't have the same identity element for both of them unless that identity element is the only element in the set so if it's just 0 well yes 0 times 0 is 0 0 plus 0 is 0 it works but if you have more than one element you have to have different identity elements for your to generation the proof involves showing how the distributive property doesn't isn't compatible with having the same intent in the element for both operations so let's look at all the integers from 0 to 17 under it addition that look like a group yeah it's a group right it's a pretty group yes and there's our thing again of all the integers from 1 to 17 under multiplication and that's also a group that quite so pretty but it's a group so we have two overlapping groups where we have different entity elements for each we have zero as the identity element for addition we have 1 as the identity element for multiplication therefore actually integers mod prime is a field once you have a numeric field essentially all of algebra works on any of your objects in that that are members of that of that set so any algebraic expression that you write any algebraic equation that you write holds true for things in that set as well as it holds true for like rational numbers so this whole idea is something called abstract algebra I will look up a book on abstract algebra there's a really fantastic book that like brings you from the very beginning up through understanding some fairly advanced concepts in abstract algebra dad I I think it's probably one of the best books I've ever seen on the subject but that's that's the whole idea of where this comes from it was invented actually by a guy by the name of Everest invented as a way to prove that equations of the form like X to the fifth plus X to the fourth plus whatever you know a X to the fifth plus B X to the fourth plus C X to the third can't don't have algebraic solutions and so it kind of makes sense that he up with a abstraction for algebra so they can prove statements about algebra anyway that's where this comes from so why is this relevant to what we're doing so one you notice Prime's are involved here like we make our fields other Prime's so it seems like maybe somehow this has some relationship to what's going on in diffie-hellman and RSA right because there we seem to have to choose primes to now the weird thing is though is RSA has this thing where you have like let's go back up here to 16 you know this isn't a group right RSA has this thing where we care about somehow care about these things that are prime minus one times other prime minus one and that isn't going to be a group because those two things are by definition not prime right so what's going on here let's try in fact actually this is the perfect example right here so let's try the strange one from X for X in because we notice that all of our weird little problems here have to do with things that are factors of 15 right those are the ones that cause this thing to sort of lose its group like quality that's where the zeros start coming in so let's just remove them where math 4x math GCD I hope I've imported math X comma 15 equals 1 so we're going to pick out all the things that are relatively prime to 15 let's see what happens when you do that well oh yes yes well this is sort of interesting two four eight fourteen one seven eleven thirteen it looks like a group doesn't it hmm how big is this group 1 2 3 4 5 6 7 it's 8 elements 8 that's that's 2 times 4 isn't it and 15 well that's 3 times 5 hmm well gee P minus 1 and Q minus 1 seem to be showing up here let's try this for some other thing that's the multiplication of of two primes let's try 35 so arrange 1 comma 36 right oh there we go hmm this also kind of looks like a group does anybody see anything that's clearly not group like the zero show up anywhere in here no so yeah this looks like a group too so let's do Len X actually for Len I think you actually have to have a list so let's do list X for X in range 1 comma 36 if mask GCD X comma 35 equals 1 right that's 24 well 24 happens to be 4 times 6 and 35 is 5 times 7 interesting well so there seems to be sort of a group hidden in like P times Q and that group seems to be of the size minus 1 times Q - so there's this really interesting thing of interest will talk about the RSA algorithm those sort of bring out olia fact this function is this specifically what you hum brokers are relatively prime to your number and P minus 1 times Q minus 1 times whatever other prime you have you know we'll call it R minus 1 whatever Prime's you have you just multiply together all the minus ones and you get the answer what others totient function starts getting a little bit more complicated if you have multiple prime factors like if you have 2 cubed for example if we did this for 8 the answer we would get out would be 4 and that's because it's 1 times 2 times 2 basically anytime a prime is repeated more than more than once the second time and the remaining times it shows up you just use the prime whereas the first time it shows up use the prime minus 1 so euler's totient function can't be solved you can't discover the answer to toilet toilet associate function without factoring the number that you're trying to discover toilet the answer to toilers totient function 4 so it is that is part of where RSA security comes from this we need to know the answer to other Stosh in function for our public key but we can't find the answers the toilers totient function for a public key without knowing the two primes that went into making it up so why is the fact that those two things make up a group so important so let's start with exponentiation right here right so let's pick exponentiation Mada prime because primes are important here to star star a for a but let's pick any number that's we're gonna pick our prime as being 11 so let's in 11 7 or their Hey Oh forgot one important detail hmm that's a that's a unique list isn't it well it's interesting so the other thing is is we happen to know from high school algebra that a star star X times a star star y equals a star star X plus y so that means multiplication of two numbers is addition of their exponents we also know that essentially all of algebra works for things that are fields this identity holds for four integers mod p because integers mod P are filled so that's there's sort of an extra group that we get for free out of our field and that's the group of numbers the group of powers with plus so all the powers something with plus so here we pick dumb we picked now there's another thing we were actually mildly lucky with pickings six as our as our base actually you chose seven didn't you huh yep so seven might not have worked so well no actually seven work just as well yes let's try a different one there we go so notice this is yes notice that we get basically the same numbers repeated twice so there's also a sub group in there if you notice we'll do set here that's ten so there's this thing called the Grange's theorem that says here we go Lagrange s theorem so the granges theorem for groups so it's actually very simple like it'll go into a lot of complicated things Wikipedia is a terrible place to go to for math because the people who edit it have no clue how to make PD entries that are accessible to people who aren't math people but I don't know I wish I knew but one thing I will say is that I did look at this beforehand and this particular paragraph is very simple in the mathematics of group theory states that for any finite group G the order the number of elements of every subgroup H that divides the or divides the order of G so subgroups are a group of numbers that alter themselves form a group so for so if we were to do for example our little thing here list for X and range 1 comma so 0 comma 12 no no we wanted the print yes for range and 0 comma 12 and we don't care about the gcd action here right so we're printing out the group table for plus acceptable no that would help if I actually in here we're printing out the plus four numbers that are you know mod 12 and that's that's a group right but there's like little subgroups hidden in here if you happen to say like add 3 to things so 0 plus 3 is 3 3 plus 3 is 6 6 plus 3 is 9 and then 9 plus 3 gets us back to 0 again so we could in fact if we made a group table right of all the multiples of three why is 1 4 & 7 showing up in there that doesn't make any sense no so 9 plus 9 or 9 plus 3 oh that's why um luckily nobody looked too hard as to whether the first table is a group because it wasn't yeah well no zeros are okay for it for addition but there was 0 twice in the row yep yep that's why it wasn't a group but there we go see how this is like a subgroup because all of these numbers the operation on all of these numbers forms another number that's part of the set my satisfies our group definition does that make sense to everybody okay so the re end and you can easily see from how I I came up with this subgroup why that subgroup had to be of a size that was a factor of the original group size the originals group size was 12 this group size is 4 and that's because 4 by 3 you know 12 divided by 3 is 4 so we could actually probably come up with another group that's only of size 3 so some groups always have to have a size that's sort of a factor of the size of the group that they're a part of and you can see also why this is a subgroup right because it's all internally all everything references each other so that has has implications for our addition in yes for our addition of our powers right because the addition of our powers that the size of that group is going to be one less than the prime because you can't zero isn't included right so the size of that group is going to be one less than the prime therefore it's going to have factors and those factors are going to be the factors of P minus one so it's that's the reason why we got we did six know which number was it was nine yes that's the reason why we got on these repeats when we did nine is because we found a member of a subgroup and went through all the members it was like adding three each time right to our things in addition and so that's why we got this little subgroup here is essentially this is a subgroup of the exponentiation so I think I'm starting to lose people so let's go for a question period and then maybe I'll pick this up next month depending upon what the questions are and whether I feel I've lost people after the questions are over or not so does anybody have questions yep yeah cuz you just have to divide your public key by one of the primes and get together yes are people starting to see where this how this is going to start leading to talking about why RSA works yes and the reason why it does is because of these groups that form when you are adding in multiple and multiplying your exponents also except multiplying the exponents doesn't really form a group because the size of your group of exponents for RSA is you know P minus 1 or for dippy Hellman the size of your group of exponents would be P minus 1 because you only have one ever zero so well it's not going to form a group under multiplication all by itself because you can only form a group under multiplication with Prime's but as you saw with this tote with this toshin thing if we drop all the things that are factors and we pick only the things that are relatively prime we can form this group under multiplication even still so that's where where I'm going with this um yes yes it does well that's also true that's one of the reasons why you want to be kind of careful especially with diffie-hellman [Music] right yes that does agreements and that would have to do with interesting approaches to solving the discrete logarithm problem so yes there's actually other groups other than integers that you can do RSA and diffie-hellman in and that's where I looked at curve cryptography comes in as you pick elliptic curve cryptography well and the reason why that might be is because the integers the fact that it's numbers aren't just isn't distracting you anymore from what's going on yes right so I don't have the tools to erase it right offhand but what elliptic curve cryptography does is it creates a curve such that if you pick two points on the curve on draw a line to it those two that line will intersect another point on the curve and it turns out that this operation is associative and of course two points on the curve another point on the curve the operation stays within your set associative stays within your set there's an always an inverse you can always go back so poof it's a group and so that operation taking the two points on your curve drawing the line through it finding the third point that is your group operation and then repeated application of your group operation that's all exponentiation is repeated application of a group operation there you go there's your exponentiation and so then you can start doing exponentiation on your point operation right I will draw a better elliptic curve that's uh that's a good parabola yes so elliptic curves have a weird mathematical form to them and I'm not they essentially are something like Y cubed equals x squared plus ax plus B or something like that that's the formula for them but what's important here for understanding is they usually generate if you give them a fairly wide range of different parameters they'll generate a curve that looks something like this and as you can see any two points now two points on this curve actually I think yes in fact two points on this curve are going and intersect this curve someplace too and so that's your that's where your group operation comes in this point plus that point equals that point and so then repeated application of that group operation becomes exponentiation so you know this actually what they usually what they do is they reflect the point that's your that's the result point is the reflected point and so then you take this one plus this one again you get that one reflect it up there this one plus that one get that one reflect it so on and so forth and so that's repeated operation and then yeah that's that's where your groups come in and it's really difficult just like they're repeated just like doing exponentiation it's really difficult to go backwards the discrete logarithm problem is very hard to solve for elliptic curve just as it is for integers yep then anything can i race yep there is actually a really interesting elliptic curve based thing that's been widely promulgated called the IDI 255 1/9 curve I'd come up with a guy what's his name the guy who wrote yes daniel be wrote he wrote Kumail among other things Kumail the mailing system that essentially had one existence so he's it's also really inscrutable to read he writes code that's really hard to read that doesn't break but he came up with this yes yes I've heard that too so it's just a particular it's a curve with some particular parameters and one of the features is is that there are the keys are no longer so for curves usually the keys are like the curve in 8255 all bit patterns that are possible our valid keys I'm not completely sure how he's accomplishing this my guess is that he starts with a particular point as as generator point and then the key is in fact the exponent that's being used it's black magic but that's that's what's that's what's going on with that edie 255 1/9 is kind of is kind of magic it's also apparently extremely secure which is not overly surprising as published is it fully documented how the community the generators so that they there is because all could converse or professionally paranoid although not a good photographer yep the he missed did not actually document how they generated their curves and there is pinions that if you don't document how you generate your curves they can be hidden weaknesses in the curves and then deliberately said no he or so I did it and here's why I believe there was no hidden failures because I did this without free computing other stuff that might let me reverse engineer it he was very careful to not have any diversity mail where are some of the others may have it may not have it but without causing me to somehow additionally there are hints that the NSA has something to do with the curve selections or the public curves that are published by NIST yes 20 years ago so does anybody have any questions about the or what I just presented about why things are the way they are how it works you look you look like you're confused but don't know what to ask okay I'll end here and I'm not sure if I another [Music] "
