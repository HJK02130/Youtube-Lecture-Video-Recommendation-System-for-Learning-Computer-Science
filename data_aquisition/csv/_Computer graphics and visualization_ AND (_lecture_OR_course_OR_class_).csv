id,categoryId,description,publishedAt,title,thmbnails,channelTitle,duration,caption,viewCount,likeCount,dislikeCount,favoriteCount,commentCount,subtitle
Bjjz_8LfZ7g,22,,2020-05-11T11:09:06Z,Lecture Video_17CS62_Module1_DDA Alg_C.Sharon Roji,https://i.ytimg.com/vi/Bjjz_8LfZ7g/hqdefault.jpg,Sairam CS Video,PT18M12S,false,17,0,0,0,0,[Music] hi everyone in this video we'll discuss line drawing algorithms first line drawing algorithm is DDA algorithm and we'll be discussing DD algorithm in this video and in the next video we'll be discussing about bresenham's line drawing algorithm right so if I want to draw a line I need two endpoints that is ideally starting vertex and the ending vertex and in between space I have to fill with pixels to get a line right and we'll see the few characteristics of line first characteristics this line should be terminated density of the line should be constant that a thickness of the line should be uniform throughout it should not be thicker at one point and thinner at one point right density of the line should be constant third oneness density of the line is independent on length and angle and for this line end point should be specified that is I have to specify my starting vertex and ending vertex and this line drawing is accomplished by plotting the pixels between the end points before starting this algorithm will recollect few formulas the first formula is slope-intercept formula y is equal to MX plus B right and from this I can get the value of B and the slope formula M is equal to y2 minus y1 by x2 minus x1 and coming to this didi algorithm the first step in didi algorithm is I will be calculating my slope value and if slope is less than or equal to 1 theta that is when I'll get my slope value am less than 1 when numerator is less than denominator that is denominator value if it is more than my Meriter the value of young will be less than one right so in this case excess more and were useless right so when X is more and y is less right what I am doing a slight cut I every time I take the value of y X as as a incremental value of one I'll be in remanding X right and with this I will be calculating Y that is I'm sampling along x axis and I am finding y when I'm sampling along x axis every time X value will be incremented by one right and next cases M when it is M value when it is greater than one when M value will be greater than 1 then numerator is more than denominator Y M value will be greater than 1 so numerator is more so Y is more than yes in this case I am sampling along y axis and then finding the value of y it's great when I'm sampling along Y axis every time I'll be incrementing Y I'll be why he travels in unit intervals why he travels in unit intervals I have to find out the value of yes right coming to the cases first cases positive M value and Y M is less than or equal to one right in this case first I will draw the diagram right this is my starting point I'll take the value as X KS and YK and next to pixel position I have to find so next pixel position how I take the subscript yet k plus one come up why k plus 1 right so every pixel position I have to calculate right between the starting vertex and the end ethics if starting point is X K comma Y K how will I find the next pixel position so I'll take the next pixel position as XK plus 1 YK plus 1 so k plus 1 shows the next value of x YK plus 1 shows next value of y greater so in I have to find the next value that is XK plus 1 come up while k plus 1 and here your value is less than what yum value is less than 1 means later I am sampling along x axis and I am finding y when i sample along x axis every time i increment X by 1 that is its it travels in unit intervals straight you have to remember this so what should be the next value of x right the previous value plus 1 get travels in unit interval so previous value plus 1 the xk previous value of x is xk plus 1 and I have to find the next value of what to find this I'll be using my slope-intercept formula write the slope formula what is slope formula M is equal to y2 minus y1 by x2 minus x1 you take this as x1 y1 x2 y2 waita substitute in slope formula y2 that is y k plus 1 minus YK by e^x k plus 1 minus XK just I have substituted the slope formula and you know writer yet it travels in unit intervals so the next value of x we have found out already write XK plus 1 previous 6 value plus 1 I'm going to substitute that in this M value Y K plus 1 minus YK in the place of XK plus 1 and substituting this so it will be XK plus one minus XK these two will get cancelled and only YK plus 1 minus YK is remaining from this can I get the value of YK plus 1 yeah waita so what is YK plus 1 why why k plus 1 is equal to Y um + y kit so what is the next value of its it's an Y X and X I got here while I ain't got here so you if you check this formula to the previous Y value I have to add B young so young if I get as a decimal value definitely the next value of y it will be having a decimal point beta so what I am calculating here the next pixel position so pixel position it cannot be in the symbol you so I have to round off right so how will I write it finally the next value of x + y it will be the XK plus 1 come up round off M plus y K this is case 1 coming to case 2 wait they're coming to case to case 2 what is case 2 M greater than one filter yummy greater than 1 M greater than what here also I have to find the next value of x and the next value of y Reiter so here the next value of y will be y it is traveling in unit intervals so it will be YK plus 1 and I have to calculate its rate soidiers y k plus 1 is equal to previous y value plus 1 and how to calculate XK plus 1 beta M is equal to Y k plus 1 minus YK by ax k plus 1 minus XK right so we have found out YK plus 1 right so it is y k plus 1 minus YK by X K plus 1 minus XK cancel both will be getting 1 by Y XK plus 1 minus XK from this I am supposed to calculate XK plus 1 so which is equal to its k plus 1 minus the XK is equal to 1 by M from this can I write XK plus 1 is equal to 1 by M plus X K vente so how to write finally get K plus 1 comma Y K plus 1 that is next value of x and y there's nothing but since it is 1 by M they'll get a decimal value you should round off so round off the XK plus 1 by M come on what is Y value Y it is traveling in unit intervals so this is my Y value went up so this is the DDA algorithm you are having two cases M less than or equal to 1 M greater than or equal to 1 now using this algorithm we can see how to draw a light filter so we'll take I will see an example we'll take the line endpoints that is starting point of the line and ending point of the line will be given starting point is 10 comma 6 we can take an ending point is 15 comma 9 you can see the example we can see how to draw a line using DDA algorithm so what is the first step I have to calculate my young with M value only I can decide whether and should proceed with case one not case two right uh so x1 y1 x2 y2 you know the slope formula y2 minus y1 by x2 minus x1 so it is 9 minus 6 by 15 minus 10 which is equal to 3 by 5 which is equal to 0.6 HR now we have to draw a table in this table first column is X K by K next is its next value of x and y that is XK plus 1 come up for you k plus 1 like that what is the starting point starting - ten comma six traitor so you have to plot your starting point ten comma six right there x value ten comma six and how to find the next value right you know young miss equal to you got the values 0.6 m is equal to 0.6 you got it right so what will our point six so it is less than one so you'll be proceeding a lot with which case this one later you'll be proceeding along this case in this case X it is traveling in unit intervals and I have to calculate what so every time it's will be incrementing by one and I have to calculate why wait every time yes it will be incrementing by one and I have to calculate Y right so the next value of y X it will be level beta X it will be incrementing by one now I have to calculate boy how to calculate Y what is the formula what is the formula for the first case here it is it it will be incrementing by one I to find the Y value round off yum plus previous value of what previous value I'll take here then 6/10 it is incremented by one it becomes eleven so previous Y value let us yum plus YK what is yum value M is equal to 0.62 this 0.6 I have to add white so six plus point six which is equal to six point six right so I have to make a round off if it is if the decimal value is 5 or more than 5 you can drawn to the next value so it will be 11 comma 7 next its value it will be 2 other now how to the y-value previous Y value please yum-yum is 0.6 plus previous y value is 6 point 6 7 so what it is 7 point 2 so what will be the x and y value 12 comma when I round off it will become 7 next X value 13 rate up so what is y value yum plus jumplist previous X value Y value seven point two it becomes seven point eight so it is 13 comma right there so when I round up seven point eight becomes 8 beta next it is fourteen point six plus seven point eight which is equal to eight point four when I round off it will become eight so it is 14 comma Y eight Preta next it is fifteen eight point four plus y value is 0.6 it is 9 which is 15 comma nine so what is my question I have to draw your line between 10 comma 6 and 15 comma 9 so when you get 15 comma 9 you can stop when you get 15 comma 9 you can stop waketa now I have to draw your line you have to plot the graph so you can draw its and Y value so its its value it is starting from 10 so I'll start the x value from 10 so it is 10 11 told 13 14 15 that is 10 11 12 13 14 15 like that and boy it is starting from 6 right down 6 up to 9 7 8 9 7 8 9 right 10 comma 6 up so first of all he is 10 comma 6 you have to plot this 10 comma 6 what is the next value 11 comma 7 11 11 and it is 7 next it is 12 comma 7 this one comma 7 next 13 come iater right up 13 later next 14 8 14 8 next 15 9 15 Matt after this you have to join all the pixels to get a straight line join all the pixels to get a straight line join the pixels to get a straight line this is my DDA algorithm thank you 
fadtHIIXx8Y,22,,2021-03-31T09:13:44Z,M-02. DDA Line Drawing Procedure,https://i.ytimg.com/vi/fadtHIIXx8Y/hqdefault.jpg,e-PG Pathshala,PT32M25S,false,2,0,0,0,0,welcome to the e part sharla lecture series on computer science for post graduate students ah we had a course already this session this course is about computer graphics and visualization we had a session already and this is the second session on computer graphics and visualization in the last session and the previous session we talked about some of the very basics and terminology and the required background for this course and today in this session we are going to talk about the dda line drawing procedure so and we will continue further with the circle drawing the other line drawing procedures like bressenham and so on so we will start with the dda line drawing procedure followed by that will be the bresenhams line drawing procedure and followed by that is the circle drawing procedure so hope you remember all that we discussed that will be really useful for this session as well ah let us continue with this second session today first thing about graphics is that any picture is made up of a combination of some of the basic building blocks we call them basic building blocks because a picture is made up of ah some of the many of these are a combination of these basic primitives we call them primitives because they are combined in some form or in some manner to form bigger pictures so ah the we call them the 2d output primitives so we mean to say that it is 2d because we are dealing now with the 2d graphics in the future we will be talking about in future sessions will be talking about 3d graphics as well and there also will be discussing about some of the 3-d primitives so basically a primitive is something like a component of a picture so a picture can be considered to be made up of a combination of many graphic primitives ah some of the primitives are listed here as you can see one is points the fundamental primitive followed by that are the lines the triangle the planes the circles the ellipse the arcs splines nerves fractals and there are many more such primitives so you can think ah that a picture can be made up of a combination of these basic primitives as you all might have experienced while using computers or while using a word processing software like ms word you might have actually taken some of the ah line art some of the lines while you are doing some drawing while you are doing so you could draw a line select a line draw a line you could choose a shape like an ellipse and just make it bigger and you could actually color it and do much more to it so a picture is basically a combination of all these basic primitives as we can so how do we represent these things in a in a program are in a machine so that is what is our discussion that is going to happen today so how do we represent these basic primitives so that later we can combine them to form various pictures so to start with the fundamental primitive is a point so a point is actually a location in space and it has no dimension as we all know that theoretically a point has no dimension but so a point has got a location so which can be plotted as say for example 4 comma 5 and so on so it has a location and a line is basically a collection of points along a particular direction so when you extend a series of points along a particular direction so we call that a line so basically a line is a collection of points along a particular direction so in in graphics and display devices we basically ah we can think of a line as a series of points which are basically series of pixels ok so one important thing that we should remember is that the monitor is a device which has got a rectangular arrangement of pixels and a pixel is identified or located using some x coordinate and a y coordinate so some exposition y position so as we know that on monitors the x positions and y positions that we refer to are actually as integers and there are no floating point values for example you cannot plot ah a pixel on a monitor for value like say 4.5 and 5.7 there is no such pixel on the monitor so you have to either round it off or you can have only integer positions on the monitor that is an important observation ok so let us see what a line is and we have just seen what a line is and how do we draw a line in a program or how do we represent a line in a program so as we just discussed before a line is basically made up of a series of pixels along a particular direction so the most popular line drawing procedures that existed in the literature are the dda line drawing procedure one of the most rudimentary level procedures which expands to digital differential analyzer and the second well known procedure for line drawing is given by bresenham he is a scientist so these two algorithms will be discussed in this session so followed by that the circle drawing procedure so let us start with the dda line drawing procedure and as i said an algorithm or a program is like what is expected from a program or an algorithm or a procedure is given to end points and the procedures have to compute all possible and accurate positions between the two end points for the given line slope or inclination so we also want algorithms that should be efficient so efficiencies in terms of the number of resources the type of resources that they consume so ah they should be less complex and should be well behaved and should also give us accurate lines when we draw them so the first line drawing procedure that we are going to talk is about the d d a line drawing procedure so ah this is based on ah the slope point form of line equation so it assumes that a line is represented basically as a slope point form as you know a line can be represented as ah a slope intercept form in slope intercept form a line can be represented in slope point form a line can be also represented in parametric form so we assume here for the dda procedure that the line is represented in slope point form so this algorithm is the most simplest and rudimentary level procedures and it is also a scan conversion based procedure as you might remember that we were talking about the scan conversion the process of scan conversion is something like this the algorithms give us a set of values and the process of scan conversion is to represent a matrix of values so that we can finally put it on screen so a program the steps in a program are basically converted to a set of pixel intensity values and that is called scan conversion and the device or the hardware that does this is the display processor if you recollect the discussion of the previous session you would be able to appreciate all this so and it should be and the unfortunate thing that is the drawback of this procedure is that it is less efficient as we will note its drawbacks so let us start with this procedure this d d line drawing procedure we can imagine ah various types of lines ah that exist so for example if you could see here the line type 1 is actually it starts with the dots indicate here the circles at the end indicate that there is a light blue color dot here and a red color dot at the end so that indicates the starting and ending points of a line so the algorithms input should be the starting and ending points and the algorithm should compute all the in between points that make up the line so now the line type one is ah you can observe that this is more inclined towards x axis so see the inclination here so it is more inclined towards x axis so that is it is more bent towards x axis line type 2 you can observe that the line is more inclined towards y axis line type 3 if you see it is also more inclined towards x axis line type 4 is close to as as similar like line type 2 which is inclined towards y axis and line type 5 is actually a type of line whose slope is exactly equal to one so as you could see here the slopes are given here the important thing that you should observe is for line types one and two the slopes are positive what do you mean by positive slopes while x increases y also increases while x decreases y also decreases so these types of slopes are considered as positive slopes so when we move from the starting point to the other first point to the last point that is the first point to the other end point if the slopes are positive that is d y by d x is basically positive for line types 1 and 2 the slopes are positive but for line types 3 and 4 the slopes are negative and the slopes also have values here less than 1 greater than 1 as you could easily you can observe this kind of behavior so these are the possible lines that we can imagine in s in the two dimensional space so let us try to find procedures that can compute ah that can compute points along the lines of various line types that we have just seen so as mentioned here the line types 1 and 3 are more inclined towards x axis so the important observation is that we have to actually we can sample them along x axis at the best possible sampling frequency which is one so that is one unit here see imagine you have lines which are more inclined towards ah x axis so our aim is to actually sample the line along x axis at the best possible sampling frequency and that is actually one unit that means start from the first point on the line first end point and take sample values of one unit and go till the last point that is the other end point so similarly for line types 2 and 4 because they are more inclined towards y axis it makes sense only to sample them along y axis at the best possible sampling frequency that is actually one unit see you can also sample at two units three units four units and so on but as we know very well that the better the higher the sampling frequency the better is the approximation for the true line ok so that is where it is interesting the possibility the highest possible sampling frequency is actually one unit so because as we know very well that ah no in between points can exist on a monitor on a display device so we can only choose integer positions and the difference or the distance between every two any two consecutive positions is actually one unit on a display device as you know that's how ah the pixels are arranged on a display device like a monitor so imagine the a line with slope m less than one that means the line is now more inclined towards x axis so we will start our sampling along x axis at unit steps starting from the first point and till the last point so assume that we are given the two points so for example say like p one is a given point two comma one and p two is the other end point of the line say nine comma four and both are given and our aim is to actually compute all the other in between points that make up the that fall along the line path so as i said the distance that is we are going to sample this line along x axis because the line has a slope less than one indicating that it is more inclined towards x axis so it is mentioned already that one and three the line types one and three both show a case where the lines are more inclined towards x axis so we will be sampling them along x axis at unit intervals so the steps go like this increment x values by one unit and compute the corresponding y values using the slope point form of a line so what is that will be doing is will be starting with the first point that is will keep incrementing the x values by one unit because we can only sample the line along x axis at unit intervals and that is the best possible sampling frequency and the corresponding y values are computed using the slope point form ah similarly for the case m greater than 1 here modulus is considered because whether it is positive or negative slopes here you should notice that line type 2 is a line whose slope is greater than 1 and is positive for line type 4 the slope is modulus of the slope is greater than one but m is negative so because we are starting here and we are ending here so so for line types two and four will be sampling the line along y axis ok so at unit intervals and will be computing the corresponding x values so that is how we go with these ah steps so if you look at these steps here and given the two end points p 1 x 1 y 1 and p two x two y two as you know slope can be computed using the simple equation y two minus y one by x two minus x one which is nothing but the difference delta y by delta x so any two consecutive points along the line also satisfy the same property that is the slope if you compute taking any two consecutive points on the line also gives you the same slope so if you look at ah this second step here for any two consecutive points along the line say x k y k and x k plus one y k plus one they are two consecutive points if you compute the slope that is take the y difference and divided by the x difference and we get delta y by delta x which is actually the same as del y by del x so both actually are the same so here k takes integer values from one or zero for the first point and increases by one unit ok so k will start with the first end point and keep moving till the other end point so here take these equations the previous equations you should remember so that we will be using them for calculating the steps to follow so assume that m is less than 1 less than or equal to 1 that is m is either positive or negative so as i said our aim is to compute next x value and next y value so given the first end point we are starting with the first point which is a known point on the line and we will be actually computing the next x and y value the next x and y value the next x and y value till we reach the other end point so we indicate the next x value notation x k plus 1 we indicate the next y value with the notation y k plus 1 k plus 1 all in the suffix k plus 1 all in the suffix and in this case as we assume that the slope is less than 1 we are actually sampling the line along x axis so as we understood earlier that for inclined lines which are more inclined towards x axis we are going to sample the line along x axis at unit steps that means every next x value is exactly one unit at one unit distance from the previous x value so the next x value that is x k plus one is nothing but previous x value plus one unit ok so but the next y value is actually y k plus m how did we get this ah y k plus the next y is nothing but previous y value plus m units so how did we get this equation is you can look back in the previous slide what is that you can do is ah for next y to compute next y what is that we do is in this equation ah as we know that next x value is x k plus 1 as from this relation x k plus 1 is equal to x k plus 1 substitute in this equation for m x k plus one is equal to x k plus one so the denominator ah remains that is x k plus one minus x k so x k x k gets nullified and you are left out with one in the denominator so m is equal to y k plus 1 minus y k so which is nothing but y k plus 1 is equal to y k plus m is what is this equation so that is how we get the second equation here so we call this one as the increment for x we call m as the increment for y and these equations as you notice are recursive in nature that means every previous value is taken for computing the next value so unless we start with a known well known point on the line we cannot compute the other points on the line so come to the case 2 where we assume that the line slopes are greater than one that means you recollect the line types two and four so they have slopes greater than one if m is positive what does that mean if m is positive is the line type 2 so for line type 2 here m is positive ok so what is that we can do is as because the lines are more inclined towards y axis will be sampling the line at unit y values along the y axis at unit y intervals so the next y value is 1 higher than the previous y value so y k plus 1 is equal to y k plus 1 and substitute this relation this equation this value of y k plus 1 in this slope equation so replace this substitute for y k plus 1 y k plus 1 and the numerator then becomes 1 divided by x k plus 1 minus x k so we are interested to compute the value for x k plus 1. so x k plus 1 is equal to x k plus 1 by m this is how we get the next x value so for slopes greater than 1 the next x value is previous value plus the increment value is 1 by m for the next y value it is actually 1 higher than the previous y value so in the case if m is negative so we have to check for all cases first given a line we should check for all possible cases m greater than one m less than one whether m is positive or m is negative accordingly we should be choosing the set of equations for computing the next x and y values so if m is negative you can come to this case if m is negative so what is that you can do is the next x value is actually x k minus 1 by m and the next y value is y k minus 1 because you can now recollect the line type 4 line type 4 is actually a line whose slope is negative here x is increasing while y is decreasing so here there is a there is a mistake in this equation so you can make it plus it is next x value is x k plus 1 by m but the next y value is y k minus 1 because as you see here the line type 4 its x value is increasing while its y value is decreasing so y is decreasing by one unit while x is increasing by one plus m so you one by m sorry its one by m so ah you can take this equation here as x k plus one is equal to x k plus one by m so let us come to the third case so we have seen 2 cases here let us come to the third case if m is less than or equal to 1 that means again imagine the lines types line types one and three and if starting and end points are reversed what would you do if starting point and end point are just ah the reversed ah just in the reverse manner that is ah both x and y are decreasing for line type one and three so ah line types one and three so that that is these equations will tell you ah so both x and y are decreasing so x is decreasing by a value one y is decreasing by value e m so thats how we take this and case four if mod m is greater than one and if starting and end points are reversed so what happens actually is ah imagine line type two and four so as you could imagine line type two and four whose slopes are greater than one now these equations say that the for m positive case ah both because the end points are reversed both x and y values again just ah the they get the values get reduced by 1 by m for x k for x and 1 for the y for m negative in case if mod m is greater than one and m is negative so either x or y will be decreasing one of them will be decreasing the other will be increasing so in this case you can consider this this to be negative so y k plus 1 is equal to y k minus 1 or one of these will be negative as i have ah represented here so you can correct this so one of these should be negative so this dda line drawing procedure is actually as simple as given to end points and that is the first step is to get the input which is in the form of two end points so we start with the first end point compute the slope and check if the slope is positive negative or its magnitude is less than one or greater than one ah in program or while you do your program ah do not actually check or take the division instead you can actually check m is equal to d y by d x is the standard equation ah then to take a division like d o by d x what you can do is you can check if d y less than d x or d x greater than d y accordingly you can ah check your slope ok so that means if d y less than d x so that means m is less than one ok that is how you can if d y greater than d x or m is greater than one so in that manner you can do your comparison then to actually ah take a division of d by dx and then ah making it ch checking it for less than one or greater than one or equal to one and so on and so forth so while you do your program take that care because sometimes if you have to draw lines which are horizontal or vertical one of the d y and d x either of the d y or d x becomes zero so what actually happens is ah your denominator or numerator becomes zero so if the denominator happens to become zero that means if you have to draw a vertical line d x becomes zero and if you take d y by d x it becomes infinite and your program hangs so what you do is ah than to take the division d y by d x better ah compare the values of d y and d x ok so ah the algorithm is summarized here as shown in the slide so input the end points so get the two end points compute the slope the second step ah depending on the magnitude of the slope and you we can decide which of the ah procedure procedures to adopt are which are the equations to actually adopt and the final step is to actually as we discussed just before that your monitor or monitor is something where there are only integer pixels or integer positions we cannot ah actually plot points which are decimals so we have to round it off while plotting for all our computations you can use floating point values but while plotting we should round it off and plot so an example is given here given the two end points say two comma two and ten comma five are the two end points given as soon as the end points are given so find the position find the ah intermediate points using dda line drawing procedure so as the first step immediately you can check the slope so if you notice that the slope is m is equal to three by eight y two minus y one by x two minus x one it gives us three by eight which is actually point three seven five which is less than one so the first observation is that m is less than 1 so and this is also positive so this indicates that we have to sample the line along x axis at unit intervals so x increment is 1 and y increment is m as you could ah remember from the previous equations as case 1. so m is less than 1 and m is also positive so these equations are to be used for computing the next point next points on the line so to start with x naught y naught so that is the starting point as we you can give a notation x naught and y naught to indicate the starting point and which is also the known point on the line so the next point is actually as we know that x gets incremented by one unit what you can straight away do is increment the x coordinate by one unit three four 6 7 8 and the last point so that is ah we are given the points 2 2 and 10 5 so x coordinate varies from 2 to 10 while y coordinate varies from 2 to 5. so the x coordinate gets incremented by 1 unit so 3 4 5 6 7 8 9 and we have to compute the y coordinate using the equation y k plus m take the previous y value add m to that and m is a fraction here which is point three so that is three by eight that is point three seven five so here ah the next y value is computed take the previous y val that is the first y value is 2 add 0.375 to it and where you get 2.375 so 2.375 is what is actually listed here in the table as you could see here and add 0.375 to 2.375 which is 2.750 so we can keep adding ah the previous to the previous y value the m so that you can compute all the possible y values but these points cannot be plotted on the monitor as we know that monitor has got only integer positions so 3 comma seven 2.3.75 cannot be plotted so what is the possibility so you need to round it off so three comma two only can be plotted so when you round it off to the nearest integer so you can use some round function ok and you can round this value two point three seven five to two so three comma two is the point that we will be actually plotting similarly four comma three is the point that we will be actually plotting when you round off two point seven five it is three so similarly when you round off other y coordinates we get five comma three six comma four seven comma four eight comma four and nine comma five so for this line if this is the theoretical line that is actually getting plotted which cannot be actually plotted on the monitor this ddl line gives us coordinates ah c there are ah two comma two is the first point and three comma two is the next point so two comma two three comma two four comma three five comma three are the next two points so four comma three phi comma three are the next two points then six comma four seven comma four eight come for three consecutive points which are on a straight line which are ah like this and which are so this shape is actually called a stair step or jaggy effect so if you observe this line on a low resolution monitor you would notice that the line is actually not not nicely smoother and inclined as a nice theoretical line it is actually like staircase steps its like a steps because two points consecutive points are along a line then two consecutive points are along the next line and three consecutive points along the along a line and so on so this ah kind of points as we get because of the dda procedure because of rounding it off is called a state step or jaggy effect which we ah do not like our which is not appealing ah for a typical line so that is one drawback the second drawback is floating point calculation so we are taking care of so much of floating point decimals floating point calculations and which also always are rounded off and for longer lines the ddl line drifts away from the true line for the longest if you try to draw the longest possible line on the monitor say from the top left corner to the bottom right corner or you can try drawing from the left to the right inclined lines you would notice that there is a drift from the theoretical line so that is how is about that is about the dda line drawing procedure the most simplest procedure and in this what we have learnt is how to draw a line given to end points and how does the ddl line drawing procedure works and we have solved an example problem to understand what it does and we have also taken the note taken a note of the drawbacks of this procedure so let us conclude this session here thank you 
OXpkzdysFd4,27,"Subject: Computer Science
Paper: Computer gaphics and visualization",2015-10-21T06:28:33Z,DDA Line Drawing Procedure,https://i.ytimg.com/vi/OXpkzdysFd4/hqdefault.jpg,Vidya-mitra,PT32M25S,false,472,2,0,0,0,welcome to the 'part cellar lecture series on computer science for postgraduate students we had a course already this session this course is about computer graphics and visualization we had a session already and this is the second session on computer graphics and visualization in the last session and the previous session we talked about some of the very basics and terminology and the required background for this course and today in this session we are going to talk about the DDA line-drawing procedure so and we will continue further with the circle drawing the other line drawing procedures like present hammer and so on so we'll start with the DDA line-drawing procedure followed by that will be the bresenhem's line drawing procedure and followed by that is the circle drawing procedure so hope you remember all that we discussed that will be really useful for this session as well let us continue with this second session today first thing about graphics is that any picture is made up of a combination of some of the basic building blocks we call them basic building blocks because a picture is made up of some of the many of these are a combination of these basic primitives we call them primitives because they are combined in some form or in some manner to form bigger pictures so the we call them the 2d output primitives so we mean to say that it is 2d because we are dealing now with the 2d graphics in the future we will be talking about in future sessions will be talking about 3d graphics as well and there also will be discussing about some of the 3d primitives so basically a primitive is something like a component of a picture so a picture can be considered to be made up of a combination of many graphic primitives some of the primitives are listed here as you can see one is points in the fundamental primitive followed by that are the lines the triangle the planes the circles the ellipse the arcs splines NURBS fractals and there are many more such primitives so you can think that a picture can be made up of a combination of these basic primitives as you all might have experienced while using computers or while using a word processing software like ms word you might have actually taken some of the line art some of the lines while you are doing some drawing while you're doing so you could draw a line select a line draw a line you could choose a shape like an ellipse and just make it bigger and you could actually color it and do much more to it so a picture is basically a combination of all these basic primitives as we can so how do we represent these things in a in a program are in a machine so that's what is our discussion that's going to happen today so how do we represent these basic primitives so that later we can combine them to form various pictures so to start with the fundamental primitive is a point so a point is actually a location in space and it has no dimension as we all know that theoretical a point has no dimension but so a point has got a location so which can be plotted as say for example 4 comma 5 and so on so it has a location and a line is basically a collection of points along a particular direction so when you extend a series of points along a particular direction so we call that a line so basically a line is a collection of points along a particular direction so in graphics or in display devices we basically we can think of a line as a series of points which are basically series of pixels ok so one important thing that we should remember is that the monitor is a device which has got a rectangular arrangement of pixels and a pixel is identified or located using some x-coordinate and a y-coordinate so some expression Y position so as we know that on monitors the expositions and Y positions that we refer to are actually as integers and there are no floating values for example you cannot plot a pixel on a monitor for value like say four point five and five point seven there is no such pixel on the monitor so you have to either round it off or you can have only integer positions on the monitor that's an important observation okay so let us see water line is and we have just seen water line is and how do we draw a line in a program or how do we represent a line in a program so as we just discussed before a line is basically made up of a series of pixels along a particular direction so the most popular line drawing procedures that existed in the literature are the DDA line drawing procedure one of the most rudimentary level procedures which expands to digital differential analyzer and the second well-known procedure for line drawing is given by brezin ham he is a scientist so these two algorithms will be discussed in this session so followed by that the circle drawing procedure so let us start with the DDA line drawing procedure and as I said an algorithm or a program is like what is expected from a program or an algorithm or a procedure is given to endpoints and the procedures have to compute all possible and accurate positions between the two endpoints for the given line slope or inclination so we also want algorithms that should be efficient so efficiencies in terms of the number of resources the type of resources that they consume so there should be less complex and should be well behaved and should also give us accurate lines when we draw them so the first line drawing procedure that we are going to talk is about the DDA line drawing procedure so this is based on the slope point form of line equation so it assumes that a line is represented basically as a slope point form as you know a line can be represented as a slope-intercept form in slope-intercept form a line can be represented in slope point form a line can be also represented in parametric form so we assume here for the DDA procedure that the line is represented in slope point form so this algorithm is the most simplest and rudimentary level procedures and it is also a scan conversion based procedure as you might remember that we were talking about the scan conversion the process of scan conversion is something like this the algorithms give us a set of values and the process of scan conversion is to represent a matrix of values so that we can finally put it on screen so a program the steps in a program are basically converted to a set of pixel intensity values and that is called scan conversion and the device are the hardware that does this is the display processor if you recollect the discussion of the previous session you would be able to appreciate all this so and it should be and the unfortunate thing that is the drawback of this procedure is that it is less efficient as we will note its drawbacks so let us start with this procedure this radial line drawing procedure we can imagine various types of lines that exist so for example if you could see here the line type one is actually it starts with the dots indicate here these circles at the end indicate that there is a light blue color dot here and then the red color dot at the end so that indicates the starting and ending points of a line so the algorithms input should be the starting and ending points and the algorithm should compute all the in-between points that make up the line so now the line type one is you can observe that this is more inclined to sixaxis so see the inclination here so it is more inclined towards x-axis so there is it is more bent towards x-axis line type - you can observe that the line is more inclined towards a y-axis line type 3 if you see it is also more inclined towards x-axis line type 4 is close to as as similar like line type 2 which is inclined towards y-axis and line type 5 is actually a type of line whose slope is exactly equal to 1 so as you could see here the slopes are given here the important thing that you should observe is for line types 1 & 2 the slopes are positive what do you mean by positive slopes while x increases Y also increases well X decreases way also decreases so these types of slopes are considered as positive slopes so when we move from the starting point to the other first point to the last point that is the first point to the other end point if the slopes are positive that is dy by DX is basically positive for line types 1 & 2 the slopes are positive but for line types 3 & 4 the slopes are negative and the slopes also have values here less than 1 greater than 1 as you could easily you can grab observe this kind of behavior so these are the possible lines that we can imagine in s in the 2 dimensional space so let us try to find procedures that can compute that can compute points along the lines of various line type that we have just seen so as mentioned here the line types 1 & 3 are more inclined towards x-axis so the important observation is that we have to actually we can sample them along x axis at the best possible sampling frequency which is 1 so that is 1 unit here so imagine you have lines which are more inclined towards x-axis so our aim is to actually sample the line along X taxes at the best possible sampling frequency and that is actually one unit that means start from the first point on the line first endpoint and take sample values of one unit and go till the last point that is the other endpoint so similarly for line types two and four because they are more inclined towards y-axis it makes sense only to sample them along y-axis at the best possible sampling frequency that is actually one unit see you can also sample at two units three units four units and so on but as we know very well that the better the higher the sampling frequency the better is the approximation for the true line okay so that's where it's interesting the possibility this highest possible sampling frequency is actually one unit so because as we know very well that no in-between points can exist on a monitor on a display device so we can only choose integer positions and the difference are the distance between every two or any two consecutive positions is actually one unit on a display device as you know that's how the pixels are arranged on a display device like a monitor so imagine the a line with slope M less than one that means the line is no more inclined towards x-axis so we will start our sampling along x axis at unit steps starting from the first point and till the last point so assume that we are given the two points so for example say like p1 is a given point 2 comma 1 and p2 is the other endpoint of the line say 9 comma 4 and both are given and our aim is to actually compute all the other in-between points that make up the odd that fall along the line path so as I said the distance that is we are going to sample this line along x axis because the line has a slope less than 1 indicating that it is more inclined towards x axis so it is mentioned already 1 & 3 the line types 1 & 3 both show a case where the lines are more inclined towards x-axis so we will be sampling them along x-axis at unit intervals so the steps go like this increment X values by 1 unit and compute the corresponding Y values using the slope point form of the line so what is that we'll be doing is we'll be starting with the first point that is will keep incrementing the x values by 1 unit because we can only sample the line along x axis at unit intervals and that is the best possible sampling frequency and the corresponding Y values are computed using the slope point form similarly for the case M greater than 1 here modulus is considered because whether it is positive or negative slopes here you should notice that line type 2 is a line whose slope is greater than 1 and is positive for line type 4 the slope is modulus so the slope is greater than 1 but M is negative so because we are starting here and we are ending here so so for line types 2 & 4 we'll be sampling the line along y-axis okay so at unit intervals and we'll be computing the corresponding X values so that's how we go with these steps so if you look at these steps here and given the two end points p-one x 1 y 1 and p 2 x 2 y 2 as you know slope can be computed using this simple equation y2 minus y1 by x2 minus x1 which is nothing but the difference Delta Y by Delta X so any two consecutive points along the line also satisfy the same property that is the slope if you compute taking any two consecutive points on the line also gives us the same slope so if you look at this second step here for any two consecutive points along the line say XK YK and XK plus 1 YK plus 1 they are two consecutive points if you compute the slope that is take the Y difference and divided by the X difference and we get the dawai by delta x which is actually the same as del y by + del X so both actually are the same so here K takes integer values from 1 or 0 for the first point and increases by 1 unit okay so K will start with the first end point and keep moving till the other end point so here take these equations the previous equations you should remember so that we will be using them for calculating the steps to follow so assume that M is less than 1 less than or equal to 1 that is M is either positive or negative so as I said our aim is to compute next x value and next Y value so given the first end point we are starting with the first point which is a known point on the line and we will be actually computing the next x and y value or the next x and y value the next x and y value till we reach the other end point so we indicate the next x value notation XK plus 1 we indicate the next Y value with the notation y k plus 1 k plus 1 all in the suffix k plus 1 all in the suffix and in this case as we assumed that the slope is less than 1 we are actually sampling the line along x axis so as we understood earlier that for inclined lines which are more inclined towards x axis we are going to sample the line along x axis at unit steps that means every next x-value is exactly one unit at one unit distance from the previous x-value so the next x value that is XK plus 1 is nothing but previous x value plus 1 unit okay so but the next Y value is actually YK plus M how did we get this YK plus the next Y is nothing but previous Y value plus M units so how did we get this equation is you can look back in the previous slide what is that you can do is for next Y to compute next Y what is that we do is in this equation as we know that next x value is xk plus 1 as from this relation XK plus one is equal to XK plus one substitute in this equation for M XK plus one is equal to XK plus one so the denominator reminds that is XK plus one minus XK so XK XK gets nullified and you left ordered 1 in the denominator so Y M is equal to YK plus one minus YK so which is nothing but YK plus 1 is equal to YK plus M is what is this equation so that is how we get the second equation here so we call this one as the increment for X we call m as the increment for Y and these equations as you notice are recursive in nature that means every previous value is taken for computing the next value so unless we start with a known well-known point on the line we cannot compute the other points on the line so come to the case two where we assume that the line slopes are greater than 1 that means you recollect the line types 2 and 4 so they have slopes greater than 1 if M is positive what does that mean if M is positive is the line type 2 so for line type 2 here M is positive okay so what is that we can do is as because the lines are more inclined towards y axis we'll be sampling the line at unit y values along the y axis at unit y intervals so the next y value is 1 higher than the previous Y value so YK plus 1 is equal to YK plus 1 and substitute this relation this equation this value of YK plus 1 in this slope equation so replace this substitute for YK plus 1 YK plus 1 and the numerator then becomes 1 divided by XK plus 1 minus XK so we are interested to compute the value for XK plus 1 so XK plus 1 is equal to XK plus 1 by M this is how we get the next x value so for slopes greater than one the next x value is previous value plus the increment value is 1 by M for the next y value it is actually 1 higher than the previous Y value so in the case if M is negative so we have to check for all cases first given in line we should check for all possible cases M greater than 1 M less than 1 whether M is positive R M is negative accordingly we should be choosing the set of equations for computing the next x and y values so if M is negative you can come to this case if M is negative so what is that you can do is the next X value is actually X K minus 1 by M and the next Y value is y K minus 1 because you can now recollect the line type for line type for is actually a line whose slope is negative here X is increasing while Y is decreasing so here there's a there's a mistake in this equation so you can make it plus it is next X value is XK plus 1 by M but the next Y value is YK minus 1 because as you see here the line type for its x value is increasing while it's Y value is decreasing so Y is decreasing by 1 unit while X is increasing by 1 plus e M so u1 by M sorry it's 1 by M so you can take this equation here as XK plus 1 is equal to XK plus 1 by M so let us come to the third case so we have seen two cases here let us come to the third case if M is less than or equal to 1 that means again imagine the line stipes line types 1 & 3 and if starting and end points are reversed what would you do if starting point and end point are just the reversed just in the reverse manner that is both x and y are decreasing for line type 1 & 3 so line types 1 & 3 so that that is these equations will tell you so both x and y are decreasing so X is the freezing by a value 1 Y is decreasing by value e m oh that's how we take this and case for if mod M is greater than 1 and if starting and end points are reverse so what happens actually is imagine line type 2 & 4 so as you could imagine line type 2 and 4 whose slopes are greater than 1 now these equations say that the for M positive case both because the endpoints are reversed both x and y values forget just the they get the values get reduced by 1 by M for X K vote for X and 1 for the Y for m- in case if mod m is greater than 1 and M is negative so either X or Y will be decreasing one of them will be decreasing the other will be increasing so in this case you can consider this this to be negative so YK plus 1 is equal to YK minus 1 or one of these will be negative as I have represented here so you can correct this so one of these should be negative so this didi a line drawing procedure is actually as simple as given two endpoints and that is the first step is to get the input which is in the form of two endpoints so we started the first endpoint compute the slope and check if the slope is positive negative or its magnitude is less than 1 or greater than 1 in program are while you do your program do not actually check or take the division instead you can actually check m is equal to dy by DX is the standard equation than to take a division like dy by DX what you can do is you can check if d y less than DX r DX greater than dy accordingly you can check your slope ok so that means if dy less than D X so that means M is less than 1 ok that's how you can if d y greater than DX how M is greater than 1 so in that manner you can do your comparison then to actually take a division of dy by DX and then making it checking it for less than 1 or greater than 1 or equal to 1 and so on and so forth so while you do your program take that care because sometimes if you have to draw lines which are horizontal or vertical one of the dy and DX either of the dy are DX becomes zero so what actually happens is your denominator or numerator becomes zero so if the denominator happens to become zero that means if you have to draw a vertical line DX becomes zero and if you take dy by DX becomes infinite and your program hangs so what you do is than to take the division dy by DX better compare the values of dy and DX okay so the algorithm is summarized here as shown in the slide so input the endpoints so get the two endpoints compute the slope the second step depending on the magnitude of the slope and you we can decide which of the approaches procedures to adopt or which are the equations to actually adopt and the final step is to actually as we discussed just before that your monitor our monitor is something where there are only integer pixels or integer positions we cannot actually plot points which are decimals so we have to round it off while plotting for all our computations you can use floating point values but for while plotting we should round it off and plot so an example is given here given the two end points say 2 comma 2 and 10 comma 5 are the two end points given as soon as the end points are given to find the position find the intermediate points using DDA line-drawing procedure so as the first step immediately you can check the slope so if you notice that the slope is M is equal to 3 by 8 y2 minus y1 by x2 minus x1 it gives us 3 by 8 which is actually 0.375 which is less than 1 so the first observation is that M is less than one so and this is also positive so this indicates that we have to sample the line along x-axis at unit intervals so X increment is 1 and Y increment is M as you could remember from the previous equations as case 1 so M is less than 1 and M is also positive so these equations are to be used for computing the next point next points on the line so to start with X naught y naught so that is the starting point as we can give a notation X naught and y naught to indicate the starting point and which is also the known point on the line so the next point is actually as we know that X gets incremented by 1 unit what you can straightaway do is increment the x-coordinate by 1 unit 3 4 5 6 7 8 and the last point so that is we are given the points 2 2 and 10 5 so x coordinate varies from 2 to 10 while y coordinate varies from 2 to 5 so the x coordinate gets incremented by 1 unit so 3 4 5 6 7 8 9 and we have to compute the y coordinate using the equation y k plus M take the previous y-value add em to that and M is a fraction here which is 0.3 so that is 3 by 8 that is 0.375 so here the next y value is computed take the previous Y well that is the first y value is to add point 3 7 5 to it and where you get 2 point 3 7 5 so 2 point 3 7 5 is what is actually listed here in the table as you could see here and add 0.375 to 2 point 3 7 5 which is 2 point 7 5 0 so we can keep adding the previous to the previous Y value the M so that you can compute all the possible Y values but these points cannot be plotted on the monitor as we know that monitor has got only integer positions so three comma two point three point seven five cannot be plotted so what is the possibility so you need to round it off so three comma two only can be plotted so when you round it off to the nearest integer so you can use some round function okay and you can drown this value two point three seven five two two so 3 comma 2 is the point that we will be actually plotting similarly four comma three is the point that we will be actually plotting when you round off to point seven five it is three so similarly when you round off other Y coordinates we get five comma three six comma four seven comma four 8 comma four and nine comma five so for this line if this is the theoretical line that is actually getting plotted which cannot be actually plotted on the monitor this a DDL line gives us coordinates see there are 2 comma 2 is the first point and 3 comma 2 is the next point so 2 comma 2 3 comma 2 4 comma 3 5 comma 3 are the next two points so 4 comma 3 5 comma 3 are the next two points then 6 comma 4 7 comma 4 8 come for 3 consecutive points which are on a straight line which are like this and which are so this shape is actually called a stage step or Jaggi effect so if you observe this line on a low resolution monitor you would notice that the line is actually not not nicely smoother and inclined as a nice theoretical line it is actually like staircase steps it's like steps because two points consecutive points are along a line then two consecutive points are along the next line and three consecutive points along the way along a line and so on so this kind of points as we get because of the DDA procedure because of rounding it off is called a state step or Jaggi effect which we do not like our which is not appealing for a typical line so that's one drawback the second drawback is floating-point calculation so we are taking care of so much of floating point decimal floating point calculations and which also always are rounded off and for longer lines the DD line drifts away from the true line for the longest if you try to draw the longest possible line on the monitor say from the top left corner to the bottom right corner or you can try drawing from the left to the right incline lines you would notice that there is a drift from the theoretical line so that's how is about it is about the DDL line drawing procedure the most simplest procedure and in this what we have learnt is how to draw a line given two endpoints and how does the DDA line drawing procedure works and we have solved an example problem to understand what it does and we have also taken the node taken a note of the drawbacks of this procedure so let us conclude this session here thank you 
ocJ0zsj2CFc,27,"Learn about the Software Engineering, Computer Graphics, Machine Intelligence, and Security track at Purdue. Special thanks to our presenters Aswin Ramaswamy, Carl Landskron, Sruthi Pillai, and Yuhao Spollen.

Purdue Hackers socials:
FB: http://fb.com/purduehackers​
Instagram: @purduehackers
Slack: http://bit.ly/purduehackersslack​
Website: http://purduehackers.com​ 
Email: purduehackers@gmail.com",2021-02-12T04:07:06Z,Purdue Hackers Track Panel - Spring 2021,https://i.ytimg.com/vi/ocJ0zsj2CFc/hqdefault.jpg,Purdue Hackers,PT1H23M27S,false,17,0,0,0,0,all right so the first question is why did you pick this track right to start off hi guys i'm ashlyn ramswami i'm a junior in computer science and like you said my track is software engineering i'm from dubai in the united arab emirates well enough about me so going into software engineering why i picked this track um well i always liked the freedom and space for creative creativity that it offered growing up i always had a massive interest in just designing things and just creating whatever i liked i didn't like someone picking something for me and software engineering gave me that option i never really wanted to move into a track or major where my options would be either narrow or streamlined or limited per se and once i was in software engineering i liked how broad it was it didn't force me to move into one singular thing and later down in life i feel like there's a job opportunity waiting for me and a chance for me to work in almost any job sector like i said everyone's going to need a software engineer and it doesn't limit my options and whether i want to grow up and start working on either backend front end create designing ui or creating my own application or even if i want to work into graphic work on graphics algorithms databases anything i want to software engineering is the track that sets up the base for me and lets me move on to a broader variety of things if i want whatever i want to do and like i said everyone's going to need a software engineer whether it's medicine business most companies need one also obviously the big tech companies and it's a job it's a it's something that gives you that like i said everyone needs one and another thing i wanted to add was like i said job prospects and when it comes to software engineering um our options are limited and without sound wanting to sound shallow it's one of the um tracks where we can go into almost anything we need so that's it it's pretty much all right cool um so then the next question is uh what classes have you taken for this track and uh what are some projects or labs like and how much of a time commitment is this track so classes let's move on to cs307 which was my favorite class once i got into software engineering and cs307 is a project-based class in this class we didn't really have we had one midterm but it wasn't really that hard the main focus of the class was a semester-long project where you were put into a team of either four or five and for us we we worked on a social media website or an application and you really have the option to work on whatever you wanted there was a set of basic guidelines that everyone had to meet but as long as you met those guidelines you were free to do whatever you wanted with the app and one thing i really liked about this class is that i really walked in without much experience in backing or fronted design and i didn't really do that much of javascript and this really opened up that opportunity for me and throughout the semester we really got an idea of how it is working in an actual workplace so i had friends who had worked at amazon microsoft and me and myself i worked on a lot of fun and back and like just a little bit of front and back and stuff in my internships but i really wish i took this class earlier so because i feel like it would have helped me and um i know it pretty we have a lot of classes where they teach us stuff but this is the one class where i feel like we had all the options we had all the control and we could just like let our imaginations run free and do whatever we wanted with it and um projects like i said so this one class where projects did take most of the time all you did was work on the project because that's the only thing that really mattered in the class moving on i took cs 354 as well which was operating systems now that class was basically just moving into one of our professors douglas comer he he had created his own operating systems called z operating system called xenu just backwards unix and the whole point of it was to understand how the operating system worked so we'd work on things like cpu scheduling how the memory works inside it the clocks the io device management and so forth that class was i want to say obviously these classes change every year they're not going to be the exact same but when i took it i think we had yeah we had two exams and then we had five projects projects again like most cs courses are going to be the bulk of your grades and same thing goes for like just like it does with every other cor class just as long as you start the projects ahead you should be fine um if there are any sophomores in here uh i know you guys would be or would have taken cs252 uh the projects are easier than the class i'm just trying to use cs 252 as an example something to compare two so they're going to be at projects just as big but i feel like there's more help from the tas and the professor itself to work on it i feel like the handouts uh help explain what each thing does and also tell you what to do properly so that's one class that's those are the two classes that i took last semester and now i'm a second semester junior right now i'm taking cs408 and i'm taking cs422 pro 8 is software testing and the whole point of fit is just working with g unit and um it's just that's like a it's like a testing framework that we use to test code and to work with java so they'll come down they'll be easier they'll help with our code later down in life and 422 is just working with networks and security i wish i could say more about this classes but i'm still in them and i'm only three weeks in so that's all i have to say about the classes all right cool that was very informative all right next question so what was something that you wish you would have known before you entered the track and do you have any tips for succeeding um well like i said i really walked in without much experience in javascript or anything when it comes to working with back end and front end and i was really surprised because i was really used to most of the classes just being the professors explain something and then you have a project based on it and you have time to learn it but cs3 cs3 or seven was one of the classes where it didn't work that way the professor did teach and like all the stuff that she taught did come on the exams but the project was completely by yourself you just you were allowed to do whatever you wanted so uh me and my teammates like most of us didn't really have that much experience so we did spend like the first quarter of the whole project just trying to figure out what we're trying to do just watching youtube tutorials trying to understand all of that so i'm sure you can save a lot of time just by figuring out how just learning javascript figuring out how databases work like mongodb firebase mysql or anything like that it's watching a few tutorials i'm working with front-end backhand so that's something that i wish i knew before and i would really make the most out of 307 i know i keep coming back to three or seven again and again but that really is one of my favorite classes because it gives you the best idea of what it's going to be like when you once you graduate and once you actually get into the workforce it's going to be like that in my internships and when i've talked to my friends all their internships it works the same way you're working on a project you have other team members you don't have a you're not in a time crunch where you're like oh my god i have to submit something it's a deadline today so you see a series seven was more spread out you have deadlines where you have to like show certain progress but everything didn't bank on just like finishing it in one go so that's all i would say i'd make the most out of that class try to work on your own projects or anything like that from it all right cool uh now we have uh what opportunities did this track open for you um definitely projects so 354 was like i said it was more concentrated on z new which is the operating system of the professor created so there wasn't really something that i could work on off of it but i i hate that i keep coming back to three or seven but again three or seven is where we like i said we worked on a social media application and me for example i have all these ideas in my head but i really don't know how to start them i'm sure there's a lot of other people who have the same issue you have something you have we just don't know where to begin but 307 really helped me because i i for one have like a few ideas but i just don't know how to start it so once we figured out how to do stuff in 37 where you got um where the professor said hey go ahead and create a social media website we started doing it and now i know how to start i know what to do i know the first few steps that we all have to take like to create a website application anything and throughout the semester when i was like working on the project i kept jumping into ideas i'm like oh my god i can improve this like these might not be things that the professor needed us to do they weren't like required but me and my teammates kept thinking oh my god we can add this we can have that and right now i'm still working on that same project and trying to make it better and trying to add extra things to it so all we had to do was create a social media application but now i'm trying to add a gps service trying to implement somewhat of an uber style system into it blah blah blah so you have a good base and then it just gives you an idea how to like begin and like start a project that's what i'd say awesome yeah that sounds pretty cool all right um so now we have a question why should i enroll in this track this is this is more towards moving into my first dancer again um if you're like me and you enjoy the freedom and space for creativity that this track offers i think this would fit you perfectly if a lot of you are still undecided and you don't really want to just jump into a super specific track or super specific major where it's going to streamline your options i think software engineering is the best bet for you i'm not saying that other tracks you're going to like limit your options but this one is i feel like software engineer is one of the brightest ones that pretty has to offer you can really jump into anything you want like i said whether you want to jump into algorithms machine learning um working on front-end back-end just uh design anything in general software engineering gives you the best base i would say so that's pretty much it perfect all right and now we can open up to the audience so if anyone in the audience has any questions you can either type them in the chat or you can unmute and feel free to ask ashlyn have you taken any classes oh go ahead i'm sorry i was just going to say that you mentioned that you took it but you went to internship and like you had internship experience i was going to ask so what was a typical day like an internship and also what projects and other material did the classes that purdue helped with that makes sense so you want to know more about that so you just want to know more about what i did in my internship and more about the process yeah and operating you kind of helped out taking software engineering courses helped with the internship experience and stuff like that okay so jumping onto my internship so the internships that i had like the semester before i took all these classes i worked more with microsoft dynamics and uh crm so didn't really have to do much with software engineering or like backend and front-end stuff but the class that i'm taking um right now that software testing uh cs408 that would have really helped earlier because a lot of what i had to do was just test software what we had is basically it's a software that just helps clients put their quotes inventory and all that stuff into a database and i don't really have the best experience using any database software like mice like sql or anything like that and i had to learn all of that during the internship and i really wished i'd learned it learned it earlier so that's something that really helped from cs307 and i feel like all the software testing stuff that i'm going to learn now what i've helped earlier too now this isn't something what i'm about to say is something that i went through this isn't something in my internship but it's one of my friends but i'd talk to him about it but i feel like it'd be really helpful for me to let you guys know as well so he worked at amazon and all they did was um they worked on a lot of aws stuff and working on front end and back end and he actually worked on it right after his freshman year yeah he jumped into a software engineering internship right after that and he had no idea like what what to do he had never worked any of the stuff before and he said that a lot of people that he worked with were all like juniors and seniors and they needed way more back in front and stuff than he did and he had to like spend a lot of time just figuring stuff out but yeah i've like i said i keep jumping out of this but cs3 or seven is really really important in class and later down once you're a senior i feel like cs i think cs 407 that's what it's called that's the senior design project it's going to be similar to cs307 but i feel like the project is going to be a little bit more complicated they're going to need you to do way more stuff now going back to other projects um whenever i work how they help me when it comes to internships um when we go to like interviews and stuff like that all the classes that i've taken whether it's working with trees daily like linked lists or anything like that and especially the os one that i just took cs354 a lot of the questions were based on that even though you might not be working with any of that stuff in the internship those are like pretty basic stuff that most um companies expect you to know so those projects just understanding how this project works uh projects work working with them gives you a good idea of like all the basics and all these internships and companies really expect you to know that so just having a good understanding will really help you with interviews even if it has nothing to do with the job they actually end up making you do at the internships did you ever work for like did you ever work for like um implementing the software into like hardware never did that yet could you repeat that i'm sorry i couldn't hear you so have you ever tried to like implement the software into like a hardware device so you've met that uh or that track doesn't cover that i personally have never worked with anything hardware um in my internships we did take a class cs250 which was computer architecture where we had we're where we had to work with breadboards and assembly language that's the most i've done when it comes to hardware um growing up i was really never a big fan of like working with hardware and um most of the times even internship opportunities that really don't like go towards anything hardware related so i don't think i'd be the best person to ask that question but yeah i've never done that i've never done i was just asking and i was just asking if the track if software engineering if a part of special engineering is implementing the software that you create into hardware that's what i'm just asking okay implement the software degree into hardware i mean so far no nothing's been specific to software into hardware that i've taken so far uh the only thing um the most i've done worked with anything is just assembly language that we use for cs354 but i haven't worked with any other kind of hardware and i don't i don't think he'll get the software engineers more just towards the software side okay that's pretty much it okay um were there any classes that you even like know of that may have been like more or less helpful where you'd recommend someone to definitely take it i know you mentioned 307 or like classes that people took maybe someone that you know also where you would recommend not to take it um i don't really have any classes that i would recommend someone not to take because that again depends on someone's preference if you want to take it you can take it there's obviously a few core classes that you have to take to meet your software engineering uh requirement so like i said cs307 is one class that you have to take and i would 100 recommend you take that and i'm sure cs4 7 is going to really help so like i said like you asked is there anyone else that i know who took it um one of my friends is a senior right now and he took cs407 which is um software engineering two it's basically the second part of three or seven um and when he worked on them what they had is they had to work on a project that microsoft had actually given them so uh purdue has ice with like different companies and this changes from semester to semester it's not going to be the same when i take it and it's probably not going to be the same when you guys take it there's no guarantee but when he took it microsoft was the one who sponsored purdue and helped the students take it what they had to do was microsoft was working on minecraft's database and graphics and they just put up into groups in microsoft they had someone from microsoft working instead of us having tas we had to help someone help us from microsoft straight from microsoft so uh what my friend worked on is microsoft's like data like how they like try to change how they save uh just random stuff and try to work on their databases and what they all said is that it really helped them understand again what it's like to work in an actual workspace and it also increased ties with like just companies you talk to a recruiter you talk to people working in microsoft you open up research opportunities working with your professor so i'm sure 407 is going to be an interesting class too cool that sounds good all right um unfortunately that's all the time that we have for ashton's presentation um but uh ashton if you want to stick around you can uh you have some questions in the chat um and you can go ahead and answer those if you want um but yes we will now be moving on to our next presenter uh thank you very much for uh presenting yeah definitely very informative no problem if you you want me to answer the questions on the chat just on the chat itself or uh yeah you can go ahead and answer the questions in the actual chat itself okay all right cool now we have our next presenter uh carl landscron again if i mispronounce that i'm you're one of the few people who got it right so i'm impressed cool all right awesome so my name is yeah now i was just gonna say you can go ahead and introduce yourself awesome yeah cool so my name is carl landscape uh i am a double major here uh who's currently is in my last semester at purdue uh fingers crossed we get into grad school here soon uh but no guarantees so why did i pick this track uh for when it comes to computer graphics and visualization people sometimes ask me uh why did i pick it and it's one of those things that i tell them every time when i was going into uh purdue and then going and looking at my tracks i knew from the very beginning 100 that i wanted to go into machine learning and it turns out that um the interests and goals i had in line actually switched me over to computer graphics so i'm someone who switched uh halfway through uh and that's something i should let you guys know ahead of time too uh is if you ever feel stuck in a track um try and get some of the core courses that are relevant to the track done early so that you guys get the chance to switch if you if you find out that that's not your area and that's what happened to me i found out that you know what i really love computer graphics now why did i fall in love with computer graphics and it really comes down to i think the root of why i love cs and really why a lot of people love cs which is in essence what's amazing about it is the fact that you get to create these wondrous worlds you get to use code to build um interesting programs or environments or applications that when people look at it they're like wow that's that's amazing that's really cool how'd you make that but you didn't need anything more than just a computer to build that and that's one of the things that i really love about computer graphics is the fast fact that you're developing these really amazing worlds within your projects uh it's anywhere from understanding you know the physics behind how does light hit objects versus how do we make sure to optimize something to in order to create creative realization faster um a couple other things that are really interesting um that i love about computer graphics stuff is the fact that it gave me the ability to dive a little bit more into my creative side which is something that i think sometimes sometimes something we don't get as much there are some of us that came into computer graphics because we love to be creative and sometimes it feels like it's this very rigid set of you have to do these specific types of projects you have to do things very specific types of way follow this almost step-by-step instructions and computer graphics is very different than that overall alrighty cool um now moving on to question two um what classes have you taken for this track what are the projects and labs like and how much of a time commitment is this track yeah so i have taken both uh cs334 and cs433 which are the two main computer graphics courses that we have for um or here at purdue um the great thing about the computer graphics track is again it's a track that allows you to do a lot of different um courses over the entirety of the track and so you're not only doing computer graphics um so i want to focus so mainly on those computer graphics course when i talk about this um so within the cs334 which is the fundamentals to computer graphics course we were spending a lot of time uh kind of getting a basics for a basis for what computer graphics really is this is an area that you guys really won't be exposed to in this uh in your um like first two years of computer science here at purdue uh computer graphics involves a combination of understanding uh the almost the ways that we see things so colorometry understanding you know what how people see colors understanding the mathematics behind how we kind of visualize some sort of object and then kind of how do you optimize those things there's a lot of things that go into understanding how do we see things uh or show things on the computer in a more realistic way in a way that's going to be conducive to speeding up these uh software and hardware that we have the other great thing about it is that you start diving you get to dive into the gpu which is something we don't get to touch a whole lot in any of the other fields um but it's understanding a special like hardware area that has been specialized for essentially our track area um other things you're going to go into is some fun mathematics for things like bezier curves or understanding um traveling lines um how do you show certain functions on the screen how do you best model characters how do you find where visualizations are happening uh for example i'm right here if i'm staring at the screen and trying to look at a visualization um i basically have to know for all the objects in my screen how do um or which of those objects going to end up showing up on the screen um a really fun fact we actually just learned in my 434 class um for computer games uh and really any sort of visualization um if there's ever an object in a game uh like let's say the leaf on a tree where there's gonna be thousands of them it turns out that actually the human eye can't detect more than seven of different combinations and so most computer games uh or visualizations will only have seven of an object so seven leads and it'll just change the direction another fun thing is if there's a force of trees it's very possible that all of those trees are the exact same tree just rotated because your eye can't uh establish that but why do we care about having seven leaves as opposed to thousands well some of you might have taken um some of like cs251 or 250 and know about cash memory this idea that um if uh if you use something often it stays at the top of cash and which fast to like access uh essentially if you use only seven objects they always stay in your cash and they're really easy to quickly grab and visualize um it's things like that that i think is really cool that blends kind of more the artistic and creative side with this really analytical computer science side that i really enjoy nice sounds uh pretty interesting i did not know about the seven leave things all right question three uh what are some things you wish you uh would have known before entering this track and do you have any tips um honestly the worst thing is i wish i would have known that my uh blue light reducer program on my computer was going to screw me on every single programming assignment um uh no but um beyond that um i think one of the big things to realize when going into um this track is that the core classes for this track are very very independent courses um we typically have a lot less or the two the two horses i took and see in like cgt stuff uh were a lot more focused on you creating the projects um yourselves um as opposed to having a tab there specifically to answer questions uh what did this mean well this meant two things one of the things was that you did have to do a little bit more learning on your own but two it often meant that the projects were a lot looser in their requirements so many of the projects i've had here at cs are very strict and stringent about doing this this this let's do this okay and the cgt courses the project requirements actually i'll just pull it up right now uh you don't need to share this but for example my lab one okay that i have six requirements okay um i need to set a randomly positioned windmills with moving helixes i need to move using arrow keys i need to be able to do something when i press the spacebar um and essentially there's just this this list of things that you have to get to and accomplish but you don't necessarily have to be told exactly step by step how to do it and i think that emulates kind of the real world in a more realistic way when we create things we're going to create things in such a way that um people aren't going to tell us how to make them and so you have to kind of figure out how to do that stuff for yourself i think that's a really important part of this track all right fun uh moving on to question four so what opportunities did the track open for you oh gosh um so this track one of the great things about this track i'll say this if i'm wrong i don't think i'm wrong but i'll say it um the biggest thing i think this track really opened up for me was research if you are interested in research at purdue there is a full computer graphics uh lab that is run by uh professor oliaga and it is one it is your best chance at doing computer science research here at purdue um it's open for me a lot of opportunities for example the project the research project i'm working on uh which is called image swapping it's a advanced color quantization problem uh which is actually fairly simple to explain given two images image a and image b how do i best recreate image b by only rearranging the pixels in image a i'll let you think about that for a moment um and it's a really interesting problem um but i'd say that that's one of the big opportunities that this has opened up for me um besides the the fact that you you have a you have more of an opportunity to go into companies like nvidia or pixar or disney um in those specialized areas i'm i want to tell you this honestly none of my other courses have gone anywhere close to preparing me for the types of things that are going to go into doing jobs like that you know and i want to be someone who you know works and becomes and tries to create new ways to visualize the dream that goes through how to gain your dragon 4 or whatever movie they're on you know i want to be able to create the millions of tiny pieces that are going to make up big hero 6. please pixar get us that movie um or being serious too i don't know how they'll name it um i i want to do those things and so if i want to do if you're one of those people who's really interested in that i think you really need to make sure you're getting into those courses because you're not going to get that generalized education from other areas um yeah those are i think the two big opportunities i'm current currently going to grad school myself um oh i'll add this last last minute opportunity to we're the only major that your projects can be entered into art shows i just got into one of those two days ago so very excited about that all right next question yeah well first off congratulations about the art show thank you but yeah the the next question is why should i enroll in this track i don't know rowan why should you enroll in this track um i would say the biggest thing uh if you're interested in in just creating really awesome worlds um uh if you're interested in you know visualizing really um interesting your subjects matters um my favorite reason we have the we also have the best bugs of all the tracks um because well most other tracks their bugs are like seg faults or like um you know some sort of array out of bounds error our bugs normally end up being like balls flying across the screen in crazy ways and stretching and morphing human faces things that physically make you laugh out loud when you're programming it's like 8 o'clock at night and your mind's exploding because you haven't been you've like holding all night of the day before and you do something it's wrong you just laugh you laugh you laugh then they look at you weird but don't worry about that part um ultimately though i think this is a track for people who are uh interested in the subject but also interested in just making cool projects um finally they're okay we do have some site faults i'm sorry um uh and then i guess the final pitch for it is uh this is the one track that you can take it home and show your grandma and your grandma's like oh that's cool other than what what's that so questions now i think yeah so so now we'll open it up to the audience if anyone has any questions again you can either unmute or just type in the chat um you mentioned that you were taking a couple of cgt classes did you choose to take those like as electives are they part of the track and like um i myself was like debating whether i should go into the graphics track later or switch totally into cgt so like do you would you happen to know like what the major differences are yeah so um i took a couple cdt courses um well the cgt course that i took that actually uh led me to wanting to apply to grad school in cgt the poet tech institute as opposed to computer science um was a grad course uh 581 experimental animation and i would say the biggest difference um i think the the big the biggest difference that you're going to get with going into specifically cbt as opposed to the computer graphics track is computer the computer graphics track is still has a majority of its courses spread out across a lot of different areas and so while i talk specifically about two major courses um we still have um four other electives that we have to fulfill for the track and a lot of those tracks if you're doing two tracks can count as double but those would be things like uh numerical methods or compilers or operating systems or um or like uh numerical methods intro to ai so i think the biggest thing for you to understand would be that um staying in cs is going to get you more of that breath across things but i don't know if that's what you want and so i think your best bet is to actually contact some faculty over at cec i very much love the the faculty and would be happy to pass along an email in the chat after that's kind of over um and you can get a chance to talk with them and discuss you know maybe what's the right pathway for you based on your course other questions um so like quick one uh you mentioned at the start that you are like you know when you came and you wanted to go into machine intelligence but then like this trance the shift happened within you like so what do you call this kind of like you know change for the speak i don't know um part of it was stats and wasn't a big fan of stats um part of it was also the fact that um i guess the the the stuff that i really want machine intelligence was just kind of something that um i realized that i was kind of interested in a little bit but i wasn't interested so much as in the deep dive in it as i was with computer graphics um one of the things that i love to do is show the beauty of mathematics people so i love being able to visualize things and show them specifically to people whether that be artwork or that be uh creating some sort of um visualization for robot motion profiling um for a robotics team that i mentor um i think that's kind of the biggest thing is that the the projects were a little bit more uh hands-on straightforward and i felt like i was kind of feeling fulfilling the original reason i went into computer science which was to create things it makes sense thanks okay i think we got time for one or two requests one three more minutes worth of questions all right well i have a question for you questions of your favorite project that you have created in this track so far oh um favorite project probably would have been the roller coaster of doom at the very end uh we had to use bezier curves uh and general like modeling techniques in opengl to create essentially a a roller coaster um that would actually follow the laws of physics uh in the sense that as you went down the roller coaster you sped up and as you started getting to the top you slowed down and it was just a really intriguing project to do because it it kind of culminated the entire uh course together i really i've had some classes that have had like big giant projects but none that encompasses the whole horse so well so that's something that i really really enjoyed right at the end fun and uh which class was that in or did you do that oh that was in a cs334 i'm currently in cs433 or 434 which is advanced computer graphics which by the way if you guys like personalized attention there's currently 10 kids in that course uh so the professor already knows everyone by name and it's great um it's a lot of fun i enjoy it any last minute questions last second question one last second question have you had any like internships or anything like i know this is weird but my advisor told me that graphics is like the most difficult one to have people like get internships before they graduate yeah so i've had internships but i haven't done specific internships within graphics um mainly because i've been uh i i guess the best way i'd put it is this is that you can still you still can get internships it's just harder to get specifically graphic internships now i believe the research facility also takes um interns as well um but i think i would agree it is a harder try to get internships specifically in that track uh this last summer or two years ago i worked for subaru uh for two years in a row and then this last year i worked for a local startup company right fit analytics doing data analysis in how we um how you best match surgeons with patients uh which ironically is machine learning so um yeah so it is one of the harder ones but it doesn't limit your option of getting internships it's just the ones specifically with those companies all righty well uh uh that's all the time that we have for carl's presentation but thank you so much for uh presenting and talking about thank you very much visualization um if anyone else has any other questions feel free to drop them in the chat and uh carl can respond to them in in the chat as well and we will be moving on so uh now we have uh our presence uh presenter on machine intelligence so uh shruthi why don't you go ahead and introduce yourself okay hi i'm shooty i'm a senior in computer science obviously and i'm my concentrations machine intelligence so uh why did i pick this track when i was coming in i wasn't really bothered i wasn't very bothered about what track i was gonna get because i always hear like people talking about like oh i'm doing two tracks i'm doing these three tracks and i was like oh i really don't know what i want to do so i wasn't i was just like freshman year sophomore year i was just like debating between machine intelligence databases and software engineering but then like i just realized um i took a different approach where i looked at the classes that i wanted to take and then decided my track based on that instead of deciding like oh i want to take this track and i'm going to finish these courses because in the end like what matters is the classes you take because that's where you're actually learning the stuff like just the names not enough so then um when i was looking at it i was really interested by the machine intelligence classes like specifically like web info search and management and just the 373 which is just the data science would do the basics of data machine learning i want to take those two classes and then i wanted to take like 381 which is algorithms and then 354 which is operating systems and those two kind of work as like a core course or electives for almost everything so that wasn't limiting me in terms of choosing a track so with that in mind and with wanting to take 373 and 473 machine intelligence was the best option for me so i decided to just go pursue that and why i didn't pick software engineering was this is just a personal opinion for me i felt like software engineering classes are predominantly what 307 and 407 which is like design projects and like testing which i felt like i would gain a lot of that experience while doing my internship experiences because that's what you're mainly working on like your own projects or projects with teams so i do think taking those classes would have helped me prepare better for those experiences but i still feel like i did learn a lot of it on the way so it would have been like a little redundant and i felt like i would have learned more by taking like more machine intelligence classes so that's basically why i picked this tract yeah all right cool that's very interesting reason certainly it has confused me a little bit as to what i want to do but all right next question so uh you kind of touched upon this but what classes have you uh taken for this track and what are the projects flash labs like and how much of a commitment this is trapped so yeah that was saying for this track um the core courses are pretty much they might satisfy for all the other courses too like three do you want to think is like a base for almost everything if i'm not wrong um and then i took um operating systems and elective i took 348 which is databases as an elective and then i took 373 which i told you which is the data machine learning class which is like the first class you'll take probably and then um i took 473 which is web info and search management and then you take um like a math class which is just 416 which is just probability if you're taking stat 350 which is like one of the college computer science requirements it's basically that and it's it's just you don't do you don't use ours just basically you just do probability and stats it's not it's it's pretty much the same material just in a different format and it took that and that's that those are pretty much my requirements for the track in terms of projects and labs it's mainly um for 373 it was started with like theoretical homeworks and then we would go on to projects where we'd build models like k-means name-based classifiers decision trees all that good stuff but then like you know how python has libraries but you can do it in like two minutes for you you just have to make everything from scratch and that's basically what the class is you learn how to make all those classifiers from scratch so you actually understand how it all works and then um um 473 which is other machine learning main class it was mainly theoretical because it's all theoretical and we had probably homeworks that were like one week long or two weeks long and then we had just a couple of projects which just were just to like just test whatever you've learned which are pretty simple like he'd give us two weeks to do it but you honestly didn't need two weeks and i genuinely like i genuinely felt like the workload got a lit a lot lighter for me after sophomore year like after 250 to 51 52 i felt like everything got lighter 381 is a lot of work because specifically because you don't want to just bs that class you want to actually learn everything you're taking because it's going to be so crucial when you take it especially with interviewing and um yeah so how much commitment the track i honestly don't think it's that high of a commitment i think something like software engineering would be more because you actually have group projects outside of work and it's like probably a semester-long project where you need to meet up with the group and actually work on it but um since this is just like you just do the projects and then the labs on your own it's really it's not too much time commitment i would say it's pretty minimal all right fun uh moving on to question three what was uh something that you wish you had known before entering the track and you have any tips for success in this track before entering the tag this is just something which probably i just didn't do much research getting into it but then um i only realized that you can double major in like data science is pretty new especially i'm a senior so it only i think it only started when i was a sophomore or something and then you could double major in data science in cs which is something i wish i knew earlier because a lot of the requirements do overlap and i feel like with machine intelligence especially because they're doing what data scientists data machine learning and then more statistics and probability added onto it so with this machine learning track if i added just a couple more courses i could have got like a double major which would have been nice as i'm interested in data science as well but that's just because i didn't know before going in because i didn't do much research but now i feel like it's a lot more um like did you talk about a lot more so that's something you're interested in you can look into it as well but you also might feel like it's redundant because you are learning a lot of the same material so it might not be for you um any tips for succeeding i think just just enjoy the material like don't take it like i think when i started like 473 is one of my favorite classes and um just enjoy the material you're learning because it's super interesting don't take it as like um oh my god this is coursework i have to learn it i have to like do this in the exam like there's a lot of fun stuff you're learning just like make sure and that you um really enjoy what you're doing and in terms of succeeding i think any track you take you're not limited by whatever you're taking so don't worry about that just take whatever you're interested in and then just just go from there don't think like it's a barrier like oh if i'm doing just machine intelligence so i can't go into like graphics or i can't go into um algorithms or whatever what else is there or databases it's just a way of honing in on your interests and you can always pick more pick more than one track as well if that's what you're interested in but yeah just don't take all this track stuff like okay this is the end game and this is what i'm getting into and that's it yeah all right cool uh so question four so what opportunities did this track open for you um this track specifically i think just taking all these courses if i was working like for when i was interning at my company i didn't i was still a software engineer intern but it didn't allow me to go work or work or like talk to my manager about looking at other features that did incorporate machine intelligence for example there was one feature that the company was working on that was pretty new where they were incorporating a lot of machine learning which is something they haven't done before they were just like getting into that field and then i talked to my manager if i could just like go look into it and just succeed what they're doing because i don't have time to actually i don't have time to like pick up something else and he's like oh yeah like you're interested like i know you've done all this so it should be pretty easy for you to grasp what's going on so i was able to do that you can still do that without a machine learning track if you're super interested in but that just like gave me kind of like show him like oh i'm interested like i know the basics and stuff and um i didn't take advantage of this but like carl said there's so much research available you can definitely get into research in ml as well um like one of my roommates using machine learning and she's also doing a cycle psych minor so she got into research at purdue which incorporates both of them which is super cool there's a lot of opportunities out there you just have to go and get it um but yeah but one thing remember as i was saying like just because you're doing machine intelligence doesn't mean you're going to become like a machine intelligence scientist or you have to go into research or you have to do something within like i'm still going to become a software engineer once i graduate i'm still working on like i'm still going to do full-stack development but it's just something if you want to go into it you can go into it like it just doesn't limit you like i just want to keep insisting on that all right nice um so now uh our uh final question from our side is why should i enroll in this track i would say just enroll in it if you're interested in the classes like i'm not here to sell you on like okay go machine intelligence it's the future like you have to go into it you're just like or you're like you should i'm just saying just look at what the classes you want to take and honestly do what you want to do like don't take a track just because someone said like oh i took this track and like um i got this job or like don't just follow like what you want to do because in the end like if you're if you're concerned about like what employers are seeing they just care about your core courses to be honest if you're going into like software engineering which is what a lot of people do go into but if you're doing more something more specialized like if you want to get into a lot like like harvesting graphics it's like it's harder to get stuff that's very specific to that then i would say make sure your tracks that do take courses for that so you can get into that because that'll be a lot easier to get into if you have like relevant material to show your like employer recruiter and especially since you'll do a lot of projects in that field but um yeah just just keep that in mind and um make sure you just take whatever track you want don't get swayed by what everyone else is doing and don't get swayed by like i have to do with three tracks i have to do two checks numbers don't matter you're all getting a computer science major in the end just do what interests you all right sounds good uh now moving on to questions from the audience if anyone has any questions again you can unuse or just type them in the chat 373 yeah so 373 was pretty much the intro to like machine learning and all that stuff one thing which i didn't mention is you will be using python for all these courses but they're not going to teach you python and then but at that point you'll already know java and c and i think at that point python is super intuitive you honestly you once you start doing it it's a lot easier than other two you don't need to like put in that much time but that is something to keep in mind um they're not gonna like teach you like python for the first week and then say oh you have to do this project they're just gonna give you the project and say okay you're gonna do this in python and then you're gonna be like oh okay i'm gonna just go brush up on everything and do it but 373 was basically introducing us to all the different models there are like if you probably heard like naive bayes like all the decision trees all that good stuff and you just made sure you just like made those classifiers from scratch using python and it was very very project-based i would say throughout the end we had i think is one midterm and one final which was um theoretical again but um yeah i was just building classifiers like you'd be annoyed at some point you're just like i can do this in like two minutes just using like libraries like why am i using python to just do this but you do learn a lot you do learn like most of it is basically getting stuff to run within like a within like at least under like five minutes because when i started with the class my first project like i'm trying to run a base classifier would take two hours to run something because you get such huge data sets and i think that's when you actually learn how to optimize and how important it is to optimize it to something really important to learn but yeah that's basically what you do in 373 do you use any languages um no we just use python um we did use yeah it's pretty much python first yeah for machine intelligence for 471 we had to do i think quality for god but it was last semester we had to do some galago stuff which is just basically it was more about um but then we we'd use java a little bit but you could have used at that point you can pick what language you want to do with the stuff you have because they give you a lot more freedom when you go to higher classes but i ended up using python anyway because it's it's much more intuitive to do those tasks but yeah and here's a project based it's pretty much all python there's not much stuff um i haven't worked with image recognition um in my track that's something you can definitely do like as a side project but specifically with what we have given in our coursework no that's not something we do we do learn about it but um no would you say it's a more theoretical track than something like sweet um yes it definitely is more theoretical than software engineering um like the only the main project based class is 373 where you're learning the models but like everything else is more theoretical where it's like how it's applied and like all the drawbacks and like the way it's done and you just kind of learn it and like understand it and you're able to like answer like like situational questions uh so you had mentioned something about uh like getting a double major with data science and cs and also simultaneously uh like completing the machine intelligence track so just to confirm what you said you if you had taken if you had like known about this before you could have just taken a couple extra classes and then done all yeah because yeah because data science yeah their core courses are basically cs core courses and that's when when we start picking architects is when they start like going into like separate courses as well but if you take machine intelligence you do complete a lot of the requirements that do apply for data science so that would have like knocked out some stuff and if you just took a little more data science classes which is more like python based or more like statistical analysis and stuff then you could have just added on another major oh what was your process for applying for internships or part-time jobs this is the same for all uh all tracks um mainly just career fairs is where i got both of my internships the first one i got the industrial round table second one i got to the cs career fair it's very good cs career fair is my favorite resource because they eliminated us cs students i think yes also at cs students um it is a lot better when it is in person i have to admit but they're still freaking it out and i'm sure it'll get better but just tips is just make sure you're lead coding it's so important like it's something you need like it's something you need to do to at least get your like foot into the door like it's not fun or i wouldn't say some people find it finally they do at least coding competitions and stuff but no that's not for me but um just make sure you're practicing don't start cramming like 500 lead code questions like before like like two weeks before your interview or like one day before you interview with something i'm guilty of doing like my first time take it easy just keep doing it so you get into practice um cracking the coding interviews like another resource we all talk about it's like a book like the first holy grail book for cs students who are trying to interview um just make sure you're going for a company whose culture you really like because like obviously when you're first interviewing yeah just interview everywhere just get a job yes your first internship try to get that done but then after a while like they say culture is important and i think that's so important because it's easy like when you work for a company you want to actually like what you're doing because that's when you like like the work you're doing and like the people you're working with and like what they stand for and that's something to keep in mind when you're um interviewing as well is the usual pathway for ml is to go into research or even grad school um a lot of likes a lot of people i know who do ml they've pretty much gone into industry and just become like software engineers or software engineers who also work with machine learning but then another like another i know people have also gone into grad school and then they have done more research and i know people i know someone who who went into twitter and was doing ml research and stuff as well so there's no i think with ml it pretty much goes through like always like there's no i don't think there's like a usual thing which everyone does but um yeah that's again i'm saying don't limit yourself there's no like strict pathway just whatever you're interested in all right any last minute questions for trippy all right i think that's it then all right well thank you so much for talking about machine intelligence all the stuff that you said i think i forget who said it in the chat but it was all very very useful um so yeah thank you so much um and yeah now we will move on to our next presenter uh you how hello everyone this is yuhao i'm a senior at purdue um currently taking security and machine learning tracks but today i'll be representing security uh should i just go on yeah so yeah first question why did you pick this track all right sure so let's get started so i picked um this track because um i was actually really in between security and um and software engineering i knew that i would want i want like so everyone takes either two or three almost everyone like most people do two or three tracks and i was basically choosing from software engineering security and then machine learning i know that software engineering security have made a pretty good combination but i also didn't want to have machine learning left out so i eventually i decided to go into security and machine learning and also pick up a lot of um a lot of pick up several classes from software engineering to so so you can make up for the classes that i missed from software engineering track even though i'm not actually participating in the track so i'll go into the details of um like so we machine learning and security and machine learning itself doesn't really have that many classes overlapped with uh security or software software engineering but there is a lot of overlapped classes between security and software engineering and that kind of makes sense so i will kind of go into um like what classes what you should what software engineering track covers and what classes security covers and um i can work out a like a good combination of how i did it basically um in software engineering there's 307 which is software engineering um ashwin talked about that earlier where you basically learn a little bit the professor the professor gives you some um theoretical knowledge and then i think they spend the second half the semester working on the project um there's also 350 and then you also pick 352 or 354. 352 is compilers and 354's operating systems um that 354 class the operating system class is also a requirement for security so that's one overlapped class one overlapped course between the two tracks and then um i since you had to pick 352 or 354 i didn't really um i never really took i never took 352 even though i was uh i could have but that would have made the semester harder but i i believe um yeah moving on so next next course that's required by software engineering is 408 which is software testing and that is not required by security track but i picked that class up this semester so i'm i don't need that class to graduate but i picked it up anyway just so i can um just because i think it's a pretty important class to take before you graduate and head into the real world because after i graduate i'm going to software engineering job so software testing is a pretty important skill to have for anyone working in software i believe and then the last requirement for software engineering is 407 which is a senior project to make up for that class that we didn't take i did ethics um in junior year to i mean junior year and last semester so that i could gain the practical skills practical experience working a group on a group project to make up for that because 407 seen working on a senior project is what it's about it's about working with a group of people and um getting that practical experience so instead of taking that class which probably takes a little more time for you i did epics instead which is a one credit class and takes less time out of your semester so now to talk about the required classes for security um secure security has 354 operating system and i can go into details for assignments in that so that's one overlapped course for um that software engineering also has and then 355 which is cryptography which goes into the math and theory behind a lot of like how how encryption works basically and then the last requirement is 426 which is uh computer security and that is the class that um i believe is the most important class in security that makes what security track um like that that's the most essential course in the security track um so so now you learn basically um you probably understand why i picked my combination uh machine learning and security tracks and then basically i picked up 408 which is a class from software engineering software testing picked up i believe that that would be the most perfect combination to basically pick up most as much knowledge as you can before you graduate so that's why i picked uh security sorry that went a little bit long but no worries all right moving into question two which you kind of covered um but what classes have you taken for this uh track or i suppose tracks and what are the projects and labs like and how much of a commitment was this yeah so i'll quickly go over those um they're so in this security track i mentioned earlier there are three required classes and then you pick to pick up three electives so first i'll go into the um the first required class which is 354 operating system and that's also in software engineering um track so they have um asheville had uh had mentioned earlier it's a it's a class where you basically work with xenu which is a an an operating system made actually by a professor here at purdue doc professor comer so he um you are given a skeleton operating system with a lot of missing functionalities and what you do is um what every lab is basically adding a bit of functionality to that skeleton code and from there you build your own um your own operating system so originally originally you just given as really simple skeleton code and the skeleton operating system doesn't really do much like for example if you're if your computer is given uh if your computer needs to run two tasks at the same time um it needs to figure out you know how much cpu time to give to each um each program so that the two so that the computer doesn't get doesn't use too much computational power for one program and like neglect the other so in the skeleton code um the operating system doesn't do that well you and that's where you come in where the lab first lab comes in where you um basically add that functionality to it so that it can take care of both programs at the same time so that's just one one example of this the assignments you would do i would say that for that class uh it's a bit of a commitment um you would definitely find yourself spending a lot of time in labs especially working with other people because most people do struggle and they have you have to struggle your way through through through any coding assignment really you just have to spend time there until you get it working it's like i would say the experience itself is very much like 252. i'm sure most of you have probably taken that um but you can expect maybe i don't know if you your your assignment you have five laps total for my semester at least you could expect more um but usually each lab is you're probably given a we're going to have to two weeks to finish that um moving on to the next one the fourth 426 class which is basically the class that covers um everything theoretical about computer security that you need to know before you graduate like that that's like the stuff that you have to know if you have to if you want to know about security um i think like topics include different types of attacks that the adversary could perform on your side on your program or on your company in the future um like for example the coolest one is um denial service which is basically the adversary um sending a lot of requests to your server so that eventually your servers is so overwhelmed by the number of requests it stops working and that's how the hacker or the adversary you know attacks your system so in that class you'll be basically learning a lot of different attacks and you know how to how to prevent them how to um you know spot them and how what to do to fix them um you also learn about encryption of course how encryption works like for example what do you do when you when you make a website and the user has to um the user of course when they make an account you have to have your username and your password and one thing you one thing you you learn from this class is that um whenever you store people's passwords in the database you don't you never store the password raw you always add something called assault to your password to the raw password that the user puts in and then you use a hash function apply it to that to that altered raw password and then you get a random you know sequence of letters and numbers and that is what you put into the system and eventually if you want to check if um if like if the user later logs in and needs to log in and put in putting his password what your assistant what your server will do is take the password and put that software it was inserted into the password and it uses a hash function to compute the hash value of the password and then compares it to the password in this in your database so instead of storing the password that is the correct way and it also digs into you know how um just basically different hash functions and all that um so work in terms of work amounts you um we had five assignments three of them were like um questions and answers short answers questions and two of them were coding assignments and um for the theory assignments it's pretty much um you're just basically answering questions short answers based on the slides and material you learn from class and for the two coney assignments you're actually given given code and you're modifying the code so that you're actually uh performing your own hacks so for example one uh one of the one of the two assignments we had to do was basically um taking uh so you start one terminal and you start typing that terminal and in the other one you will write a program so that it can actually uh listen to it can actually listen to what the other terminals typing in so you can see every letter popping up as the other terminals type typing so um that was a really cool project that we worked on and uh moving on to 355 well we're running out of time 350 i'm running out of uh going on to 355. it's crypto this is a very theoretical class um it basically is the math behind a lot of the encryption schemes and that was um not too overwhelming um like about um about a week or a week or so time for each assignment um definitely was not that stressful but uh definitely still cool to know especially when you like math uh there's a lot of proofs in that class and then for the three levels i did um through for 348 which is uh info system and that's basically the data database class uh pretty important to know but i believe you can also choose that for um you know as an elective for other tracks also and 381 uh previous mentioned i don't might probably don't need to go over that again but it's a really important question to take especially when you're looking for a job so like that class will help you with the interviews a lot and 448 which is like an advanced uh database class and that i'm taking right now and so far there's a lot of homework pretty frequent but still manageable for sure next question all righty cool so question three what is something that you wish you had known before entering the track and do you have any tips for succeeding okay yeah so i thought about this client i thought about this question for a long time and actually couldn't really think of anything that i wish i had known before entering the track but what i do want to say is just for this track um you two in order to succeed in this car in this track you really just have to you know do what you do for every other class it's just the the cliche stuff make sure you do everything you're supposed to do start assignments early watch lectures and after you submit your assignment and it gets graded you just make sure that you understand um you don't you go back to the questions you got wrong and just understand why you were wrong and what the correct answer should be and uh i would highly recommend you know working with several people uh for your furry assignments or just get together and have discussions because a lot of times you could you could learn something learn concept in class and then um actually completely completely miscomprehended so that when you have when you talk to a friend about um you know have a discussion on the topic and you're actually you actually have the opportunity to realize that oh wait what i realized was completely wrong and uh discussions are always really helpful um but if you want to become you know more involved in uh insecurity there there is this club on campus called ctf which is capture the flag i myself i'm not in that club because um i'm not actually going to the security um like working as a security analyst in the future i'm i am working as a software engineering engineer in the future um but if you do want to go in that direction i would highly recommend going to capture the flag which is an um an activity that most security people like peaks do yeah next question all right fine so what opportunities has the track open for you okay so um i secured my job my junior year i guess because i got my internship junior year and then i after the internship last summer i had a strange like i immediately accepted my offer so um i can't really say you know what opportunities the track opened for me because when i was still actually still looking for opportunities um that was before i really started taking all the classes but i will say that having um like heavy security track listed on my resume will definitely help me stand out among among other people just because just because you know if you make an application but you do not know what kind of potential threats it might have which you will learn in in 426 the company will probably pick someone who does know overview so even though the track itself is security i mentioned this again i'm mentioning this again um security security track and purdue and software engineering tracker do really go hand in hand um i do believe that if you're in software engineering you should probably pick up a few classes from security also it's really just a mix and match of how you like to mix them um yeah all right fun uh moving on to question five so why should i enroll in this track okay so um for me personally after enrolling security you're not taking classes in security i definitely feel more confident as just as a software engineer programmer there's not a single class in security track that doesn't make you a better developer and also of course if you are determined that in the future you want to be a security analyst of course that would be the track for you um once again security and software engineering might be a pretty good combo but um do not um do not neglect the option that you can you know pick up another track and then pick one in one or the other in security or like security or software uh pick one of those and then basically if you think that you can't handle three tracks at the same time just pick up one of them and then pick up some classes that are not required by your track but just learn it because you want to know more um yeah all right cool um and then finally uh if there are any questions from the audience as i said before you can unmute or you can just type them in the chat uh and yeah all right so i i have a question for you you have in the chat we have a couple people who are debating between software engineering security and machine learning so do you have any advice for them because i mean you were in the same boat so like i mean they seem to be going through a similar kind of scenario yeah um yeah if i were you i'd definitely just pick up ml and then do either do either software engineering or security like just pick either one of them and um and then just um pick up classes from the other track that you're not taking um to make sure that you don't miss out anything from the from the track that you didn't pick up um so for so for if you if you wanted to go into um software engineer if you wanted to pick up software engineering as your main track i would highly recommend taking um taking 426 um as your class to pick up from software engineer i mean from a security i bet all right i think we have a question in the chat oh that's a good question yeah yeah that's a good question yeah so um so for for os for operating system um the xenu operating system is coded in c so definitely make sure that you have a strong foundation in c before you head into that class but i think like purdue does a pretty good job with that right um for um for 350 not 355. um i got to remember yeah 35 the cryptography class that's the um that's the theoretical class so you don't do any coding that and for 426 computer security there are the two coding assignments are also in c and um so i would say if you want to hand it to security just make sure that you're good with c um did you say cs420 for the sw for the software engineering elective um no i said uh 408 software testing is that what you were asking storm yeah 408 that's the one i'm taking right now um that's a pretty good class to take in my opinion so far we just learned how to make test cases basically uh yeah we also have another question directed not specifically to uh but to all of our presenters uh regarding just general classes uh to take for uh like that like just across all tracks um so if either shifty or carl want to also often to answer this question right when i get out my rice to eat darn it um so i know for me um generally the two the two courses well the courses that i suggest people um i think the uh algorithms track uh is we're not algorithms with the 381 algorithms is a really really cool course to take it just gives you a lot better foundations and like algorithm designs and thinking about that um let's see here um and then also um this is gonna be kind of sound like a weird suggestion uh but i highly suggest um horticulture 270 uh flower ranging and indoor plant management and any of the dance classes here at purdue and that seems like a weird thing to suggest to computer scientists um but the reason why i suggest those two as electives is that they're going to teach you skills that are very different than what we learn as cs people but they're courses that you can take that all the time you spend to them are confined to the course itself and so you're learning new things are kind of maybe a little bit outside and expanding your mind and doing things that are keeping you active engaged and healthy to do your other courses like um you know these your track courses but it's also not going to take any more time than the actual course itself so i know that if i'm in a dance course i'm going to be spending you know an hour monday wednesday friday doing dance and nothing else or if i'm in this horticulture class i want to take this much time so those two courses are things that i really highly suggest to people because it gives you a chance to take something that's going to broaden your horizons without um without taking up a lot of time um from your actual cs forces all right cool uh you however if you have anything to add to that um yeah feel free to share um otherwise if we have any other questions specifically for you how uh people can ask us too uh yeah or or anyone uh we're all here it seems like um well if truthy you don't have anything to suggest i will say yeah i would just agree also 381 definitely a very important class to take [Music] it might be stuff that you might like it teaches you stuff that you might never really use i would say in the future but as a computer science scientist or um just because you're in cs you should know the stuff that they doing there that's what i would say about that class all right uh well if we don't have any more questions uh we can conclude our track workshop so thank you you have for presenting about security thank you to all of our presenters today uh uh i'm sure everyone was uh very very uh grateful because we were able to learn so much about all the different tracks uh so yeah thank you i'll i'll say it again um but i put it in the chat several times but i and i'll put in the chat again now um but if you want to um if you have any suggestions for any purdue hackers uh workshops feel free i have just sent the link to a form and also if you haven't already you can fill out a google form uh which will automatically enter you in a chance to win an echo dot and the forum for that has also just been faster so yeah once again thank you to all of our presenters yeah thank you a great time thank you thanks everyone all right then i'll go ahead and stop uh recording and yeah we can conclude the meeting 
TpcOYfY-QME,22,,2020-03-22T15:30:11Z,Lecture video 17CS62 Module 3 Line Clipping2 SharonRoji,https://i.ytimg.com/vi/TpcOYfY-QME/hqdefault.jpg,Sairam CS Video,PT13M19S,false,124,4,0,0,0,now we can see how to clip a line using : so that lung line clipping algorithm trick this is the value given they have given X min x max value similarly y-min and y-max value and the end points of her life right now we have to clip the line using Cohan so that land line clipping algorithm to start this first we have to draw the clipping rectangle sorry the clipping window using these values and we have to draw the line weight first we'll do that as you know this value will be X min Y men when you see this axis this is x axis that is it keeps on changing but why it reminds the same right it keeps on changing at this point X will reach its maximum value but why reminds the same so what is the Y value here wimon will be the same value here also see this right it is y axis Y keeps on changing but X reminds the same so what is X value here it is X marks X reminds the same white keeps on changing so Y changes and at this point it reaches its maximum value now coming to here this vertical line again this is y axis y keeps on changing and at this point y reaches its maximum value X remains the same so it will be X min comma Y max right now this explain why my min value are given here we have to substitute these values so how will I get my clipping window clipping window will be as you know this is x-men women so what is my X min value 50 and Y min value is 10 so what should I write here 50 comma tip what about this vertex it is X Max and y minus y X Max is 80 and y minus 10 this is xmax and ymax so that is 50 comma 40 and what about this vertex it is X min Y max X minus 50 and why max is 40 right so I'll check X min wyman X min Y min 50 comma 10 X marks Whiteman X Max is 80 Y min Liston this is the xmax ymax are so xmax ymax so this should be a T comma 40 and this is X min Y max the X min 50 Y max is 40 right now I have to draw the line in points right this is x1 y1 right so this is x value is 40 if you check this what is the minimum x value here 50 so my clipping but in my clipping window the x value starts from 50 so obviously this X 40 it lies outside my clipping window somewhere here I should get this 40 right x value is 40 what about Y value 15 so here this is why in this point Y value is 10 so 15 should be little up here right so this will be made my first in of my life so it is for T comma 15 next endpoint is 75 75 this is X this is y value X value Y value right now what is my maximum its value ELT right here the x value is 75 so 75 is less than 80 so somewhere inside it should cover theta and what about my Y value 45 what is maximum Y value 40 right again right so 75 X value this is 80 x value 75 should be somewhere here but maximum at this point my Y value is 40 since here my Y value is fortified it should come somewhere here now this should be my line endpoint so what about this it is 75 come up 45 right now what should I do I have to calculate these intersecting points greater so this light in point this line right it crosses the edges of my clipping window so I have to find this intersecting points and you know the formula to find the intersecting points right so I'll write the formula X is equal to X 1 plus y minus y1 by yama and my Y by Y formula is y is equal to y1 plus M into X minus x1 right now first we'll calculate this endpoint right this endpoint I'll take us X comma Y and you know while explaining the algorithm itself I have told light throughout this line try my X reminds the same only Y keeps on changing you can check at this point exists fifty at this point also X is 50 so throughout this line X will be fifty right so X will be fifty and why I should find out to find out why I use this formula y is equal to y1 plus the M into X minus x1 right now to use this formula I should know this slope so I find em first M is equal to I'll use the formula y2 minus y1 by x2 minus x1 right that is I'm finding the slope of this line right so this is x1 where you are this is x2 y2 so it will be 45 minus 15 divided by 75 minus 40 theta which is equal to 30 by 35 right now I have to substitute these values in this formula so Y is equal to right now here I'll be taking this as x1 comma y1 right so what will be my Y 1 value it is nothing but 15 plus you might have calculator here 30 by 35 into write X minus x1 right yes - what is my x1 here this is x1 y1 x1 is nothing but 40 right and while explaining the algorithm I tour X it can be either X min if it is left boundary or it will be xmax if it is right boundary now which is my boundary this is my left boundary left right bottom top so I'm intersecting with my left boundary so if it is left boundary what value I should take explain what is my XML surfing right so 50 when I do the substitution I will get the value of twenty three point five six this will be my wife so at this point what is my X X is equal to 50 comma twenty three point five six right similarly I have to calculate this in the setting point right to calculate that in the sifting point I have to use the formula X is equal to X 1 plus y minus y 1 by ya right so at this point again all the intersecting point I'd be taking us X by X comma Y X comma Y right and if you check this horizontal line in this horizontal line X keeps on changing Y reminds the same you can check here this Y value is 40 here also why you value is 40 so here also Y will be 40 what I should calculate I should calculate yes right so to calculate X I'll take in case I have to calculate X right why is what t right so to calculate X which formula I will be using I will be using this formula X is equal to X 1 plus y minus y1 divided by young right and what about this it's 1 and y1 now this in point I should see that us x1 come off while you are right so here it will be the X is equal to what is my x1 value now X 1 is nothing but 75 right so it is 75 plus white Y heat can be while explaining the algorithm itself I told Y it can be either Y min or it can be Y max when I should use wyman if it is what about when I should use Y max it is top right now I am intersecting with my top boundary so Y value what should I use I should use white maths right what is my white max 40 right so it should be 40 minus coming to y1 what is my Y 145 right so 45 by what is my M 30 by 35 if I substitute all these things I get X is equal to 69 point two with this what about my eggs come out why it is 69 point 2 comma 40 right now you can draw the final diagram and you can plot here this value is 69 point to come off 40 what about this in the sitting point it is 50 comma 23.5 50 50 comma 23 points 5 now this is my clipped line that is the visible part of my line which will be available in my booth thank you 
uOrN8mGrf3U,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-10T05:51:28Z,Data Principles (CH-10),https://i.ytimg.com/vi/uOrN8mGrf3U/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT28M58S,false,15,0,0,0,0,[Music] welcome to a panel a lecture series on computer science so this paper is about visualization techniques and in today's module we are going to look at the various data principles are associated with visualization the learning objectives for today's modules are today's modulus to introduce the types of data to learn the different types of data visualization and various aspects and today to learn about the data visualization principles and finally some of the examples we'll also look at some of the examples of data visualization so what does data visualization data visualization as already said it is a visual representation of data for exploration discovery and flight if in an interactive component can also be added to data visualization where this interactive component can provide more insight as compared to some kind of static images that are shown to the end users the language associated with the data visualization is data visualization can be forming a science system there can be marks and each mark on the visual a represents a particular data element the mark can be in any form the mark can be a point a line or it can also represent an area we need to choose the visual variables to encode the various relationship between the data elements some of the relationship that exists between the data elements are the difference relationship similarity between two types of data the order and the proportion so position alone will support all these kind of relationships there are huge range of alternatives for data with many attributes that us we can find images that express and effectively convey the information this is a data type taxonomy the data can be divided into various types the data can be a one dimensional data the data can also represent certain temporal values the data can also represent two dimensional or three dimensional attribute the data can be an n-dimensional data the data can be represented in the form of trees networks and the data can the data can also be in the form of excellent documents so let us see one by one data in detail this is a one dimensional data visualization histogram is a very good example of one dimensional data visualization histogram is an example for one dimensional data visualization histogram usually show the distribution of values of a single variable we divide the very values into bins and show that show a bar plot of the number of objects that are present in each then the height of each bar in the histogram indicates the number of objects present and that particular bin and the shape of the histogram depends on how many number of bins we consider so here is a good example of a histogram so there are various means we can see the height of each bar represents the number of objects that belong to that particular bin the next one is a temporal data visualization in temporal data visualization the temporal visualization analysis refers to the process of looking at are analyzing the features are data that are dependent variables where time is an independent variable so here actually in temporal data visualization the data as such can be represented as a time series data and the values varies with respect to time so here are two different examples of temporal data visualization where the data is varies with respect to time as such so the temporal data visualization can take many different forms it is the reconstruction of the spatial path as a feature that travels it can be considered as a reconstruction of the spatial path as a feature that travels over time it can be considered as the rate of change of velocity the fines or other data or factors that varies over the time the absolute changes in the data fields that varies with respect to time and changing features that varies with respect to time so these are different types of temporal data where an the value of the data varies with respect to time factor next is an example of 2d data visualization here the represent a it is the representation of two set of rate of data as such the two sets of data entity can be represented in the x axis on the y axis there are many kinds of representing this kind of two-dimensional data these can be represented as a bar chart this can be represented as a pie chart a bubble chart etc here are two different examples of two-dimensional data visualization next one is the 3d data visualization in 3d data visualization we need to understand the forms in a data with respect to x and y dimension of the plane and there is a variation in the easier dimension usually this kind of is a dimension is represented in the Asafa as a depth information associated with the objects so in this case we need to represent the entire data with respect to three different axis that doesn't the XY as far as the is it access the correspondence between the raid on the image with its level of perception is required to be objective in nature and the visualization of the image can be mobile or it can be in mobile also so this is an example of a 3d data or a presentation so you have the X and the y axis along with it we have the is it access details over for so we have x axis y axis on the y axis details next one is a n dimensional data visualization in n dimensional data visualization there are n number of dimensional visualization for a given data set it is the other name for n dimensional data visualization is multi-dimensional data visualization so here are given two different examples of n dimensional data where it is there are various attributes associated with the data with respect to the place of the data with respect to the name of the data with respect to the location of the data and all these so these are represented as a n-dimensional data the next one is the networks in the case of networks things are more likely to form groups and if the groups appear familiar or meaningful to each other we tend to group objects that are going to appear familiar or that appears to be meaningful to each other we tend to form them and therefore we tend to combine them in the form of groups so connecting and grouping the similar set of data forms a particular network so these are good examples of network visualization the other kind of virtualization is the text and the document visualization here in the case of text and document visualization we try to completely integrate both numbers images and diagrams to show different moves and not get locked into only one way to see the evidence we try to bring all these together in the text or text or document visualization their textures the text can be in the form of the name of the author or the name of the code modules the text can be the it can also show some dependency information as brackets and things like that images can be used to tell the granularity of the information and we try to integrate all the entire dependency text as such so this is text or document visualization so far we can also see that the types of data as such can be broadly classified as tabular data order data it can be relational data or it can be some kind of spatial data in the case of tabular data we can once again divide the data into two different types that is categorical or nominal data or the data can be in some other format in the case of categorical or nominal data nominal usually represents the names we try to represent them by names so for example male-female is a good example of nominal data set similarly there can be different categories like a ata G these can represent different data set categorical data set as such now other one is the ordered dataset in the case of ordered data set we can I'm ordinal data as well as quantitative data so good examples for ordinal data are abundant common wrap this is one example of ordinal data the data which is represented in certain order the data set like the days of the week say Monday Tuesday Wednesday etc that also forms an example of ordinal data set in the case of quantitative data we need to represent the data with respect to some quantitative values so 10 millimeters say for example we try to represent the rainfall in a particular location so we say 10 millimeter 15 point five millimeter 23 millimeter all these are good examples for quantitative data type the other type of data is a relational data there there exist some kind of relationship between the various data attributes so examples are trees and networks are good example for rate relational data right the other one is a spatial data in the case of spatial data the entire data is represented in the form of a map there the attributes are represented in the spatial region as such so this is a broad classification of different types of data as such so when we talk about the data we need to have a clear vision of the data that does we need to make the data stand out in our receiver we try to use visually prominent graphical elements to show these kind of data mean we're trying to use visually prominent graphical elements we should not clutter the data region as such we need to use a reference line when there is an important value and that must be seen across an entire graph and we should not let the line interfere with the data set so whenever we need to stress something or important points we can use the reference line and this should be seen across an entire graph and we need to see to that this does not interfere with the data as such and we should not allow data labels to be present in the data region so that they may interfere with the point of data value or they make clutter the entire graph of such next in the case of clear vision we also need to look at a wide putting north our keys or markers in the data region the region where when the data is being represented has to be very clear we should not clutter the region by including nodes or keys or some kind of markers inside the data region so in that case we need to put the keys and markers just outside the data region and put the nodes in the legend or on the text we need to see to that the overall overlapping plotting symbols must be visually distinguishable if there are any kind of symbols that needs to be overlapped which we should see to that they should be visually distinguishable and similarly super poster data set has all familiar deliever jewelley discriminated that should be some kind of visual clarity that must be preserved and that reduction as well as reproduction of the data set next one is clear understanding of the data see to that in our visual we just on looking at the mark are by just looking at the visual it should be possible for the end-user to clearly understand what the data is so for which we need to look at certain aspects that is we need to put major conclusions into graphical forms we need to make legends more comprehensive as well as informaiton the arrow boss should also be clearly explained we need to proofread the graphs and we need to strive for clarity in this case the next one is with respect to graph in the case of graph there are a large amount of quantitative information that can be packed into a single region so here given or the example for graph data type graph visuals so here the graphing data should also be an interactive and it can also be used for experimental purposes the graph data two or more times must be used whenever it is needed we need to use many useful graph that require careful and detailed study when we talk about the data visualization we need to look at eight different principles of data visualization they are as follows the first principle is we need to understand the problem domain as such the second one is we need to get the sounder data third is show the data and also we need to show the comparisons very clearly in our visual the fourth principle is immediately incorporate various visual design principles which we have already seen and the previous module the next one is we need to add small multiple which tries to make the data more complex then we need to add certain layers to the visual we need to add access or coding patterns to the visual and we can also combine certain metaphors in the visual so these are considered as eight principles of data visualization so let us look at one by one principle in detail the first principle is understand the problem Devine so in this case if you are producing a visualization for your own use or for your department that has to be considered first so we need to look at whether the visual that we are going to produce is it for our own use or is it for the department or for some other person so so then the chances are good that we already understand the area that we are working in but in reality there may be other cases like visualization has to be done for other Department or even for some external stakeholder so in such cases we need to ask the questions through the stakeholders and we should also do more research in understanding what is the data and what is the problem domain that is associated with the data so in understanding the problem domain clearly we need to look at whether the visible that we are going to create is for our own use or is it for some other stakeholder or is it for the department and which we are working and if it is for our own use then there is no problem because we already know what the data is and what it is going to represent if it is for some other external stakeholder we need to see to that we understand the problem more clearly or do certain research to understand what does that that is involved in that particular dataset and then we try to create the visual next one is get found data this may seem obvious but good data is at the heart of any effective visualization whenever we say that some visual is more effective it means that looking at that visual itself it should be possible for me to get the exact data as such so for for creating a visual of that type we have to make sure that the data we select as as accurate as possible and we should have a sense of how it is supposed to be gathered and what errors are inadequacies that exist in the collection of that particular data we also should make sure that you beget the relevant data and they also get enough data out of it so using these kind of the relevant data and the accurate data we need to create an effective visualization which we should see to that it is understand it needs to be understandable and the meaning of the data has to be provided to the end-user this can be a challenge if it has been stored as wrong numbers as such so this is the principle behind getting from data next one is showing the data and showing the comparisons so picking the better type of visualization is an art basically there are various types of visualization that exists to represent the data in the visual form so we need to pick the correct type of rational form that will suit that particular data set so in selecting the basic rule of thumb is to choose a spatial metaphor that will show the data as well as the relationship so with minimum destructions our effort on the part of the viewer we need to suit see to that the when we are choosing the spatial metaphor we should see to that there are minimum destructions are less effort on the part of the viewer so that just on looking at the data it should be possible for him to compare it with some other data set so in the case of network can in the network visual can be used to show some kind of connections or sometimes in the case of a radial node the network visual can be used linear visual seems to show how something varies over time or something varies in relationship to another factor or this can be represented often on an XY space sometimes the rater can also be represented in a hierarchical manner which can be used to show groupings and importance and these can come in many different layouts in the case of parallel it is used to show the reach the frequency or shares of the whole that can come from many different leaves the next principle is incorporate the various visual design principles so already in our previous module we have seen the various design principles with respect to say symmetry shape rhythm and all those things so those are to be considered while creating the visual so usage of sound visual design elements like line form shape value and color is to be understood first the principle stick balance and variety to make a visualization in both inviting and easier to read for trends and comparisons so this will be very particularly important when we take our linear metaphor visualization to the next level if it is in the form of a linear metaphor visual it is easier for us to understand minimum we take our linear metaphor visual to the next level whenever we try to make it more complex or compare it with some other data type we need to incorporate some kind of balance we need to incorporate some kind of variety into the visual that we create so in such cases we should see to that we incorporate the various design principles as such the next data principle is bring in more dimensions once the way once we have the good data as well as the sound data then we need to look at the underlying spatial metaphor and finally it is time to take the point of complexity of the data type so you we need to consider the various dimensions of the data and see to that all the dimensions of the data and the Associated attributes are explicitly shown in the visuals that needs to be clearly considered so based on our knowledge and research we can also come up with the initial look of the simpler linear metaphor visualization so examples are stores in we can consider store sales as an example in this case how was it possible for us to bring in more dimensions how do we know that this that this obstacle fails is not just a seasonal trend we can also look at total sales are up but has a new store layout succeeding is succeeded in improving the performance of some of the departments that were struggling before these are certain questions that can be answered when we try to bring in more dimension into our our example that is our store sales they can also look at our me succeeding in getting more customers into the store or not just selling more to existing ones our customers shopping good departments and buying a more diverse mix of items so these kind of questions can be answered and answers for those questions can be got just by looking at just by adding more dimensions into the linear metaphor visualization in the case of a store sales example so asking these kind of questions is a great exercise to bring in to begin taking in talking about a vision taking a very good visual this will lead to the next level because they may prompt us to add more dimensions that allows more viewers to explore and understand the subject in in addition in addition we can also add more angles and add in more details also there are a variety of solid techniques that can help achieve this kind of additional dimensionality the next principle that we need to look at us add small multiples as a small repeated variation of a graphic side-by-side lo4 a quick visual comparison so whenever we try to add small changes into the already existing visual that may help us in grasping a lot amount of information and will also help the end-user in having a quick visual comparison also so in that case whenever possible you skills should be kept at the same and the axis of comparisons are supposed to be aligned so in the case of visual comparison we need to see to that the skills should be kept as the same and both the figures and the axis of comparison should be aligned to each other so adding some small or stacked thumbnails to the chart now are two the main one I lose a comparison of sales strength and for the one that exists previous and for the one that exists now so like that we can also add certain multiple and try to compare it with the existing values the next principle that we need to look at is adding layers so we can also add extra levels of information while also preserving the high level summary data so we try to make a graphic representation good flexible and useful in that way by adding different layers we all we are also going to break down the top line of the total sales in two departments in the case of the example that we have consider so the resulting stripe the area chart shows the sales from the appliances department and we can also see that see too that the sales are increased in the appliances department as the proportion of the whole the bird media department sales I have not improved much so as a whole it can be understood that media department sales has not improved as such so there may be adding different types of layers it is possible for us to compare it compare across different departments next one is adding access or coding patterns another way to get more dimension in a graphic is to add additional patterns for the coding information such as we can vary the shape or color of the points on the plot based on a particular variable or an extra axis in space can be placed alongside an existing one or it can be presented kept in a new direction in the case of a 3d chart it can also be useful for showing new variables so it is therefore important to be careful with this approach as it can add clutter but menus just sparingly and with good design principles it leads to very good visual as such it can also increase a graphic usefulness so according to this principle it is possible for us to add extra access to the already existing visual and we can also add or change various coding patterns or such and see to that it adds certain extra information to the visual that we have created the next principle is combining metaphors it is also possible for us to combine various metaphors so so far we have seen a linear metaphor for our visualization which is the spatial metaphor as such so if we want to add a network metaphor to show the connections between the product categories and purchases so in that case it is possible for me to come to combine both the network metaphor as well as the mini metaphor into a single visual message so a pair of circular relationship or a chord diagram is being considered which shows the snapshot at the beginning as well as an end time period and can also help compare these kind of connections so like a pie chart each product categories are find a section of the circle and by percentage of total sales on the center of the circle is represented as an hollow is a majority of purchases containing items in one category also included items in the second category a line is drawn to the second category and the line width is based on the average proportion of both categories in the in the case of mixer purchases so this is the kind of example for the chord diagram that we are talking about so here the increase in these chord length from the first two to the second diagram suggests that these are indeed more purchases that cross departments since our initiatives went into place so this relationship data would be even better if we would like to see it at any chosen point in time for example to see what effect what if kind of analysis can also be performed over at this kind of chord diagram and summer graphics increase in complexity and sophistication we need to think more carefully about how to deliver effectively the kind of data that we have at hand so this is a good example for combining visual metaphors so in the next final principle as conferring new delivery methods so we need to look at different delivery methods for effective delivery of the vision that we have created so the point of any visualization is that it it is supposed to be viewed by the right people in the right context so some of the few examples we will enable through timers through time are drilling down and zooming out for a bird's eye view or seeing new data life as it becomes available or even manipulating future variables to watch different scenarios the next one is five principle for creating effective data visualization be open to discovering new insights effective data visualization enable the user to discover unexpected patterns and it also invites a different perspective of the data the next one is think big but start small users needed quick solutions to a very painful process that was costing time and lost business next one is designed for the user use the journeys and prototypes help to define the use of good prototype to identify the needs a small cross-functional team to be set out to find a solution B is known from three kind of questions well the customers use it can we build it does it meet the business needs so based on this a small prototype can be build to identify the needs of the customers we can also obtain feedback early and often the feedback can be got from the end-users so these are certain examples of visuals that are being created the color that dominates here it is difficult to distinguish various data set here it doesn't murky because each and every data set overlaps in this case these are browser colors recolor the previous data is very colored with Breuer palettes this is example of sortable table and matrices so in summary as such in this module we have looked at the different types of data we have looked at what data visualization we have seen at various data visualization principles and we have also looked at certain examples of data visualization thank you 
ytMTjGx6bO8,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-09T05:13:48Z,Composite 2D Transformations (CH-10),https://i.ytimg.com/vi/ytMTjGx6bO8/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT31M34S,false,40,0,0,0,0,a welcome to the epod Shallah lecture series on computer science for postgraduate students this is the sixth edition of in the lecture series on computer graphics and visualization so today let us recollect what we have already learned in this subject and in the last session we talked about transformations the basic transformations the translation rotation and scaling and let us continue the lecture series with the today's session on composite 2d transformations so to start with composition is something like you are actually merging up a series of transformations composition is an important aspect of computer graphics so in this composition what we do is we take a series of transformations and we combine them into what is called a composite okay the advantage of having a composite is to multiply the initial coordinates get the final coordinates straightaway at one stroke so having a composite matrix is so advantageous it reduces the number of matrix operations if you recollect we talked about homogeneous transformations and homogeneous coordinates and coordinate system in homogeneous coordinate system any transformation matrix is represented as a three by three matrix so if you recollect the translation matrix the rotation matrix and scaling matrix represented in homogeneous coordinates it has got three coordinates and it has got it is a three by three transformation each is a three by three transformation matrix so what we are going to do here is in the real-world scenario we have more than one transformation that is applied on an object in succession so at at at very high speeds more than one transformation is applied on objects for example if you take the tomandjerry like cartoons if you take say animation movies the famous animation movies so many transformations happen in succession for example a transfer happens a rotation happens a kind of shape change happens a kind of say reflection happens a kind of what is called a scaling happen so many of the transformations are applied in a succession in succession on the same object so let us see the advantages of these composite transformations so like the fundamental advantage is it reduces the number of matrix operations and another major advantages it avoids intermediate storage so whenever you have to say for example whenever you have whenever you make whenever you perform a transformation you store the result in an intermediate storage say for example in a memory storage and again use that for the next transformation and store it store the intermediate results somewhere so till you finally finish all your transformations so then doing so in instead of doing that here what we are doing is we will be performing a composition of all these transformations and then will be multiplying getting a composite matrix multiplied the initial coordinates get these final coordinates straightaway that's the fundamental advantage so let us look at the first example that talks about a composite transformation the example is about two successive translations assume that you have to perform two successive translations that is a translation and again a translation so let t1 be the first translation with the components T X 1 T y1 let T to be the next translation T by T X 2 and T y2 so now a point P is there on which these two translations are applied in succession so now what will be the end result or what will be the end coordinates for that what we do is you can see here as the solution starts with first t1 is applied on P as t1 T X 1 T y1 multiplied with the point P so we know that in homogeneous coordinate system a point P is represented as X comma Y comma 1 okay so the translation matrix t1 whose components are TX 1 and T y1 multiplied with the matrix P with the point P which is a matrix gives another 3 by 1 matrix okay so what we did is we what we wanted to do now is we have to apply t2 again on the result so that is see this curly braces here in the second step P dashed is equal to the final coordinates are T 2 T X 2 T by 2 multiplied with T 1 T X 1 T Y 1 multiplied with P please focus on the curly braces the red ones the red ones indicate that first t1 is applied on P and on the result so which is a 3 by 1 matrix we are applying t2 and the final result is stored in P dashed now if you see this step here that is we are writing the same equation but with just the braces alternatively placed you see this curly braces here the red ones particularly in the previous slide we have the red curly braces for the T 1 into P 4 T 1 into P and now we have just altered the curly braces so that P is independent and kept aside and T 2 and T 1 are multiplied and the resultant is what we want what is called the composite matrix and first do this multiplication then multiply the resultant with P straight away get the P dashed so the essence of this is to perform a series of transformations basically here translations and the resultant is actually a composite transformation matrix and that is multiplied with the P to get P dashed so if you see the matrix equivalents for this notation P - these X - to a dashed one in homogeneous coordinates is equal to 1 0 TX 2 1 0 1 T y2 and 0 0 1 multiplied with another matrix T 1 1 0 TX 1 0 1 T by 1 and 0 0 1 multiplied with the point XY 1 keep the point XY one aside just multiply these two transformation matrices what you get D what you get is the composite matrix the composite matrix is just exactly looking similar to that of a translation matrix no with the third column having two terms which are the addition of the two X components and addition of two Y components so basically applying two translations in succession is equivalent to shifting the object twice that is applying t1 first and then t2 next so the object is at a new position so two successive translations are additive so that is the conclusion so coming to two successive rotations imagine you are performing a rotation on an object first and then applying another rotation on the resultant object so that is first it is rotated and then again it is rotated by some other angle let theta 1 be the rotation angle for the first rotation let theta 2 be the rotation angle for the consecutive second rotation so assuming all these rotations are positive that is counter clockwise rotations as we know very well that counter clockwise rotations are positive clockwise rotations are negative so if you remember the standard rotation matrix so we have converted this notation into equal in matrix X - 2 y - 1 is equal to R 2 theta 2 cos theta 2 minus sine theta 2 sine theta 2 cos theta 2 0 0 1 and 0 0 1 and similarly cos theta 1 minus sine theta 1 sine theta 1 cos theta 1 0 0 1 and 0 0 1 when we multiply these two the resultant is a composite rotation matrix and if you observe this carefully the angles are actually added up here theta 2 plus theta 1 theta 2 plus theta 1 and so on so the resultant composite matrix is actually additive so we can conclude that two successive rotations are actually additive so in the previous case we did two successive translations they are also additive two successive rotations are also additive and one important thing is that you should observe this reversal of transformations that are applied first it is our one then it is our two when you are writing them in an order it is R 2 into R 1 into P so please understand that because we are performing first R one on P and then R 2 on P so R 2 into R 1 into P so that's the sequence so similarly that if we look at two successive scaling operations if we want to perform that means you are scaling an object first and on the resultant scaled object you are performing again another scaling say s 2 so s 2 and s 1 so this should be actually as true this is s 1 sorry this is again this has come as s 2 can correct this as s 1 so let s 1 s X 1 s y 1 be the scaling matrix first applied on P and on the resultant we are applying s 2 so this can be written as s 2 into s 1 into P so you can make the correction here this is s 1 okay so s x2 0 0 0 s Y 2 0 0 0 1 as X 1 0 0 0 s Y 1 0 0 0 1 into X Y 1 just keep this aside the point aside multiply the two transformation matrices what you get is a composite but unlike the previous cases the composite transformation matrix for two successive scaling scaling operations is actually multiplicative the means the two scaling factors actually get multiplied so the resultant is a scaling matrix whose coefficients are whose values are multiplicative scaling values are multiplicative so that's about basic scaling of basic operations that were performed two successive translations two successive rotations and two successive scaling operations we have performed but in the in the real scenario we generally do series of transformations and there are generally more in number okay so let us take a scenario which we call this as a complex transformation let us take the example of general pivot point rotation we can understand this as a complex transformation because we know translation we know rotation and we know scaling these are basic ones and anything other than that is a complex transformation we can call that as complex and later we can break that up into a series of simple transformations and then we can combine them as composite and the composite matrix represents actually the complex transformation so that's what is the is the sequence in which we go to solve these problems so let us look at the example general pivot point rotation so we understood from general rotation that rotation is performed about origin by an angle by some angle so now let us assume that there is some other point in space or some other position in space about which we are going to rotate our object so how do we do that is if you look at this sequence of steps that we are going to perform imagine there is a there is an object like a triangle and a pivot point position other than origin is chosen here for rotation so let X R comma Y R be the pivot point position which is any position other than origin now our aim is to rotate the object of interest about this point so for this what do we do is we first translate the pivot point so that it coincides with origin so the first step is a translation step so we are physically moving the point a pivot point so that it coincides with origin and then we are performing rotation with respect to origin so because we are aware that a rotation with respect to origin has got standard matrix cos theta minus sine theta sine theta cos theta 0 0 1 & 0 0 1 so we know that general rotation that is the origin rotation with respect to origin so we can simply use that matrix for rotation here and in the third step we are actually putting this pivot point back at its original position so in the first step we are translating the pivot point one translation step one rotation with respect to origin and then one read translation that is put it back at its original position so if we convert these three steps into equivalent matrices what we get are three different matrices and when we multiply them together we get what is called a composite matrix and that composite matrix represents the complex transformation of general pivot point rotation so let us take the notations and the first transformation is represented as translation T of minus XR and minus yr so that means we are actually making it that is shifting the point so that it coincides with origin and rotation theta so always we assume that rotations are positive unless and otherwise explicitly mentioned like their clockwise rotations so all rotations are understood to be positive okay rotation with respect to origin is then performed by an angle theta so that is R of theta and by the desired angle and again put it back at its original position which is translation X R comma Y R so if these three are written in notation form now you see this equation here the new position of the point after performing a rotation for an object about a general point in space is given by the equation translation x ry r multiplied with rotation by an angle theta multiplied with translation minus x ry r you must observe that when the steps are written in the previous order like 1 2 3 here they are written just in the reverse order you should note that carefully they are to be written in the reverse order first it is this from the right hand to the left hand you should be writing the notation so T of minus X R Y R into R of theta into T of X R we are the red curly brace for the for the set of matrices multiplied with the point P the initial point R the point that we wanted to rotate R the object that we wanted to rotate here as P so when you multiply these three matters I see this here 1 0 X R 0 1 by R 0 0 1 cos theta minus sine theta sine theta cos theta 0 0 1 and 0 0 1 1 0 minus X R 0 1 minus y r and 0 0 1 so when you multiply these 3 what you get is a composite matrix and whose elements are given here as cos theta minus sine theta sine theta cos theta and the third column has got elements which are some nonzero values X R into 1 minus cos theta plus y r sine theta Y R into 1 minus cos theta minus X R sine theta so these nonzero elements actually the if you look at the first four elements of this matrix they are exactly the same if you as the original rotation matrix that is rotation about origin but if we're performing rotation about any general point in space we get two additional elements in the third column generally elements in the third column correspond to translation that means the point not only the objects not only get rotated about the pivot point but also get translated by the amount proportional to these two elements that is one element corresponds to the X direction the other element corresponds to the Y direction so that is there is a shift not only there is a rotation there is also a shift so let us look at another case of general fixed point scaling so just like we did general pivot point we have general fixed-point scaling that means imagine any point in space and perform scaling with respect to that point it is something like you fixed that point you hold that point with your hand and let the object be pulled with respect to let the object be resized in all directions like say we have only two directions in 2d so stretch the object along x direction and stretch the object along y direction but now with respect to another point any general point in space other than origin so you can take an example of say a triangle whose centroid is the fixed point let us say its centroid is the fixed point then when you perform scaling what happens is with respect to the centroid we'll be pulling the object on all sides so the object becomes bigger but while the centroid reminds the same so for the bigger object is it is they are the centroid still is at the same place but if you if you recollect the scaling that we did the basic scaling with respect to origin the up scaled object move moves away from origin while the downscaled object moves close to its origin but in this case the object remains there it becomes bigger in size so the effect is what is called a general point general fixed point scaling let us call this as a complex transformation let us break this up into a series of simple transformations and then let us make a composite of it and the composite represents the general fixed point scaling so if you look at these scaling diagrams here general scaling imagine the fixed point is X F and Y F with respect to which we would like to scale this triangle and the first step is to is to translate the fixed point such that it coincides with origin so it is a translation simple translation then with respect to the origin we are actually scaling it the pins you can upscale arc and on scale here in this example it is down scaled and the third step put it back at the original position put the fixed point at its original position so a translation as scaling and then again read translation so put it back at its original position so if you write equations that is notation representation for this the first step is T minus XR minus y our second step scaling s SX sy the third step x ry R so there is rx f YF rx ry are both both mean the same here just it's a notation so you can correct this as X f + YF here and except and YF just what I change from rotation so the final equation for general fixed point scaling is given by P dashed is equal to TX f YF into multiplied with scaling yes SX sy multiplied with translation - XF minus YF so see always the red curly brace and they whatever is in the braces is a set of transformations which are to be composited so when we multiply all the three what we get is a scaling matrix SX 0 0 sy + 2 more nonzero elements in the third column X F 1 minus SX and Y of 1 minus sy so that's how we get the composite matrix so this composite matrix represents the general fixed point scaling that means you can perform scaling with respect to any general point in space so here if you take origin as your fixed point for example so X F + YF becomes 0 and 0 so now the elements in the third column become 0 and 0 so that is how this is a more generic matrix for scaling so let us take another example here for composite transformations general scaling directions so far scaling is being performed one along the X direction the other along the Y direction so we have two scaling factors SX and sy all the time so that means whatever object is of interest we have with us so we'll be scaling it along X direction and you'll be scaling it along y direction as well so here we can also imagine scaling to be being then can be done along other directions also so let us take two mutually perpendicular directions as shown here in this slide s1 and s2 which are actually mutually perpendicular but not along x and y directions not along the standard coordinate directions so now there is a square the square is an object on which we are applying a scaling transformation and the scaling is not done now along x and y but instead along two other mutually perpendicular directions s1 and s2 so that means a long diagonal so see the scaling factors here s 1 is 1 and s 2 is 2 so that means s1 is 1 means along s1 direction there is no scaling so the size should remain the same along s2 direction the size is double so because it is scaling factor is 2 that means it is something like you are holding the two or diagonal edges two edges of the square that is 0 0 edge and the vertex and the 1 1 vertex and then scaling it like this so that the length of the edge along the diagonal is now more than the original length so the steps are shown here how do we go with it let us call this a complex transformation so our aim has always been to take a complex transformation break that up into a series of simple transformations and then take a composite of that and then multiply the original coordinates get the final coordinates so the first step is to rotate the to scaling directions such that they align with coordinate directions so the first step is to rotate s 1 and s 2 directions they are already mutually perpendicular so rotate them such that s 1 coincides with X and s 2 coincides with Y so this rotation is intentionally taken as positive because it is counterclockwise rotation so by what angle you should rotate so the angle is evident here the angle is Theta so s1 Direction makes an angle theta with x-axis so s2 direction obviously makes an angle 90 minus theta with x-axis so let us rotate this is the second first step is to rotate the to scaling direction such that they align with the coordinate directions that is s1 aligns with x + s2 aligns with Y the second step is to perform ordinary scaling with respect to origin and third step is to rotate that back so a rotation a scaling and then inverse rotation so the steps are shown here R of theta yes s 1 comma s 2 and R inverse of theta so that is there is actually shown here in the notation and in the matrix equivalents for this actually are shown in the next slide before we go to that let us see what is going to actually happen to the shape so this is the square and this is actually a 0 0 1 1 there is a unit square standard unit square and now you are performing scaling on this object along two mutually perpendicular directions s 1 and s 2 the scaling factors along s 1 is 1 and along s 2 is 2 and theta is 45 degrees so what happens actually is look at the resultant shape the resultant shape is actually like a parallelogram and it is slightly up and is not actually the bottom edge is not touching the x-axis it is slightly above that and the coordinates of the except 0 0 all the other coordinates got changed for the other vertices other 3 vertices the 1 1 vertex has become 2 - no because it is twice is the scaling factor along that direction but along the other 2 that is the other 2 vertices have become 1 by 2 comma 3 by 2 & 3 by 2 comma 1 by 2 so this is the effect of this is actually a change in shape so that's what we have achieved here at the end so if we take an example let us take an example problem that we can solve easily consider a triangle at 2 comma 2 10 comma 2 and 2 comma 10 so the three vertices of a triangle are given now perform the following transformations in succession and find the resultant vertices now our aim is to perform these two transformations on the triangle and then find the resultant position so the first step is to scale with respect to 2 comma 2 that means the 2 comma 2 is the fixed point with respect to which now you will be scaling the object which is by scaling factors 2 comma 2 and the next step is rotate by 90 degrees counterclockwise so P dashed is equal to R of 90 into s 2 comma 2 so we always write that in the reverse order and the first step is scaling with respect to a fixed point which is 2 comma 2 for that the transformation matrix is 2 0 and X F into 1 minus s X if you remember X F into 1 minus s X and 0 s y YF into 1 minus s Y if you remember the scaling matrix that is with respect to any general point in space that we have just derived before we have got the matrix SX 0 0 sy except 1 minus s XY of 1 minus sy 0 0 1 so that is what we have applied here and we got a if you are not able to remember this what you can do is translate the fixed point 2 comma 2 to the origin that means minus 2 2 T of minus 2 minus 2 then perform ordinary scaling that is these two elements are 0 0 the scaling factors are 2 2 and perform a read translation you can do these three and still you get the same matrix as that of the fixed-point scaling matrix so if you don't remember in any case the general fixed point rotation matrix you can take these steps in three steps and multiply get a composite and that represents the same matrix and next step is to perform a rotation so rotation is 90 degrees counter clockwise and so what we get is a standard rotation with respect to origin and we know the angles that is 90 degrees is the angle and cos theta minus sine theta sine theta cos theta zero zero one zero zero one we got a resultant matrix here for rotation and the last step is to multiply the scaling matrix multiply the rotation matrix get the final composite so do not do anything to the triangle just get the composite matrix and the next step is to take each vertex of the triangle multiplied with the composite matrix get the new vertex take each vertex one by one there are three vertices take the first vertex say 2 comma 2 and because that is actually you are getting minus 2 2 and the second thing is 2 comma 10 and the next thing is there is the equivalent so multiply here the 210 and 1 with the composite matrix you get minus 18 to take the third vertex 10 2 and multiply with the composite matrix and get the third vertex new vertex here minus 2 18 so this is how you should be solving problems so now we have learned here a simple sequence of steps to solve complex transformations like take a complex transformation break that up into a series of simple transformations and then multiply the simple transformations in the reverse order get a composite matrix and have the composite matrix with you take each vertex multiply the composite matrix get the new vertex so that is what we have learnt in this module so we have learned how to perform composite transformations we have also have seen examples on how to perform what is called complex transformations by simply decomposing them into simple steps and then getting a composite and then solving problems so you can solve any number of problems you can take simple exercises and solve problems and you can try for yourself all this thank you 
LhIfx1_Re-U,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-10T05:51:56Z,Perception and Colours (CH-10),https://i.ytimg.com/vi/LhIfx1_Re-U/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT31M5S,false,20,0,0,0,0,[Music] there will come to Ebert's our last lecture series and computers Minds the subjective graphics and visualization and in today's module we are going to look at perception and colors the learning objectives of today's module are this helps you to introduce approaches to visual perception this module helps us to learn the visual perception theories this model will also help us to learn about the various color principles color space and the color differences and this module also helps us to know about the good and bad usage of colors so what is visual perception visual perception is the ability to interpret the surrounding environment by processing the information that is contained in the visible light the resulting perception is also called as eyesight sight or the other name is given as vision various psychological components involved and vision are collectively referred to as the visual system and the focus of this particular visual system has much of importance and research in the psychology in subjects like psychology cognitive science neuroscience and in molecular biology what is this visual perception let us take an example and know what this visual perception is all about the major problem in visual perception is that what people see is not simply a translation of their writing and stimulate the people interested in perception has long struggled to explain what the visual processing does to create what it actually what does being actually see so let us look at this picture that is shown here if you look at this picture for a few seconds and let us look into the visual inspection of what happens when we look at that particular picture while the background is out of focus for this picture which represents every federal mission the first eye movement and that picture goes to the booths of that particular person and the second third and fourth eye movements jumps from is to face of each person that are represented in this particular picture then the be made even permit are we made even compared between the various faces that we see on that particular picture it may be concluded that the icon phase is a very attractive search icon within the peripheral field of vision the four-wheel vision adds detailed information to the peripheral vision or to the foster a moment it can also be noted there are three different types of eye movements which are called as the virgin's movement saccadic movements and the perceived movements let us see what these three moments are the vergence movement involves the cooperation of both the eyes to a low for an image to fall on the same area of both the retinas this the result of this virtual vergence movement is a focused image next is the saccadic moment in the socratic movement is a type of eye movement that makes jumps from one position to another position and it is used to rapidly scan a particular scene or an image lastly we have the pursuit movement which is a smooth eye movement and is used to follow the objects that are in motion in the given picture see if we look at the face and object recognition these two recognitions are actually accomplished by two distinct systems for example the procedure nastic showed deficits and face but not an object processing while the object agonistic patients should deficit an object recognition with spide face processing phases are also subject to inversion effects leading to the claim that face recognition is very special basically phase and object processing have distinct neural system to recognize the phase and the object if we look at the cognitive and the computational approaches to perception the guest all perception loss are usually very descriptive and they are not explanatory as such one cannot also explain how human feet continuous contours by simply staring is the starring that the brain prefers good continuity by simply stating that the brain prefers good continuity the computational models of fusion had more success in explaining the visual phenomena and have largely superseded the gestalt theory computational models of visual perception have been developed for visual reality systems these are closer to real-life situation as they account for motion and activities which are prevalent in the real world filled the psychological theory of get started have descriptive principles but without a model for perceptual processing as such some of the Gaston laws of perceptual organization are very big and inadequate as as such in the 1970s David Marr had developed a multi-level theory of vision which analyzed the process of vision at different levels of abstraction he has identified three levels of analysis in vision processing namely the computational algorithmic and the implementation level so the computational level of vision processing addresses at a high level of abstraction the problem that the visual system must overcome the algorithmic level of vision processing attempts to identify in the strategy that may be used to solve the above problems the implementation level Artem's to explain how solutions to these problems are realized in the neural capacity as such Moore also suggested that it is possible to investigate vision at any one of these three levels independently more described a vision as proceeding from a two dimensional visual array to a three dimensional description of the world as output Mars stages of vision include a 2d or primal sketch of the scene which is based on the feature extraction of fundamental components of the scene such as the edges regions etc then a two and a half dimension sketch of the scene Texters are also acknowledged and a three-dimensional model of the scene where the scene is visualized in a continuous three-dimensional map these are the various stages of vision given by muscle there is a process called construction which is a process through which the energy from environmental stimuli is converted to neural activity for the brain to understand and process the information the back of the eye contains three different types of cell layers namely the photoreceptor layer the bipolar cell layer and the ganglion cell layer the photoreceptor layer is the variance of the very back and contains the rod photoreceptors and the cone photoreceptors confer responsible for color perception and there are three different types of cones namely red green and blue types of phone's photoreceptors also contained within them a special chemical called as a photo pigment they are embedded in the membrane of the brain called a salam ala a single human rod contains approximately ten millions of these photoreceptor cells there are three specific photo pigments that respond to specific wavelengths of light when the appropriate wavelength of light hits the photoreceptors its photo pigment splits into two with since a message to the bipolar cell layer which in turn sends a message to the ganglion cells and which then sends the information through the optic nerve to the brain if the appropriate photo pigment is not in the proper photoreceptor then a condition which is called as color vision deficiency will occur the opposite process of this transaction is an operant process where in the transduction process the chemical messages are sent from the photoreceptors to the bipolar cells and to the ganglion cell myrrh is in the operant process the reverse occurs several photoreceptors Mayson the information to one ganglion cell there are two types Anglian first namely the rain green on the ello blue ganglion cell the brain interprets different colors and the rate of firing of these neurons alerts the red light simulates the red cone which in turn simulates the red/green ganglion cell like with the green light simulates a green cone which stimulates the red/green ganglion cell and similarly for the blue light which simulates a blue cone and this or in turn simulates the blue yellow blue ganglion cell there are various theories and observations of visual perception and that have been the main source of inspiration for computer vision as such it is also called as a mission vision or computational vision special hardware structures and software algorithms provide the missions with the capability to interpret the images coming coming from a camera or a sensor artificial visual perception has long been used in the industry and there's no entering the domains of automata and robotics the visual perception theory since organs receive the information from the environment each sensor argot is part of the sensory system which receives sensory inputs and transmits a sensory information to the brain a particular problem for psychologists is to explain the process by which the physical energy received by the sense organ forms the basis of the perceptual experience sensory inputs are somehow converted into perceptions of desks and computers flowers and buildings cars and planes that of sight sound smell taste and touch experiences a major theoretical issue on which the psychologists are divided as an extent to which the perception relies directly on the information present in the stimulus perceptual processes are not always direct it depends from the perceivers expectation and the previous knowledge as well as the information that is available in the stimulus as such psychologists distinguish between two types of processes in namely the bottom-up processing and the top-down processing let us have a look at both these processing approaches in detail the bottom-up processing it is also known as the data-driven processing perception begins with the stimulus itself processing is carried out in one direction from the retina to the visual cortex with each successive stage in the visual pathway carrying out ever more complex analysis of the input this is a bottom-up processing approach the next one is a top-down processing approach which refers to the use of contextual information in pattern recognition for example understanding difficult handwriting is easier when reading complete sentences rather than reading single and isolated words this is because the meaning of the surrounding words provide a context to aid the understanding so psychologist Richard Gregory in the year 1970 argued that perception is a constructive process which relies on top-down processing approach for Gregory perception is a hypothesis for greenery perception involves making inferences about what we see and trying to make a best guess try and knowledge and past experiences he added or crucial in perception basically sometimes looking at something we develop a perceptual hypothesis which is actually based on the prior knowledge the hypothesis we develop are nearly always correct and on rare occasion it may be misleading also a lot of information reaches I but much is being lost by the time it reaches the brain the brain has to guess what a person sees based on only the past experiences he says we actively construct our perception of reality the Richard Gregory proposed that perception involves a lot of hypothesis testing to make sense of the information presented to the sensor organs other perceptions of the world our hypothesis based on past and Road information sensory receptors receive the information from the environment then combined with previously stored information about the world it is possible for us to perceive the information what we see it has been built up as a result of experience cases the formation of incorrect hypothesis will lead to errors in perception there are there are various evidences to support grigory's theory highly unlikely objects tend to be mistaken for likely objects then perceptions can also be ambiguous perception allows behavior to be generally appropriate to nonsense the object characteristics let us look at all these evidences in detail perceptions can be ambiguous this is a good example this is a Nega tube that has been shown in the image when you stare at the crosses on the cube the orientation can suddenly change or flip it becomes unstable and the single physical pattern can produce two different perceptions are such grigory argued that this object appears to flip between orientation because the brain develops two equally plausible hypothesis understand unable to decide between them some of the critical evaluation of Gregory's theories are the nature of perceptual hypothesis the perceptual development process and the sensory evidence process so let us first look at the nature of perceptual hypothesis theory find this modify a hypothesis according to the support they find for it is so VF / zi was also able to modify our hypothesis in some cases it would seem that the answer is yes look at the figure about this is a figure that has been shown on the screen this actually looks like some random arrangement of black shapes actually there is in fact a hidden face that is seen in this figure are you able to identify that hidden face that a seen in particular figure the phase is actually looking straight ahead and isn't the top half of the picture that isn't the center the figure is strongly lit from the side and as a long hair and a bird beard so this is a face once the face is discovered very rapid perceptual learning takes place and the ambiguous picture my now obviously contains a face each time we look at it we have learned to perceive the stimulus in a different way for example illusions poses even when we have the full knowledge of them one would expect that the knowledge we have learnt would modify our hypothesis in an adaptive manner the current hypothesis testing theories cannot explain this lack of relationship between the learning and the perception next is a perceptual perceptual development process a perplexing question for the constructionist is who proposed perception is essentially top-down in nature and then how can the unit or the newborn ever perceive if we all have to construct up a real world based on the past experiences why then are our perception so similar even across cultures relying on individual constructs for making sense of the world makes perception a very individual and chancy process the constructivist approach stresses the role of knowledge and perception sensory evidence the major criticism of the constructivist is that they have underestimated the richness of sensory evidence available to Percival's in real world be correctly perceive the face of the object even though the retinal image of the object shrinks as the object recedes from a scene they propose that sensory evidence from other sources must be available for us to be able to do this there is a rich array of sensory information including other objects background the distant horizon and the movement this rich source of sensory information is important to the second approach twigs clean perception as such the second approach is a bottom-up approach given by Gibson Gibson in the year 1972 argued that perception is a bottom-up process which means that the sensory information is analyzed in one direction that is from simple analysis of raw sensory data to ever increasing complexity of analysis through the visual system Gibson attempted to give pilots training in depth the perception during the second world war this work also led him to the view that our perception of surfaces was more important than depth space perception he argued that surfaces contain features sufficient to distinguish different objects from each other Gibson also claimed that perception is direct he worked during World War two on problems of pilot selection and testing and then he came to realize that in his early work on aviation he discovered what he calls the optic flow patterns when pilots approach a landing strip the point towards which the pilot is moving appears motionless with the rest of the visual environment apparently moving away from that point which is actually called as the optical flow pattern so this is an example of the optical flow pattern three important components of Gibson's theory are optical flow patterns invariant features and affordances so what are these optical flow patterns which are dependent on the light and environment the changes in the flow of the optic array contain important information about what type of movement is taking place for example any flow in the optical means that the perceiver is moving if there is no flow the perceiver is static the flow of the optic array will either be coming from a particular point or moving towards one the center of that movement indicates that the direction and with the perceiver is moving if a flow seems to be coming out from a particular point it means that the persimmon is moving towards that point and if the flow seems to be moving towards that point and the perceiver is moving away from the point so we can look at the above image for moving towards a particular location and the other one the below image is for moving away from a particular location where you can see the arrow marks are being straight marked towards a particular location so the rule of invariance and perception we rarely see a static view of an object or a scene as such when we move our head and eyes or walk around our environment things also move in and out of our viewing field textures expand as you approach an object and contract as you move away from those object there is a pattern of structure available in such texture gradients which provide a source of information about the environment this flow of texture is called as invariant to good examples of invariants our texture and linear perspective which are shown in the example here text gradient giving the appearance of this shows appearance of depth where we can see the lines which are lying near to the end-user or thickened whereas the lines if they received from the end-user or shown as thin line linear perspective the parallel lines not of example or railway tracks appear to converge as they received from the viewer into a particular distance next one is a afarensis afarensis or in short term the skews in the environment that helps or aid in perception important cues in the environment include optical array which talks about the patterns of light that reach the eye from the environment relate to brightness which give air in objects with brighter or clearer image or perceived as closer images texture gradient the grain of texture gets smaller as object receives and this gives the impression of surfaces receding from receding into the distances the relate of spice when an object moves further away from the eye the image gets smaller objects with more are seen as more distant objects next one a superposition if the image of one object blocks the image of another the first object Athene is a closer object higher than the visual field where objects further away are generally higher in the visual field so these are certain examples for affordances evaluation of Gibsons direct theory of perception tails talks about visual illusions Gibson emphasizes on direct perception which provides an explanation for the fast and accurate perception of the environment however his theory also cannot explain why perceptions are sometimes inaccurate examples are illusions the illusions used in experimental work constituted are extremely artificial perceptual situations unlikely to be encountered in the real world the dismissal cannot realistically be applied to all illusions so when we conclude whether it should be a bottom-up or top-down process of visual perception neither direct nor constructivist theory of perception seemed capable of explaining all perceptions at all the times Gibson's theory appears to be based on perceivers operating under ideal viewing conditions where the stimulus information is plentiful and is available for a suitable length of time constructivist theories like Gregory's on the other hand have typically involved viewing under less than ideal situations research by tool being a tall manipulated with the clarity of the stimulus input and the impact of the perceptual context in a world identification task next one is about the color visualization so you can see various colors in the given image what is the principle of color the color principle laid out in in the 1970s changed little since then there there are different way of representing colors where RGB HSB or Hatch's HS are are different ways of representing ca'line there are three primary colors which are represented as red blue and yellow color and there are three secondary colors which are given as purple green and orange color we have contrasting colors and they are complementing colors on the other hand artists think about Grady gradation and mixtures that may not lie precisely along the perceptual dimensions if we talk about think it is lightened desaturated hue hue the other name for color and by adding white color to the desired color information tone on the other hand is a darkened and grade color by adding black to the given color information shade on the other hand is a mix up of both white and black color here in this slide we can see the various color mixes hue represents the various color information then gives the color added with the white color information tone gives the color added with the black color information and shade a represents the color with the black and white information next the color difference Carla makes the human brain to differentiate the data faster color or also used poorly is worse and no color at all will help and showing the differences between perception color can cause the wrong information to stand out and make meaningful information difficult to perceive there are various color spaces that are available they are also represented in the form of mathematical models which are helpful for describing color information some of the mathematical models for representing color are RGB it just be a chosen lab and LCH RGB the red green and blue is the most common in computer use but it is the least useful for designer search our eyes do not decompose the colors into various RGB constituents HSV describes color in terms of the hue saturation and lightness value this is a column order based on intuitive parameters and it doesn't move used calorimetry represents the various information of the color that is a hue which are represented around the focal saturation inside the outside color to greyscale a lightness value from weaken the lightness value changes from top to bottom there are various colored labels as such which are very low-level perceptual information they they can be used just pop out features and they can be useful for grouping certain elements they are very effective and the small number of colors are used against neutral background and they are also helpful in se which they are also helpful to understand the conflict with the color names and they help and the cognitive influence they can also represent color to quantify the information qualitative scale is Earthcare bar and colors are used to represent various qualitative values sequential scale is a scale where in the color with respect to value and saturation is changed to represent the sequential value and diverging the crossfade through various neutral values there are various methods useful for color selection and design while selecting the colors we should be very careful with respect to color harmony and it has to be dictated by perception material cost needs to be considered and the convention in which it is being represented also needs to be considered the constraints of the color with respect to practical and functional limits should also be taken into consideration then we use colors for designing process there are various color schemes that can be produced so many books and series of color schemes are important for conveying the mood of content warm red and yellow palette are for example warm red and yellow palette are helpful for creating vibrant patterns cool blue and yellow color are helpful for creating muted patterns saturated will helpful in understanding youth related information subdued or unsaturated colors are helpful in giving sophistication or maturity kind of there are various color harmonious schemes are such werein we need to look at the monochromatic color analogous or complementary color information and split the complementary colors or such various color selection tools also exist wherein it is possible for us to map a 1d slider onto a 2d or a 3d information and we can have 2d chromaticity plane in the case of photoshop then in the case of papa powerpoint we can see some form of HSL or HSV color palette accommodating viewers with the normalized vision we need to have good contrast and values we need to reinforce with encoding and shape and price and accommodating the different media we need to look at gamut mapping and scales should be uniform and non-uniform usually we map a very few key colors and we also define some robust way to move between them in a consistent fashion there are various good and bad uses of color they should the color should help us and clarifying they should not be very confusing and they should be very tasteful as such should not be clumsy the color should be robust across media viewers and viewing condition and they should not do any harm policy to the viewers so as such in the summary we can conclude that employees module we have looked at what visual perceptions they have looked at the various approaches to visual perception namely the top-down and the bottom-up approach we have also learnt what Gregory and Gibson has talked about the various top-down and bottom-up approaches to visual perception we have also learnt what colors are how colors can be represented what is a color value and what are the various color differences and at the last we have also seen and we have also looked at the general color usage as such thank you 
yiOFlb_YyFg,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-09T05:40:09Z,"3D Object Representation (Mesh,Splines) (CH-10)",https://i.ytimg.com/vi/yiOFlb_YyFg/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT36M17S,false,528,6,0,0,0,welcome to the 'part cellar lecture series and computer science for postgraduate students and we are dealing with the subject computer graphics and visualization we have had a few sessions earlier around nine sessions have gone and we are in the tenth session in the lecture series and in this series today are in this lecture today we'll be talking about 3d object representation and in that specifically we will be focusing on modeling using meshes a polygon meshes particularly and let us also look into maybe some introduction to splines as well so let us start with 3d object representations and then we'll be getting into mesh modeling and further discussion on splines we have been so far discussing on all the 2d aspects of computer graphics from this lecture onwards for few more lectures we'll be talking only in 3d arrays in terms of three dimensions will be discussing anything in the context of 3d graphics so how 3d graphics is different from 2d graphics the other dimension that is the depth is actually added so we have got a width we've got height and we've got got one more dimension the depth is added to any object that we discuss so it is also true that in the real world we have no 2d objects any object is actually in 3d so it makes more sense to talk more deeply and learn more about 3d than to stick to 2d some of the techniques that we have discussed in 2d in 2d graphics or are as well applicable and can be extended for 3d graphics as well for example clipping which we discussed in the previous session can be as well applied into 3d so the same 2d clipping like cohan's or the land line clipping can be applied to can be extended to 3d clipping as well so let us understand how the 3d world is and how to actually create 3d objects so how to create 3d objects and represent them in a program or maybe create them and see them visually and have a feel for 3d so how do we represent objects first so how do we first of all create a 3d object that's the fundamental question so let us understand the fundamental techniques to represent 3d objects there are various techniques like using meshes we call them polygonal meshes splines we can use we can use fractals we can use our NURBS so which are extensions of splines we can use other simple techniques like other techniques like particle systems we can use maybe physically based modeling and there are so many techniques that are used to actually represent 3d objects like extrusion is one important technique a simple technique as well and sweep representations and constructive solid geometry are also some of the examples of modeling in 3d that is how do these are the various techniques that we use to model 3d objects so let us start with the mesh modeling and with the first to start with or let us look into what mesh modeling is fundamentally how do we create a 3d object that's the question so in computer graphics we have two basic schools of thought or two basic ways to create 3d objects like either ways you can feel that the object is a 3d object the first way is to is called a surface modeling technique or it is also called as boundary representation the other way is solid modeling and is also called space partitioning representation surface modeling is is it can be understood like this we try to model only the outer surface that encloses the object that is imagine you are trying to actually model only the outer skin or outer layer that covers the object that means when we we will not be actually modeling the in the object in surface modeling so will be modeling only the outer shell are the outer layer are the outer skin that covers the object so now when we try to model an object using surface modeling we mean to say that using we mean to say that it encloses some airspace within it and so the object's outer layer is actually modelled and not the inside of it so if we break open the object once it is modelled what we will see is just empty space and nothing so that is where surface modeling is all about so try to model only the outer layer of the object that makes up the object for example if you you can imagine now say an orange you we try to model only the outer layer of orange so that is that we peel it off and eat it isn't it so only the outer layer is what is modeled in surface modeling and some of the best examples are mesh spline rotational sweep translational sweep fractals and so on the other modeling technique which is solid modeling is all about modeling not only the outside but also the inside so basically model a complete pure solid so it is also called as space partitioning representation because of the name it looks quite tricky so we will understand that later when we discuss what space partitioning is so solid modelling basically attempts to model not only the outside but also the inside of an object so it is always important sometimes we it is really important to understand what is inside for example if you imagine if you create a solid ball or if you create a solid wood like object so when we break it open it is also a wood inside so the there is some mass inside so it makes sense when we create objects are it is it depends again on requirements like if we want just only the outer surface and we are not breaking it up apart and we are not dealing with the inside we can as well go with surface modeling but if we want the inside as well we can go with solid modeling so you can remember these two techniques and when we go further into details you will understand better so let us start with the first technique in surface modeling which is mesh modeling mesh we can also call it as polygonal mesh mesh is something like it is a collection of it is actually many interconnected polygons are many interconnected triangles may be a mix of triangles and polygons connected so we try to actually create the surface of the object by using our by approximating the shape using many connected polygons will be approximating the shape let me make it more clear again will be actually creating the outside skinner will be actually modeling the outer layer of the object by using many connected polygons so we call that as polygon mesh it is something like taking an object and wrapping around a kind of what is called a connected polygons so that they make of the object so here we can use many triangles because triangle is the first level polygon a basic polygon and the many other side if we use like more than three sides will be having other polygons okay so fundamentally we can use either triangles are maybe other planar polygons we whenever we talk about a polygon we always assume that it is flat and perfectly planar okay so if you look into the examples shown here in the slide you have a fish modeled using polygonal meshes and particularly the triangles it is done with triangles and the teapot the famous teapot that it is it is called as the Utah teapot you tah the Utah State in us a famous teapot is actually modeled using triangles and again there is a spear that is modeled using polygons so we can model any object using meshes are using connected polygons for that sake but as we know that because polygons are more flat and plane are maybe polygons best suited for modeling objects like say tables like flat surfaces like the benches tables the vertical walls and any flat surfaces can be easily modeled using polygonal meshes and they give the best modeling there will be the best modeling tools for modeling flat faces or flat surfaces but if we try to model surfaces which are spherical which are curved which are like irregular we will be like having an approximated surface but not the true spherical surface for example take Speer if you try to model this period the spherical surface using polygonal meshes what happens is if we look into this slide there the shape is as if like it is your football like shape but more approximated polygons are more closer polygons are there which make up the spherical shape but it still looks like what is called a tessellated or we call it tessellation or we call it it's like a Bucky ball or your like football like shape and this we call it because we try to use polygons that are flat and plain are to model surfaces which are not flat or planar so that's the interesting point here so we are trying to model non planar surfaces using flat polygonal flat planar polygons so that's fundamentally is the issue critical issue here that is we get an approximation to the underlying surface and we never get the true surface and what happens is if you have to get a true approximation to the underlying surface are the underlying spherical or curved surface we'll be using too many polygons and which are smaller in size so I hope you understood this point like if you have to have a better approximation for objects that are non planar or curved what we can do is we can model them using smaller infinitesimally thin polygons and we can have many of them but what's the problem the problem is we have too much of data so for each polygon we'll have to store lot of data so and instead of having say a limited number of poly few polygons if we have too many polygons and we have too much of data represented representing one single spherical or maybe curved surface so that's fundamentally the maybe kind of drawback with flat the polygonal mesh modeling okay let us try to understand how these polygonal mesh data is told or maybe how do you represent an object using polygonal meshes if you take a cube like object for example cube has got perfectly flat planar polygonal faces so modeling the outside of a cube the skin of a cube using flat planar polygons are may be polygonal mesh is actually much more easier simpler and at the same time it is it gives a perfectly perfect cube like cube object so the data that corresponds to a polygon is like a vertices vertices or positions in space and then these vertices are connected by edges and as you can see in the diagram here vertices are connected by edges and these edges make up faces and many faces together make up polygons and the polygons make up surfaces or we can call a face as a surface also but all surfaces or not faces okay because a face is understood to be a triangle or it can be a polygon okay here these are all closed faces so no open faces anywhere and these together make up one surface and for the cube there are six surfaces and when these six surfaces are put together each of you we have to create a data structure or we have to find out what are the vertices and how these vertices are connected and how these edges are connected and how they just make up a polygonal face and how various polygonal faces are connected so if we have data that is representing these vertices edges and polygons or we can store them conveniently in a table called a geometric table we can call it as geometric data or we can we can also store them in a kind of list so we call them we can have geometric data or attribute data for a polygonal mesh geometric data for a polygonal mesh representing an object corresponds to vertices edges polygons and surfaces whereas attribute data for a polygonal mesh corresponds to the color of a particular face may be the texture and may be the kind of light and so on so other kinds of things are called as attributes geometric attributes correspond to its position its orientation of the polygonal mesh so when you have to maintain data corresponding to a polygonal mesh that is used that is being used to model a 3d object we will be storing them in various lists now we call vertex list we can have edge list we can have phase list we can have one important list that is not discussed so far which is normal list so if you can see the diagram here it's a it's a shape which is like a now like a hot like thing like a home-like thing and it has got it has got say vertices were numbered from zero zero one two three four until nine and it has got may be various edges so vertices will be connecting the edges are connected by vertices okay the vertices are connected by edges and many edges together make up a face okay so now you might also see that there are N 1 n 2 n 3 n 4 & 5 & 6 and so on there are they're actually the normal vectors a normal vector is a direction which is perpendicular to the polygonal face okay so it is important that we also store or we also have maintain a normal vector list which is important for one reason as you can see here in this slide along with the geometric information like phase list vertex list edge list we can also maintain normal vector list why is this important you can ask the normal vectors actually identify the orientation of a polygonal face with respect to a light source how is that how does that make sense to you letters may be elaborately discussed for example there is a light source okay so the light source is actually falling on the object the light source is there somewhere it is falling on the object now if the object is oriented towards the light source then the object or the face of the object should be well-lit it is obvious that if the face of a particular object is oriented towards the light source it should be well-lit any face of the object that is oriented away from the light source should not be lit well so relatively well so that means how a face is oriented in the 3d world can be understood from the normal vector that we create for that face ok here I mean to say by face a face is a flat as a flat planar polygons the planar polygons is actually it's any any direction that is perpendicular to the flat planar polygons is identified to be its normal direction so we'll be computing the light source direction and the normal direction and we'll be taking the angle between the two and from by that we will be able to compute in what direction the face is oriented with respect to the light source thereby we'll be able to find out how much intensity with what intensity the face is to be lit with so that's fundamentally important when we deal with many objects in the 3d world and there there are light sources illuminating the 3d objects and say we'll have to compute how much of light is incident on a particular face so maybe all of you might have heard about hard names of 3d modeling tools like 3d studio Max Amaya I have got tools like combustion so there are many 3d modeling and animation tools that you might have heard about in open source we've got a tool like blender so all these tools let you create 3d objects and then orient them and then position them and then create all the lights create all the various textures create say for example various other objects maybe other reflective highly reflective or transparent objects so you can you can drag-and-drop many basic 3d objects and you can do a number of things with 3d modeling tools and we are trying to understand how a tool are like 3d studio Max and Maya does this job so we are trying to understand the background theory of 3d objects now the normal vector as you can see here it's the normal vectors are indicated with the numbers 0 to 6 because there are six or seven faces and for the faces you can see the normal vector components are 1 0 0 0 0 1 and so on so we can compute normal vector to a particular face by taking three now by taking two Victor's on the polygonal face and then taking a cross-product of them and the cross-product will give the direction which is perpendicular to the plane containing the two vectors so how you can compute normal vector is by take any two vectors on the polygonal face and then do a cross multiplication and whatever you get is actually the normal direction that is perpendicular to the plane containing the two vectors so that's how we can compute normals and it is so important in 3d modeling that's about the mesh modeling or mesh model so much of so many 3d animation movies happen actually using mesh models or mesh models are created because they're very simple they're flat planar polygons you can store them easily the data structure is very easy to represent and it consumes less time and volume so obviously they are the most sought after tools for modeling 3d objects the other tools that we can look into for modeling 3d objects using surface modeling are splines splines are actually purely mathematical objects and splines we can splines are actually more fundamental in the sense they can be used to model 3d objects which are flat planar and also which are very much curved and which have a lot of curves and sir curves and maybe an SPL like or maybe very curvy so these surfaces we can model using splines splines if we start with we can talk about fundamentally the hermite splines then we'll be talking about Bezier splines and then we'll be focusing on basis splines and lastly there are nerves which will not be discussing a depth because NURBS is an extension of basis splines splines even in CAD design even in automotive design everywhere splines are used but not as curves but as surfaces so first we'll be talking about spline curves and then when we extend spline curves in two different directions we get a spline surface so for example we can model clots a cloth with spline surface we can model water with spline surface we can model wavy objects or curvy objects with spline surfaces so we can create a spline surface and we can wrap the spline surface around any irregularly shaped object so spline surfaces are most commonly used 3d modeling tools which are meant for flat which are meant for what is called surface modeling okay if you look into the definition that makes up a spline a spline is any composite curve formed with polynomial sections satisfying specified continuity conditions at the boundary of the pieces maybe it's a big definition let me read that again any composite curve formed with polynomial sections satisfying specified continuity conditions at the boundary of the pieces so basically a spline curve is not a single curve it is many smaller curves attached together end to end will make up a spline curve so let me repeat that again a spline curve is not a single mathematical curve basically it is made up of many smaller curves that is will be taking many smaller curves and will be joining them end to end to form a spline curve so spline curves are fundamentally a piecewise polynomial sections of many curves which are pieced together to form a single continuous smooth flowing curve so the first spline curve that we'll be discussing here today is the hermite spline okay followed by that we'll be talking about bezier spline and in the next session we'll be talking about Bezier splines and later about basis splines so let us look into some terminology maybe to familiarize you with the South with the topic the splines have got terminology like parametric forms so we'll be using parametric form to represent a spline curve or a spline surface control points convex hull boundary conditions order and degree are four polynomials functions we know that we have got order and degree degree is the highest power to which the variable is rised and order is actually always one higher than the degree okay and approximating an interpolating type of splines blending functions the word blending functions will be often discussing in splines local control is a concept is a kind of feature of splines and basis splines the Cox deeb or recurrence relations based on which will be formulating the spline equations so let us look into the parametric form for how to represent a spline using parametric form I hope you remember the discussion on say using Liang Barsky line clipping procedure where we have understood how to represent the line in parametric form here we are going to represent a curve in parametric form and the curve is expected to R is assumed to be lying in the 3d world so that means it will not only have it has got X it has got Y and it has also got SZ so and the parameter being u so U is always the parameter as we know that the parameter U ranges in the interval 0 to 1 if you remember the discussion on parametric form for a line when we talked when we discussed about Leon Barsky line clipping procedure in the previous lecture session so how to represent a spline if you look at the equations shown here let X of U and why of you and zero view B three variables and the U is the parameter so which is represented by ax u cube B X u squared and C X U and D the components ax BX CX and DX are the coefficients and Y of U similarly is represented by a y u cube dy u squared C by U and D Y so these are the components of the y y parametric form for y in the parametric form for the Z is represented with a side you cube bz u square c said u plus DZ and now a curve P of U is a function of a vector u cube where a is the a vector and whose components are ax a by a set and B is B vector whose components are B X B Y B Z and similarly C and D and a u cube plus B u squared plus C u Plus D if we look at the equation that makes up this spline curve in parametric form the degree of this curve is cubic that is it has got a degree a 3 3 is the degree for the parameter u so we can call this as cubic curve so a cubic curve in parametric form can be represented with the equation P of U where u is the parameter is equal to a u cube B u squared plus C u Plus D and let us see how the splines are represented in various types of splines that we have other we can talk about splines can be categorized into two types fundamentally one is interpolating splines and the other type is approximating splines what are interpolating splines and what are approximating splines if we can look at here interpolating splines are those planes that touch all the control points so that have to exactly pass through all the control points while approximating splines are those planes that need not pass through exactly all the control points actually what are these control points and why should a spline pass-through you might have this question knob now what are these control points and suddenly they have come a see how do we design our how do we create a curve the shape of the curve is what we have to decide so it is that we wanted to decide the shape of the curve we did not want to take some curve that is generated by a mathematical equation we wanted to generate a curve of our own so how do we generate a curve of our own choice so for this we are going to place positions we are going to place a sequence of points in space so in some order and we want a curve or we want to derive a curve equation that either approximates our that either interpolates these points and these points that are going to define our that are going to control the shape of the curve are called control points if we look at maybe you can recollect you know day-to-day life we've got we've got Ron goalies we've got columns these things I think you might have noticed that the during occasions festive occasions the household the ladies they'll be actually putting this Ron goalies or columns like they put a lot of dots and they try to approximate these dots with curves so with various shapes of their choice so that's basically a spline curve fundamentally we want to define our own curves and we are going to place some points that are going to direct our that are going to control the shape of the curve and these points are control points and if a curve has to exactly touch and pass through all the control points they are interpolating splines and if a control if the control points are just to be approximated that is the curve should still follow the path but need not necessarily touch these control points and we say that kind of splines are called approximating splines and we have examples for interpolate in splines which are hermite and cardinal and we've got bzs basis and NURBS fundamentally many of the popular spline curves are approximating splines only so the as I said a spline is basically a combination of many curves that is you'll be joining to many smaller curves to make up a spline curve as we discussed before but how do we ensure that where they join that is they are joining into n how to curve sections when they're joining at some point how do they how should they join are like what in what manner they should join what is the degree of each of these curves should they have same degree are they're of different degrees and with what smoothness they should join at the boundary should they join smoothly or should they just join at the boundary and there are so many questions so we will be actually basically taking many smaller curves and we'll be joining them at the boundaries end-to-end so for that we have got to estimate our to check whether the curves are joining smoothly we can check c0 continuity c1 continuity and c2 continue there is C squared C 0 C 1 and C squared continuity the zeroth order the first order and second order continuity two curved sections satisfying c0 continuity are like this as shown in the first picture which is the curves just meet so it is something like one point is common for both the curve sections they may be two different curves are two different things but they are just joining at a given position end to end and if they have to satisfy first order parametric continuity dish the tangents to the two curved sections add this boundary where they're joining should be equal let me repeat that so if two curves have to join a bit smoothly at the point at the boundary here the tangents to the two curved sections add this point must be equal and any to curve section satisfying C square continuity look as if they are not actually two different curved sections but they're actually one single curve sliced up and then joined together later so imagine you've got a single nice flowing curve and now you're slicing it up and then again joining it together so then to curve satish satisfy the C squared continuity we mean to say that they're joining very smoothly at the boundary and the curvatures of the two curved sections at the boundary will be equal and the curvatures here means their second derivative so we'll be taking the second derivative and for the two curved sections at the boundary and if they are equal we say that the curvatures are equal and we feel as if the two curves are not from two different families are they they belong to one single family of curves so they gel up very smoothly at the boundary the types of splines as you can see here in this slide there are said four control points p0 p1 p2 and p3 and you can see a dotted line so connecting P naught P 1 P 1 P 2 P 2 P 3 and that line is called a polyline and the spline curve is actually this smoothly flowing curve from P not to P 3 there is another example shown here which is which has got four control points again p0 p1 p2 p3 and these control points are given a serial sequence number and again as you can see the spline curve follows that order so order is very important so when we place points we should mention the sequence in which the spline curve should take the sequence that spline curve should take are either it is an interpolating spline curve are it can be an approximating spend curve the sequence is important and that with that we come to the summary of this session how to create where this where we have learnt how to use mesh models for objects as we have understood that mesh modeling is one of the easiest and simplest techniques to model the outer surface of any object but when we try to model spherical surfaces are may be surfaces that are not flat or planar we get only approximation a we tend to see only approximated shapes but not the true shapes so we have seen the lists that are used to represent the mesh like vertex list edge list faceless normal list and from there we moved to splines and introduction to splines is what we have learnt in this session thank you 
_j1X98LhBZE,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-09T04:57:36Z,Bresenham's Line Drawing Procedure (CH-10),https://i.ytimg.com/vi/_j1X98LhBZE/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT34M51S,false,447,3,0,0,0,welcome to the epod Shallah lecture series on computer science for postgraduate students will be discussing the graphics and visualization our subject is computer graphics and visualization this is our third session in the series as we discussed in the previous sessions in the lawsuit the last two sessions some of the very basics and fundamentals in the first session and followed by that in the second session we talked about DDA line drying procedure it's it's a simplicity it's a most simplest algorithm and its drawbacks so in this session we will talk about the bresenhem's line drying procedure which is a more efficient procedure than the DDA procedure and which whose strength is that it doesn't have floating point calculations that are required in the case of DDA procedure so there is no rounding off required there is no floating point calculation required and so it is more efficient and it is also more accurate than the DDA procedure so let us discuss in this session the bresenhem's line-drawing procedure so present hem happened to be one of the most popular scientists and who has given some of the very useful algorithms like bresenham's line drawing procedure and bresenhem's circle drawing procedure is also very popular till late 90s and later another type of procedure there is a different type of procedures were developed and more advanced procedures were developed for circle drawing so let us discuss today about the bresenhem's line drawing procedure so to start with how brezin ham is more efficient is that it avoids floating-point calculations and so no rounding off and no other errors which other errors and it is also more accurate so imagine you are given a line whose slope is like this say for example M is less than 1 so if you recollect the discussion on D real line procedure we talked about various line types so lines are inclined towards x-axis or towards y-axis are maybe the line slopes are equal to one sometimes dy is equal to DX so whatever be the line types so depending on how the line is inclined we are going to sample the line either along x axis or along y axis so imagine a line who which is inclined along x axis so we follow the same analogy here are the same discussion like we are going to sample the line along x axis at the unit intervals if the line is more inclined towards x axis now let us assume that we have point on the line that is already plotted that means we know a point on the line whose coordinates are known to us let us say the coordinates are XK and YK and for which a pixel is plotted on the line so let us see how present hams procedure tackles this problem of finding more accurate pixels along the line path here our initial assumptions start with assuming that the line has slope less than 1 and we are going to sample the line along x axis at unit intervals so the same arguments are valid like the next X value because for the sampling along x axis is actually XK plus 1 so the next to indicate next x value we give use a notation XK plus 1 and whereas k plus 1 all in the suffix whereas this indicates that XK plus 1 by the side indicates that XK is the previous value and we are adding 1 to it so always whenever you we use the word next we use a notation k plus 1 in the suffix okay so start with a known point on the line say XK comma Y K that is which is a known computed point on the line so our aim is to compute the next unknown point on the line let us indicate that as XK plus 1 comma YK plus 1 so how do we compute the unknown point on the line the next unknown point is by variable which we call it as decision parameter so for every next computation or for computing every next value we'll be using this value of a variable called decision parameter and whose value will be helping us to compute the next x value and the next y value so let us see how do we compute the next x value in the next well Y value based on the decision parameter so what is this decision parameter we'll understand that at depth here see this slide here for the next X position that is imagine you have got a line which is inclined towards x axis which is more inclined with the x axis or more towards x-axis so we have a known point on the line which is already plotted say XK YK no because the line is more inclined towards x-axis we are going to sample the line along x axis at unit intervals there is a best possible sampling frequency so for the next x value on the x axis for the next x value on the x axis so we are indicating that with a notation XK plus 1 because as we know that the next x value is 1 higher than the previous x value so how do we compute the corresponding Y value so the y coordinate for this x coordinate that for the corresponding y coordinate can be either YK plus 1 or YK so as you see here the possible pixels that we can plot on the monitor is YK or YK plus 1 because as we know that all monitor pixels are integer positions so even if we compute using some point-slope form that Y value is somewhere here between the two integer positions we cannot actually plot this point so this is what is called the theoretical position so here y indicates the theoretical y coordinate which cannot be plotted on the monitor so we have to choose either YK plus 1 the upper pixel are the lower pixel now how do we decide which of the two pixels is to be chosen so that we can better approximate the theoretical line path so here you have to understand one important point whatever pixels that we are computing along the line path are an approximation to the two line path an approximation means we are trying to find the best possible approximation so always we get an approximated line we never get the true line so that's understood so we always get an approximated line so how to choose whether Y K or YK plus 1 is the next possible position so for this here we will be computing the vertical distance here between y and YK and the vertical distance between y and YK plus 1 and see whichever position is closer to the theoretical y-value that is why if this is closer YK plus 1 position is closer we will be plotting that or if this theoretical position is close to the lower pixel YK then we'll be plotting this so in the diagram that is shown the upper pixel is more closer as if you've compute the distance D upper we call this D upper D upper is a distance between y and YK plus 1 D lower is the distance between y and YK whichever distance is smaller so we'll be choosing the corresponding pixel so that's the theory behind the bresenhem's that that's the whole idea that's the principle of bresenhem's line drawing procedure so for computing every next position on the line we will be checking whether the true theoretical position of the true position on the line is close to either of the pixel so to whichever pics pixel position the true theoretical line to theoretical version is closer will be choosing that position so it will be clearer to you when we solve a problem and we are going to do a derivation on this and how to compute the decision parameter and so on so oh we will be having more clear idea when we solve a problem at the end so as you see here the next position to be plotted is XK plus 1 comma Y K so the y-coordinate is either YK or YK plus 1 so how do we decide whether it is YK or YK plus 1 the x-coordinate is the same the y-coordinate is chosen based on the decision parameter so let us come to let us check how this addition parameter is actually computed and in the derivation will be in doing this so a decision parameter is basically it is denoted as P suffix K helps us decide which of the pixels to be chosen okay so and whichever pixel is close to the theoretical position will be choosing that pixel okay so the next X so next here is always indicated with K plus 1 in the suffix and because we are confident that the line is more inclined towards x axis we are going to sample the line along x axis at unit intervals so the next X is nothing but XK plus 1 while the next y is YK plus 1 which is y K or YK plus 1 depending on the decision parameter so let us see how we do the derivation or how do we find equations for the decision parameter and what is the decision parameter let us start the derivation with Y is equal to MX plus C that is the slope point for me equation for a line here this is the theoretical y-value and in the place of X it is XK plus 1 so XK plus 1 is the current X position for which we are computing the Y position so that is why the K plus 1 is all in the suffix and we know very well that K plus 1 XK plus 1 is nothing but XK plus 1 and the upper d upper is if you look at this diagram shown here the upper is the difference between y and YK plus 1 okay so which is YK plus 1 minus y because the difference is to be positive so D lower is the difference between the Y and the so that is what is shown here y minus YK and you can expand the upper further like this YK plus 1 minus y is shown here above so for y you replace this Y our substitute for y this equation like M into XK plus 1 plus C so YK plus 1 minus M into XK plus 1 minus C so because it is y YK plus 1 minus y so these two terms become minus and DLO here similarly is y minus YK 4y substitute this relation here above which is M into XK plus 1 plus Z so M into XK plus 1 plus si minus YK and we are now taking the difference and then to compare the d lower and the D upper so one important decision of one important step that we're doing here is than to compare the magnitudes of D lower and deeper so if D lower is greater than the upper so what is that we do is we'll be choosing the upper pixel if D lower is less than the upper we'll be choosing the lower pixel so if do lower is equal to D upper we can be choosy about we can choose either of the positions so you can follow one convention throughout you can choose always either the upper pixel or always either the lower pixel and so on so if we come to the difference here will not be actually comparing d lower and DF / rather will be taking the difference of these two magnitudes and we'll be finding the sine are checking the sine of this difference operation that is if d lower - d upper greater than 0 that does mean that d lower greater than v upper so dealer greater than the upper means will be choosing the upper pixel so similarly if d lower minus d upper less than 0 that means the difference operation is less than 0 it is negative that means d lower less than the upper choose the lower pixel so as we got the equations for d lower and the upper already here take the difference of these two DLO a - dieppe so which gives us an expression like this two times M XK plus 1 minus 2 YK plus 2 C minus 1 you can sit and you can follow when you start doing for yourself you'll be able to resolve these equations you'll be able to solve these expressions more easily when we take when you take a pen and a paper and note it down and keep resolving these equations so one important step so here brezin ham was very very clever enough in taking one important dish in that is how to avoid floating-point calculations or how to avoid completely the floating point values so bresenhem's was clever enough here at this exact step to substitute for M the Delta Y by Delta X because M is the culprit here that is M is a division so whenever M has got any whenever there is a division in an expression or in an equation it causes floating point values so divisions are to be avoided so bresenhem's was clever enough in avoiding this division by substituting for M Delta Y by Delta X and taking this Delta X on this side cross multiplying Delta X on either side and so that the division is altogether avoided so if you look at this step this Delta X is multiplied on to the left with Delta X into D lower minus D upper and is equal to you multiply Delta Y with the rest of the with the term 2 m into XK plus there is 2 XK plus 1 into Delta Y minus this Delta X is to be multiplied on this side also Delta X is to be multiplied on either side ok so 2 Delta Y XK plus 1 minus 2 Delta X into YK plus Delta X into 2 C minus 1 so this term is what you should remember and brezin him has actually replaced this term d lower minus d upper into Delta X as the death and parameter PK why it is called the decision parameter ease because the difference of the operation dealer and DF / is going to tell us whether the lower pixel is to be chosen are the upper pixel is to be chosen that is if d lower - d upper is less than 0 that is sine bit so check the sign bit of this difference operation if the sign bit is set that means the lower pixel - d lower - d upper is less than 0 that means d lower is the more distance is smaller so it is closer to the lower pixel okay so the lower pixel is to be chosen so the sign bit of this operation is always to be verified so the PK is now called the decision parameter and PK is nothing but the difference operation d lower - DF / multiplied with Delta X now you can ask like say why should we go with Delta X there is some other additional term Delta X what should we do with it for lines whose slopes are inclined whose slopes are positive you can actually you will get Delta X to be positive so positive multiplying with some positive or negative is not going to affect the sign of the difference operation so Delta X is not going to affect the sign of the difference operation d lower - d upper so we can safely ignore del X and that is why we call this parameter as pk a decision parameter so it is just enough that you take the sign of the difference operation okay so here the left part of the equation has been replaced with PK which is nothing but del X into D lower - D upper it is equal to the right side part is left as it is and we know that because we are sampling the line along x-axis at unit intervals XK plus 1 is equal to XK plus 1 so but Y is to be decided whether it is YK plus 1 or YK depending on the sign of PK okay depending on the sign of PK so substitute for XK plus 1 the next x value as XK plus 1 so this equation reduces to 2 del Y XK minus 2 del X YK plus 2 del y plus del X into 2 si minus 1 so that's how this equation reduces to and if you consider the rightmost part of the equation here del X into 2 C minus 1 del X is a constant for a given set of endpoints del Y and del X are constants C is a constant for a line this is an intercept C is the intercept y-intercept so this whole part is a constant which can be conveniently replaced with the constants a B so PK is nothing but 2 del Y XK minus 2 del X YK plus B because program has to be more efficient and we want always equations that depend on the previous equations for faster calculations so we require a recursive equation so that is we always want decisions based on the previous calculation so recursive equations will be much more faster and simpler so that is why what we are doing are actually taking the next decision parameter C in the suffix K plus 1 K plus 1 in the suffix indicates that it is the next decision parameter and wherever there is K we are replacing that with K plus 1 in the previous equation and the P you take the previous equation where ever there is K replace that with K plus 1 so which is 2 del Y XK plus 1 minus 2 del X YK plus 1 plus B now take the difference of these two decision parameters PK plus 1 minus PK which is equal to 2 del Y XK plus 1 minus XK minus 2 del X YK plus 1 minus YK so you can sit and take these and while you write it down you will have more clarity and you will not miss the discussion and the derivation for this so all the steps are given in detail here so you can follow that carefully so the next dish in parameter is actually so take this PK plus 1 is minus PK is equal to is what is the previous equation take this PQ onto the right so what do you get is this so the next station parameter is dependent on the previous station parameter plus some additional terms so the next station parameter is given by PK plus 2 del Y if you notice this difference here XK plus 1 minus XK is actually XK plus 1 is the next X value which is 1 higher than the previous x value so XK plus 1 is nothing but XK plus 1 these two terms XK and XK get cancelled and you're left out with one here so PK plus 2 del y -2 del x YK plus 1 minus YK this term remains as it is now our aim is to check our verify our computer derive what this YK plus 1 assumes our whether it is YK or YK plus 1 so this is the next y value so the next y value will be decided based on the sign of PK okay so the sign of PK is to be checked now let us come to case 1 case 1 says that let us assume if PK is less than are equal to 0 PK here is what d lower minus D upper d lower minus d upper less than 0 that means d lower less than the upper d lower less than the upper means the lower pixel is more close to the theoretical line path so will be choosing for the next y YK okay if you remember the first graph of YK & YK plus 1 are to be decided at which of these two is decided based on the sign of the difference of D lower and the upper so if D lower minus D upper less than 0 this pixel is more close so we say that YK is the pixel position y coordinate to be chosen for the next Y so that's what we have done here so case 1 if PK is less than 0 the lower pixel or that is for Y you will be choosing the next way you'll be choosing YK that is the next Y is actually YK so when the next way is YK are now compute the equation for the next addition parameter replace this YK plus 1 with YK so why k YK get cancelled and this whole term becomes 0 and you are left out with the next station parameter is equal to PK plus 2 Delta Y so similarly you do this for the PK greater than 0 case in the previous case we took the case less than or equal to 0 now PK greater than 0 PK here means D lower minus D upper d lower minus d upper greater than 0 that means d lower greater than DF / that means choose the upper pixel for the Y so this upper pixel is the YK plus 1 position and the next pixel to be plotted is XK plus 1 comma YK plus 1 and as you see here the next y value is nothing but previous Y value plus 1 as we replace that with and if you compute the next addition parameter replace YK plus 1 in this equation here replace YK plus 1 with YK plus 1 and you are left out with this equation that is you can then you solve that what you get is PK plus 1 is equal to PK plus 2 Delta Y minus 2 Delta X so finally we got the two cases and quickly if we summarize this at that is if we look at the decision parameters we are using the notation K in the suffix so that means unless we are also using recursive equations so every next addition parameter is dependent on the previous station parameter so we have to start with some known initial parameter isn't it so that means we have to start with K is equal to 0 unless we know the initial decision parameter we cannot compute the next dish in parameter and so on so how do we go with P naught how do we calculate P naught so in the equation for P K is equal to 2 del Y XK plus 1 minus 2 del X YK plus 1 or you can take this equation to Del Y X K minus 2 del X into y k plus 2 del y plus del X into 2 si minus 1 replace the subscript K with 0 so that's where that's how we replace subscript with 0 so that is p0 is equal to 2 del why X naught minus 2 del X Y naught plus 2 del y plus del X into 2 si minus 1 so that's what is mentioned here in this slide k with 0 replace K with 0 and compute C as shown if you replace K with 0 you have this equation as 2 del Y X naught minus 2 del X Y naught plus 2 del y plus del X into 2 si minus 1 and the C is colored in red to indicate that this is the odd man out in this entire equation if you see there are Delta XS Delta wise X case Y X Y and so on except one term which is C which is an odd man out and we have to replace C with some other term let us see how to compute that C so we know that from the slope-intercept form we have this equation y is equal to MX plus C and any point on the line should satisfy this equation y is equal to MX plus C so as we know that X naught y naught is the first known point on the line you can substitute here for y y naught for X X naught and we can write this equation now C is equal to M is replaced with Delta Y by Delta X so C is nothing but Y naught minus del Y by Del X X naught and in the equation here replace C with the colored in red C is colored in red replace C with this expression y naught minus del Y by Del X x naught so when you sit and solve it if what you would get is if you solved where these steps it would reduce to a term an expression 2 del Y minus del X so P naught is a simple expression with 2 del Y minus del X so the initial dition parameter is computed and the next station parameters are computed based on the previous station parameters and if the point on the theoretical line is equidistant from either of the possible pixel locations then either of the pixels could be plotted so whether if PK is less than 0 you are choosing the lower pixel if P K is greater than zero you are choosing the upper pixel but if PK is equal to zero you can choose either of the pixels as I said earlier you can buy can even follow a convention throughout that is choose always and a the upper pixel or choose always the lower pixel it's up to you but follow a convention throat okay so the steps can be summarized for M less than one case like this so we are choosing a case here M is less than or equal to one and we are going to sample the line along x-axis at unit intervals and the first step is to input the two end points for the procedure is summarized here you can look at this carefully the input is the two end points of the line the next step immediate next step is to compute P not using the relation to del Y minus del X and check the cases depending on the sign of P not now if you are getting P not to be negative or positive or maybe equal to zero so based on that we will be choosing what is the next Y value okay continue with the next station parameters till the end of the line is reached so that is how it is as simple we can use the equations in the previous cases that were mentioned case one and case two okay so that is how we do the derivation and now the question is of what will happen to the relations here when the slopes are greater than one positive negative so we have seen an example or a derivation assuming that the slopes of the lines are less than 1 that means the lines are more inclined towards x axis so what will happen to the derivation to the equations if M is greater than 1 or M is negative and so on so let us summarize the steps for M less than one first and then we will move to the other cases so case 1 when M is less than 1 P naught is 2 del Y minus del X and if PK is less than equal to zero that means the lower pixel is more close to the theoretical position so we'll be choosing for the next y YK so the next y is YK and PK plus one is PK plus two del Y for the second case when PK is greater than zero the upper pixel is to be chosen and the next Y is previous Y plus one and the next dish in parameter is PK plus two del y -2 del X and if M is greater than one so without doing any derivation we can come to one important conclusion because if M is less than one the line is more inclined towards y axis and we are going to sample the line along Y axis at unit intervals and we'll be following the same set of procedures and equations so if you start doing the derivation for this case you will end up with equation for P naught to be 2 del X minus del Y that is exactly a reversal of the X's and Y's so x and y get interchanged so wherever there is X that will be replaced with Y wherever there is y that will be replaced with X so P naught is equal to 2 del X minus del Y if PK less than 0 for this case M greater than one case if PK is less than or equal to 0 Y will be incremented by one unit so we don't have to worry about why I always get gets incremented by one unit because m is greater than one while X is to be decided whether it is XK or XK plus one because the sine is less than or equal to zero that means it indicates that the left pixel is to be is more close to the theoretical position so that is X K so we chose earlier the lower and the upper to indicate the Y's but here for the X values we have to compute because the Y's are incremented by one unit we use the term left and right to indicate XK and XK plus one okay so the derivation goes similarly and we end up with equations where the X's and Y's just get interchanged so all the equations are summarized here for various cases pause negative and so on and so forth one important thing that all of you should remember is that you should remember is whenever you have to compute for the negative case when M is negative when M is negative do not substitute for del X and del Y's then the corresponding negative values take only the magnitudes so our aim is not to actually take the signs for del 1 del X there are no way to be taken you can take only the magnitudes of del Y and del X and it for the negative case particularly you have to be more careful because you will get all negative values or all positive values that's a wrong sign so one important thing observation about Bres names is the sign actually flips between positive negative and zero so it actually fluctuates between positive values negative values and the zero value so it fluctuates so it won't be the two positive always positive or it won't be always negative yeah as you see in the slide here for all possible line types everything is summarized in the slide so if M is less than 1 and M is positive what should you do what set of equations you should use if M is greater than 1 and M is positive what set of equations you should use for the PK less than 0 and PK greater than 0 case and the same thing is summarized for the negative case that is FM is less than 1 and M is negative that means the line is inclined towards x-axis but while X increases and white decreases so that's what is a negative slope line so here the set of equations are given here you can refer to these equations and as you notice here there is the modulus the Delta wise and Delta X's you should not be using even if slope is negative you should not be actually going for negative values you should be using only the magnitudes you should be taking only the magnitudes for m greater than 1 and mod M greater than 1 and M negative we have the other set of equations shown here so you can I sit and make a note of all these and so that for whatever be the line type you should be able to choose the right set of equations Oh in this session of what we have learned let me summarize let us just take a recap and we have started with how bresenham's line drawing procedures solves the problem of that is a more efficient more better lines can be drawn with bresenham's procedure is because Bresnahan has cleverly avoided floating-point calculations by replacing m with del y by m with del y by del x and later taking away the division on to the other side and doing some cross multiplication and the next thing is we're blessing m was clever enough us to use recursive equations and then everyday using a concept called decision parameters so we get more efficient lines and the errors are issues of rounding off errors are nothing like that exists in this case and that is what we have learnt in this session so we have outlined the best names line drawing procedure for all possible line types and also noted the advantage of Christams procedure over the DDA procedure thank you 
cw-zFwoJBiA,28,"Designing games in Virtual Reality: Common problems and modern approaches to solve them.
Stefan Doychev, Bulgaria",2018-08-26T20:28:33Z,"Scientific Visualization of Modern Computer Graphics, Gaming and Animations 2018 | Tokyo, Japan",https://i.ytimg.com/vi/cw-zFwoJBiA/hqdefault.jpg,Stefan Doychev,PT21M59S,false,50,3,0,0,0,hello colleagues and friends participants at the conference of scientific visualization of modern computer graphics gaming an animation 2018 my name is Stefan Deutsch if and for me it's a great pleasure to be present at this forum today I'll be speaking about designing games in VR and more specifically how to deal with the most common problems everywhere developer is facing today I'll address some modern approaches how to solve those problems and I'm sure some real-life example from my practice as a lead developer of the award-winning VR game San Walker before I begin with my presentation I would like to present myself I am part of a campaign a distributed game studio and I'm currently leading the development of our forest game San Walker a great accomplishment for my team and me was the very prestigious award I won the last game developers conference best in play 2019 the scenography our game would be in the focus of today's presentation as most of the examples I'll talk about have been actual problems we faced during development if you got any questions or on the presentation or want to get in touching with me please drop me a message using the contact currently on the screen let's jump straight to the problem the traditional game design rules and guidelines do not work when creating and content for the virtual reality platform due to the limitations of the hardware some specifics of the new platform and the immaturity of the current game design and development tools the VR developers face commonly shared problems the problems are discussed in details they are the state of hardware used for our development today and the limitations it has the way is still here enough for most of the users and this leads to disruptions of the comfort of the players another common problem is the feeling of dizziness most of the VR users Express after several minutes of play this problem is also described as motion sickness underline the importance of the sound design in every future edit application out there and the ever increasing need of quality user interface and user experience finally I'll show some optimization techniques used in the development of Sunoco which were very useful in terms of increasing the average frame rate of the game and this improvement in the frame rate led to big increase in the general perception of the experience in the game a very common problem related to development potential direct application or virtualized game is the feeling of dizziness or sickly side effects after several minutes of playtime this problem is also known as vaction the main reason for feeling such sickness is the difference between the moon the virtual reality but not in real life by design the main setting an action in soccer was based on a third-person camera perspective and a lot of prototyping was needed to design a good movement system in the virtual reality that doesn't make the player sick after several attempts it quickly became obvious that a fixed camera position would be required in order to resume the feeling of action for all of our players in the video now playing we can see our first prototype a static camera in VR showing the main character being controlled by the player there is no movement that would confuse the brain so no business is experienced although the goal was accomplished and there was definitely no motion sickness the player level was very limited and the player couldn't go further and what he says the idea of a second approach came as shown in the second video the camera remain static but would change its position to show different parts of the level properly positioned cameras and the edges of the zone visible to the player give the impression of smooth transition unfortunately during the play testing we found that you spent 90% of your time looking down with the headset that caused fatigue in your neck muscles because of the current generation of headsets is not yet lightweight and a further improvement was necessary the latest movement system implemented and the one steers today's and Walker incorporated the only known approach of camera changing positions on the level but those positions were not always overlooking the player from high locations instead some cameras were positioned at eye level of the character or even below that point giving the player the opportunity to relax the next muscles from the weight of the VR equipment it's important to note that the design of this movement system in VR was completely different than in other traditional platforms and it took us six months to design a system that works after discussing the main and most serious issue with most of the VR games today it's time to note some other commonly faced problems by nearly all the future relic developers the current generation of hardware even though always on the increase in capabilities and imagers resolution is still pretty young and the resolution is not quite a much for the resolutions commonly seen in PC or console games today despite the low resolutions available the final product can still be pretty impressive in look and feel when the production phase is done although most of the current game design and development also still pretty early in their faces and some of them are quite immature we can witness a growing trend in their quality in number so to be very optimistic about the future arsenal of tools the VR developers would be able to use the importance of the sound both ambient sounds and sound effects is crucial for deep satisfactory and engaging interaction with the virtual reality environment not only the players who use the game sounds torrent themselves in the game environment but who also create subconscious connections between sounds and compartment Indian characters patterns in the behaviour of the enemies etc as the virtual reality versus completely new medium in which the player can truly submerge it is our goal was developers to deliver a deeply immersive experience for example let's take a look at this beautiful mountain and imagine we're walking on top of it naturally the winds would be blowing from different directions there might be random sounds in the distance or even some animals might be roaring somewhere far away there are no isolated sounds in the real world but combinations of many different sounds mixed together and it would be highly improbable to create an immersive experience if we include only one sound source in our game we could build on top of this small example and also say it would be a lot better if the different sound sources have different impact on over sound perception on the player the winds from North might be a lot more severe for their knobby head also the wind listing might become more intense and the size of an eventual storm increase meanwhile the certain who hit the lesser of the storm sounds are another important fear in which the sound design has to be dispersed is the responsiveness of the in the virtual reality the player has the opportunity to interact with the surrounding area in many possible ways and we have to allow him to receive feedback about his actions every single time he's interacting imagine was created a game in which the player he has to interact with a rusty lever as shown in the image the lever is really rusty and noisy so even the slightest touch has to be registered of course if we play the same sound every single time the lever is moved the player won't have any feedback if he successfully moved the lever until the required position in the game hence we have to strive to create natural and responsive sounds with respect of the user always put him in control and play appropriate sounds depending on how fast or slow he is interacting with environment and also provide appropriate feedback when expected action has been successfully done there is a thing that even the greatest products are doomed to be forgotten if they're not intuitive their users and this is especially true when it comes to VR application creating a good and solid user interface is one of the greatest challenges the future relative developers face the traditional approaches known from creating an user interface in 3d and 2d game worlds simply don't work here the usual flat display is now replaced with curved indicators the hilton stamina bars are now replaced by actual changes in the feelings of the playable characters and the standard and coming tutorials are now getting discarded by in-game actions or examples well now take a look on several decisions we took during the development of our game those decisions formed the user interface and improved the general user experience of the a local project in this scene we could see that over one of the purple blocks there is a button be appearing this is an example of a new way of creating and showing hint to the players how to interact with environment when we are it will only show when older requirements are met in this specific case a puzzle has been solved in the second example we notice that the costume of the main character has some glommed elements those elements only glow when the hearing is close to an interesting object even a hint to the player to expect something new in the game to occur it is also an example of discarded religion of UI elements as a possible approach to mark this event in a traditional 2d or 3d user interface would be to put an exclamation mark somewhere in the curve for example such hopes of help elements to in-game elements would become more and more often for example instead of showing an in-game timer to the player he could be given a real stopwatch clock counting down the remaining time a final example to illustrate better the suggested removal of the helper is the implementation of those electric light flashes you see next a character on the screen in combination with the getting hurt sound effect being played in the game those flashes are a clear indication of Kell being lost instead of traditionally showing some fading - one Hart signs up and down this approach greatly improves the player emotion and satisfaction from the game world in this final part of my presentation I would like to present you an overview of some of the optimization techniques my team and me we've used to improve the framerate of our game it is important for the VR games to offer a constant frame rate of about 90 frames per second if the frame rate drops below discount our research showed that our players immediately noticed his change and the Disney's effect begin to occur it is important to say that those optimization techniques showed good results and made sense in the context of our game but they might not be valid or might not bring the same results with other games or their applications being optimized remember to always use a proper profiling tool and base your optimizations predictions and results on actual observations rather than feelings or subject subjective estimations the first optimization technique which led to crucial improvements was to reduce the number of draw calls made by the engine because of the nature of the graphical processing units or GPUs they're usually slow but commander changed their state while drought months are pretty cheap by combining meshes and materials we've been able to reduce the draw caused by the GPU and increase the final frame rate by 25% also remember to bunch draw close whenever possible and one very easy way to do this is to use the starting bunching in case you're using energy you just have to check a flag as shown in the picture behind it is usually a good practice to reduce or even remove the faces object or the expensive geometry that will never be seen in via try to stick to this practice as much as possible or even better don't waste unnecessary efforts to create a character object that would be never shown to the public for example if our players will never see the bank of a very beautiful wooden frame because it's against the wall we don't want any of those back frame faces on the model I read optimization strategy is to implement the mechanism that draws different levels of details based on the distance to a given object this technique is called level of detail rendering or LOD rendering and allows us to reduce the number of triangles rendered for an object as its distance from the camera increases you can see an example illustrating the idea very good in case your product is not based on a game mechanic that requires live interactions with light sources or their shadows you could always paint or light map some of your light sources install components tend to be heavy computational wise and lead to unexpected drops in the framerate also try to reduce the excessive light sources whenever possible generally speaking there are many more techniques that could help you in your mission to get a solid and decent frame rates for again some of them worth mentioning are the occlusion culling and until icing but the golden rule in the optimization will always be to trust your profiler and to use it often dear colleagues and friends thank you for your attention for me it was absolute pleasure to be able to present you this brief overview of the VR development area and its current state I would like to end this video with a trailer of the game I have mentioned so many times during the presentation Sun Walker please enjoy and don't hesitate to send me questions or inquiries if you got any enjoy the rest of the conference and have a great week in Japan say ah what would happen if global warming becomes a reality [Music] son Walker [Music] you play as an a lone survivor guiding her in her adventure we find clues about what happened to her in the world around her by manipulating the environment you are protecting earth from the burning Sun [Music] a never-ending quest in which she meets a lot of friends [Music] son Walker is a VR game [Laughter] you [Music] you 
0vAoyvCHU7c,22,COMPUTER GRAPHICS AND VISUALIZATION (18CS62) - Introduction and SYLLABUS,2021-04-19T04:12:20Z,COMPUTER GRAPHICS AND VISUALIZATION (18CS62) - Introduction and SYLLABUS,https://i.ytimg.com/vi/0vAoyvCHU7c/hqdefault.jpg,vinod desai,PT17M54S,false,173,7,0,0,22,hello students welcome back to the online classes yesterday is the first day of your sixth semester is the commencement of the sixth semester so as i am new to your badge so let me introduce myself professor you know desai working as a faculty department of computer science and engineering since 2012 for ui division as i am going to handle a subject called as computer graphics and visualization subject code is 18 cs 62 right so subject is computer graphics and visualization subject code is 18 cs62 for this subject total there are four credits and already you know the examination pattern that your internal will carry a body mass that is ci massive spotty and your rational examination is for 60 mars right so this subject is completely about the computer graphics concepts and visualization of different graphical objects and all so in this semester natalie will be having the computer graphics lab also along with the mini project so you need to perform a mini project here right so first let us understand what are the objectives of this particular subject that is a computer graphics and visualization so the course objectives are this particular course there is a computer graphics and visualization it will enable the students to explain the hardware software and opengl graphics primitives so here i will be understanding the hardware and the software part for the computer graphics and the opengl graphics primitives so opengl crap experiments are nothing but the library functions or the library utility that we can say and second objective is that this computer graphics and visualization subject it will enable the students to illustrate the interactive computer graphics using open gl the third objective is it will enable the students to design and implement the algorithms for 2d graphics primitives and attributes and both objectives it will enable the students to demonstrate geometric transformation then weaving on both 2d and 3d objects and last objective it will enable the students to input the representation of codes services color and illumination models so these are what are the main objectives of studying this computer graphics and visualization subject so today let me introduce the syllabus also right so as this subject is having a bio models so let me introduce the models one by one here in the post model it deals about the overview of a computer graphics where you are going to study the computer graphics and opengl is what is made by computer graphics and what are the different applications of computer graphics then what is made by opengl so opengl is nothing but open graphics library toolkit so basically it is a package here so which will allow us to perform the graphics related operations and this package is having a number of graphics related built-in functions so that will help in creation or demonstration of the graphical objects right and in this model as we are going to study basics of computer graphics then applications of computer graphics then video display devices so as you know the most commonly used display device is the monitor so here we'll be studying different types of load display devices like random scan and raster scan displays then graphics software so this is about the graphics hardware then the remaining part of this model is on opencl that is open graphics library utility toolkit so here we are going to study introduction to opengl then coordinate reference frames then specifying two-dimensional word coordinate reference frames in opengl then opengl point functions then opengl line functions then point attributes line attributes then curve attributes then opengl point attribute functions then opengl line attribute functions then line drawing algorithm so here you are going to study the different algorithms which will help us in demonstrating different gropical operations right so one of such algorithm is line drawing algorithm so that is uh dda and uh so president has given an algorithm for line drawing that is drawing the lines it's a model 2 is about pill area primitives then 2d geometric transformations and 2d viewing here you are going to study hilarious primitives then polygon pale areas then open basic 2d geometric transformations then matrix representations then homogeneous coordinates then comes the inverse transformations then 2d composite transformations and other 2d transformations so this is completely about the transformation of a 2d geometric that is a truly geometric transformation but two dimensional geometric transformation the transformation of geometric objects to the objects right then comes rational methods for geometric transformations then opengl rational transformations then opengl geometric transformation functions the next comes a 2d viewing that is a two dimensional baby so this is about viewing of two dimensional objects here we are going to study truly viewing pipeline then opengl 2d viewing functions so whatever the opengl functions are there so these functions that we are going to use in your labs where we are going to demonstrate the different types of objects right so this is about model 2 then module 3 is about clipping then 3d geometrical transformations then color and illumination models right so here you are going to study clipping so what is the clipping operation and what is mainly by clipping window and on and what is the effect of clipping then normalization and reviewing transformations then clipping algorithms there are different types of clipping algorithms that you are going to study here so that some of the clipping algorithms are totally point clipping clipping algorithm then 3d geometric transformation then 3d translation so till this point as you have you are going to study about 2d 2d objects 2d viewing and 2d clipping and then remaining half of the model 3 is going to deal about 3d that is a three dimensional here you are going to study three-dimensional geometric transformation three-dimensional translation the rotation scaling compository transformations then other transformations then applying transformations then opengl geometric transformation functions then color models so in that you are going to study about properties of light then color models then rgb and cmo color models then illumination models through elimination you might be knowing right and form models then corresponding opengl functions right so this is about a model 3 this is in detail about clipping there is a 2d clipping then release geometric transformation then color and illumination models and also their effects right then model 4 is about a 3d viewing and a visible surface parameters then transformation from world to viewing coordinates then projection transformation then orthogonal projections then perspective projections then the viewport transformation and 3d screen coordinates then the remaining part of this model is about opengl daily viewing functions then visible survey detection methods then classification of visual service detection algorithms depth method and opengl visibility detection function so this is about the model 4 so model 4 is in detail about leaving and visible surface direction the last model is about input and interaction then course and computer animation so here we are going to study important interaction then input devices clients and servers then display list then display list and modeling then programming event driven input then when speaking then building interactive models then animating interactive programs then comes the design of interactive programs then logic operations then code services then quadratic services then opengl quality service and cubic surface functions then basically spline cause then basic surfaces here you are having one curve demonstration also as one of the and a laptops concept that we'll be traveling here in this web model that is the business line course bezier services then opengl core functions and finally corresponding opengl constant so this is about early model pi right so if you look into the course outcomes means what is the outcome of telling this subject right so after studying this particular subject the student will be able to design and implement the algorithms for 2d graphics primitives and attributes then the students will be able to illustrate the geometric transformations on both 2d and radio objects then student will be able to apply the concepts of clipping and divisible circle detection in 2d and 3d viewing and illumination walls finally the student will be able to decide a suitable hardware and software for developing the graphics package using opengl right so these are what the outcome of questioning this particular subject is computer graphics and visualization then about the textbooks and the reference books right so two textbooks are prescribed here to understand this subject that is a computer graphics and user first one is uh computer graphics with opengl by donator and pauline baker the 2011 edition second textbook is interactive top-down computer with opengl by edward engine 2008 edition so these two textbooks are supposed to understand all the concepts of this particular then third one is interactive computer graphics concepts and applications by kelvin sun and peter shirley the the last reference book is computer graphics using opengl by mm riker and so right so this is about the course objectives then the syllabus and the course outcome of this particular subject so today the basics of this particular subject thank you 
btS0gONis1U,22,,2020-05-11T13:10:41Z,Lecture Video_17CS62_Module1_Bresenham's Line Alg part 2_C.Sharon Roji,https://i.ytimg.com/vi/btS0gONis1U/hqdefault.jpg,Sairam CS Video,PT16M52S,false,14,0,0,0,0,"[Music] hi everyone in the previous video we have discussed bresenham's line drawing algorithm and we have derived the formula for P naught P k plus 1 and p k and i have consolidated all the formulas here and in this video we can see numericals on resonance line drawing algorithm and you know on this bresenham's line drawing algorithm is more efficient than DDA algorithm because we are avoiding the round off function and it will have only the incremental values right so now I have to draw a line between the given in points 20 comma 10 and 30 comma 18 as a first step I have to calculate my slope right you know how to calculate the slope M is equal to y2 minus y1 by x2 minus x1 right so I have calculated the slope here consider this is x1 y1 x2 y2 find out the slope and this slope value is less than 1 that is it is 0.8 and I have told in my first video that is I have told in my dear video only that slope if it is less than 1 right I am sampling along x axis and I have to find out my Y value what do you mean by sampling along x axis every time this X it will be incremented by 1 and I have to calculate the value of y theta so by finding out the slope value suppose if you get a slope value greater than 1 don't be panic right ah you are in the next case later what is the next case I am sampling along Y axis and I have to find out the value of its what do you mean by sampling along Y axis you've written Y it will be incremented by 1 Y it will be incremented by 1 you have to yes so what you have to do is like you have to write the next formula right up so shall I write here so here P naught will be 2 Delta X minus Delta Y in the next case right and if PK value is less than 0 what could be the coordinates here here XK comma YK plus 1 vector and what will be the next decision parameter value it will be PK plus 2 Delta Y it's right up to Delta Y it's and for the next case for the next case if PK value is greater than or equal to 0 here both XK is incremented by 1 YK is incremented by 1 what about PK plus 1 PK plus 1 is equal to PK plus 2 Delta X minus 2 sorry 2 Delta Y just the reverse right so you should be very careful with set of formula you have to use that is based upon the young value if M is less than 1 you have to use this I'll show it properly you have to use this if M is greater than or equal to 1 you have to use this set of formulas while doing the numericals right now I have calculated the difference of fine and difference of X later and I have to do my table or column knob right I have to do my day block on them now and table of column first column I'll take us k PK and it should be XK plus 1 comma y k plus 1 right initially you have to plot the starting vertex you should not forget Tony coverton you have to plot it you have to that that is must and I'd start my attrition rate up so how to find the in ship PK value and she'll pick every you have this formula right you have this formula and show the formula P naught is equal to 2 Delta Y minus Delta X using that I have find out the P naught what is P naught to Delta Y Delta Y is 8 so 2 that is 16 minus 10 which is 6 so 6 I have 2 right here so 0 6 right so 6 is greater than greater than 0 so what I'll be doing I'll be incrementing both I will be incrementing both so this becomes 21 comma level beta now I have to find out the next decision parameter now this is my formula sheet right I have incremented both right how to find the next decision parameter you can check here in this set of formulas I have 2 PK plus 1 equation so when my PK is less than 0 I have to use this coordinate I have to use this this PK plus 1 to find out the next decision parameter when PK value is greater than 0 right the coordinates use this PK plus 1 to find the next decision parameter you should be very careful in this right next up so here I have incremented both so which formula I have to use I have to use this formula so it will be 6 plus 16 that is Delta Y is 8 so 2 Delta Y is 16 minus Delta X is 10 Delta existen right so it becomes 20 so it will be 22 minus 20 which is equal to 2 beta so I have to use this 2 here we're to use this to hear wait that now what is the next now what is my current PK to current PK is to weight greater than zero so it's an Y value I have to increment both so he becomes 22 comma 12 22 comma what now what is the next decision parameter I have to use this formula I will take care of sheet and calculate it right so it is previous decision parameter 2 plus 16 minus 20 which is equal to 18 minus 20 which is equal to minus 2 which is minus 2 wait so I will write mine before that I'll rate equation 1 so minus 2 this becomes my next equation so - to see here it is less than zero so what I have to do X I can increment but why I have to take the previous value so it becomes 23 comma 2 and what should be the next decision parameter I have incremented its but I have written the previous Y value as it is so the next decision parameter use this formula and calculate weight so it will be minus 2 plus 16 Delta Y is 8 so 2 Delta Y becomes 16 which is nothing but 14 right so this becomes 14 next iteration now what is my current PK 1414 it is greater than 0 so what should I do it is greater than 0 so increment both right so it will be 24 comma 13 24 comma 13 now I have incremental both use this PK plus 1 equation and proceed right so it is 14 plus 16 minus this is equal to 30 minus 20 which is equal to 10 this is 10 right and it's this is next titration so 10 is greater than zero so what I have to do PK value is greater than zero increment both ah so this becomes 25 comma 14 wait 25 come up 14 so you have to calculate the next PK value I have incremented both so I'll be using this equation and calculate the next PK value so it is 10 plus 16 minus 20 which is equal to 200 6 minus 20 which is equal to 6 right up so I have to write 6 here next I Tricia 6 is greater than 0 so I will be incrementing both but it is greater than 0 I have to increment both wait up and now I have to use this equation so it is 6 plus 16 minus 20 it is 22 minus 20 which is equal to 2 I'll be writing that 2 here right to next iteration 2 is greater than 0 right increment both it's an by value you can increment increment X & Y value and find out the next decision parameter what is the next decision parameter it should be 2 plus 16 minus 20 which is equal to 18 minus 20 which is equal to minus 2 right - 2 next titration - 2 is less than 0 so PK is less than zero so I'll be using this equation increment X but Y right as it is increment it's but why I have to write as it is now what Ingram and X Y write as it is this is the equation PK plus one equation so it is minus 2 plus 16 which is equal to 14 right 14 so next iteration is 8 so 8 14 is greater than 0 so I have team draymond both x and y value so it becomes 29 come off 17 I haven't reminded both x and y value use this equation and calculate the next decision parameter 14 plus 16 minus 20 which is equal to 30 minus 20 which is 10 right which is 10 right next so 10 is greater than 0 till is greater than 0 increment both x and y value it is 30 , 18 so what it is given I got supposed to draw a line between 20 comma 10 and 30 , 18 I have reached to this point so you can't stop because stop so this is my complete table or column I have started with 2010 I have calculated and I have reached 30 , later now you have to plot your life you have to plot your like this so X 1 is the starting from 20 and y value it is starting from 10 right up so its value it is starting from 2020 and reaching 30 20 21 22 23 24 25 26 27 don't deny have 30 20 21 22 23 later next y-value it is starting from 10 13 14 15 16 17 he did so I plug the first one he'll mark first 10 11 12 13 14 15 16 17 18 beta first is 20 comma 20 comma 2010 next 22111 22 12 23 Thole 24 1325 14:26 1527 1628 1629 in dinner Oh see once again 2010 2111 22 12 23 24 1325 14:26 1527 1627 16 and 28 also 16 sorry this is the big sir not this one this is wrong this is the 2016 then 29 17 and 30 18 join all the pixels to get straight thank you "
K3Lwa9524tQ,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-09T04:58:10Z,Midpoint Circle Drawing Procedure (CH-10),https://i.ytimg.com/vi/K3Lwa9524tQ/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT38M25S,false,58,0,1,0,0,welcome to the epod Shallah lecture series on computer science for postgraduate students we are learning the subject computer graphics and visualization in this series we had done few sessions earlier so this is the fourth session in this series or in this session we will talk about we will take an example of bresenham's line drawing algorithm and with that we will see how bresenham's line drawing algorithm is advantageous with a problem and later we will look at the midpoint circle drawing procedure which is an important procedure as part of this primitives so if you recollect the discussion we started with introduction in the first session and they we had learned some definitions and basic terminology and later in the second session we had talked about the DDL and drying procedure and in the third session the bresenhem's line drying procedure and today now we have we will solve a simple problem based on bresenham's line drying procedure and later we will continue with the midpoint circle drying procedure so let us take an example problem to understand from deep how bresenham's line drawing algorithm works and is more superior to the DDL line drying procedure so let us take an example if you recollect the discussion for lines M less than 1 that is slope less than 1 and M is positive will be sampling the line along x-axis at unit intervals let us take the problem given two endpoints of a line 2 2 and 10 5 how do we compute the in between points using the bresenham's line drawing procedure so if we calculate the slope for the line given the end points M is equal to y2 minus y1 by x2 minus x1 which is 3 by 8 which is 0.375 and it is less than 1 so it is a line which is less than 1 and which is also positive whose slope is less than 1 and it is also positive so the first step is to compute the initial decision parameter so we call this P not so because P naught is used later for the next station parameters we require this so P naught is the first diction parameter so which is to del Y minus del X so del Y is 3 and del X is 8 and P naught is minus 2 so that means the first station parameter is negative so to indicate that we have the lower pixel to be chosen that is the bottom pixel to be chosen if you remember the discussion whenever PK is less than 0 that means d lower is less than D upper so the lower pixel is chosen so if you look at the calculations here done so we have to tabulate it is better that you tabulate these points for our easy understanding how you can take the table with the rows K so the table heading can be K and the PK the XK plus 1 and the YK plus 1 indicating the next X in the next Y so K is starts K starts at 0 so we we have to compute the first initial there is the initialization parameter P naught so P naught is negative so negative indicating that the lower pixel is more close to the theoretical position so the next x value is 3 because our initial point is 2 comma 2 the x coordinate is 2 the next x coordinate is 3 the next x coordinate is 4 5 6 7 8 9 and so on one incremented the next y's are to be computed and the next y is dependent on the decision parameter and particularly the sign of the decision parameter we are not interested in the magnitude of the decision parameter we are interested in the sign of the decision car metal so if PK is negative we should be choosing the same previous pixel that is the lower pixel that means the next way that is YK plus 1 is equal to YK only so if you remember this equations these steps PK less than or equal to zero case the next X is 1 higher than the previous x value that is next X is equal to XK plus 1 next Y is equal to YK so the next pixel to be plotted is XK plus one comma y k so the next station parameter correspondingly is PK plus 2 Delta Y if you write these equations by the side and keep doing the calculations you will understand this better so we started with K is equal to 0 and PK is minus 2 so choose that is 3 is the next X and 2 is the next Y which is same as previous Y that is 2 - 2 for the next addition parameter which is p1 so compute p1 using the equation p0 plus 2 Delta Y because we are in this case so p0 plus 2 Delta Y that is p0 is nothing but minus 2 plus minus 2 plus 2 into Delta Y Delta Y is 3 so minus 2 plus 6 is 4 so the next dish in parameter P 1 is positive so P 1 is positive means K is equal to 1 P 1 is 4 so because it is positive the next Y is the one higher than the previous why this is previous Y and the next Y is 3 so if we look at this equation for P K greater than 0 the next Y is previous Y plus 1 so if you continue further like this that is compute the next station parameter using this equation because we got a K is greater than 0 so PK plus 1 which is p2 is equal to p1 plus 2 Delta Y minus 2 Delta X that's how you should be calculating for the next station parameter so that is called as 2 P 2 which is minus 6 when we compute you will get these values minus 6 and the next x value is 5 for the next Y value because this PK is negative same as previous Y and what you should observe is when we compute points or decision parameters using bresenham's line drawing procedure the interesting fact is that the PK values either are increasing or decreasing there is either positive or negative or 0 so that means they are not always negative are always positive are always zero so they keep fluctuating about the true theoretical line so you should observe that and you can you will notice that the points accordingly will keep fluctuating so when you compute these points still a K is equal to 6 that is the last point where XK plus 1 is 9 and YK plus 1 happens to be 5 so the points to be plotted our three two four three five three six four seven four eight four and nine five so that's the solution for the first problem and similarly for M is less than a 1 but M is negative so there is mod M less than 1 M negative as I said for negative slopes one of the coordinates is increasing while the other coordinates will be decreasing so in this case given 2 comma 8 as the x-coordinate and the y-coordinate is the initial initial point the first point and 10 comma 5 is the next point the end point of the line the two end points of the line so if you take del Y by Del X this is negative M is equal to minus 3 by 8 so X is increasing from 2 to 10 while Y is decreasing from 8 to 5 so the Delta Y becomes negative so don't bother about the M is negative and mod M less than or equal to 1 you still follow the same set of equations but only the change that you will be doing is wherever there is Delta Y and Delta X you take modulus of that ok so the same equations we'll be using but use modulus for Delta Y and Delta X that's the important observation and based on that a problem is solved here you will easily understand when you start doing this you can sit and start doing this as we did for the in the previous and the previous case previous example you follow same set of equations because it is only the modulus that is M is less madam is less than 1 and M is negative so only change is that one of the coordinates will be increasing while the other will be decreasing in this case here Y is decreasing okay so as you see here X values keep increasing 3 4 5 6 7 8 9 by one unit while wise keep decreasing 8 7 7 6 6 6 and 5 so and you still could observe this that pique is actually not fully negative or not fully positive all the values they are actually fluctuating between positive and negative values so when you observe now the two algorithms if you compare with the theoretical line that is theoretical line is something that you could draw using the exact values but whereas when we use algorithms like DDR dressing hem we get an approximation only brezin Ham gives a better approximation for the theoretical line and if you observe the shapes carefully the green line indicates the bresenham's line the blue line is the theoretical line and the red is the DDA line the red line DD line is actually fluctuating away from the blue line it is moving away the gap is getting wider and wider while the bresenham's line the green one is actually going about the theoretical line that is it fluctuates about the theoretical line that's the beauty of the bresenham's line so it is more accurate okay so that is how it is more efficient than the DDA one so it also solves the problem of floating point calculations so because of these two advantages our fundamental advantage it is more efficient and also avoids floating-point calculations it is a more better algorithm and is also accurate because it always fluctuates about the theoretical line so it never deviates from a theoretic line that's why you sometimes get positive that is peaky sometimes positive peak is sometimes negative that means our pixels that we choose will be either upper one or the lower one for every a new pixel that we compute so with this we come to the end of the bresenhem's line drawing procedure so take many possible line slopes and try to solve many example problems for positive slopes for negative slopes and for horizontal and vertical lines you would appreciate using the set of equations that are given in the previous slides so let us step into the next primitive and we have started with point which is just a location in then line which is the next important primitive the third important primitive that we are going to look at in this session is the circle drawing procedure so circles are the most important primitives are most common primitives that everyone uses so a circle is very much a symmetric that is a circle has got a nice shape and it's important properties that it is symmetric that is it exhibits octant symmetry an octant symmetry obtained is 8 so acht is 8 octant is 8 so it exhibits symmetry about its octants what does that mean this example here in this slide shows you what is this octant symmetry suppose you are given a circle ok divide that into divided using these lines and the radial lines using these lines you can divide the circle into 8 pieces so each piece is an octant ok now take one of the octants ok you can do all your computation on one of the octant so for example if you had computed a point using any algorithm are using any procedure if you had computed a point on one of the octants as 2 comma 7 say for example this is the octant of our interest and we have computed a point in this octant as 2 comma 7 now what is the symmetry property if you know one point see in the next octant you don't have to actually compute points it is just enough you interchange the X's and Y's that is you will have a symmetric point in the next octant whose coordinates will be just the opposite of this just the swap versions of these x and y-coordinates which is 7 comma 2 for this point you can have an exact symmetric point in the other octant which is 7 comma minus 2 actually only a change in the sign of the y-coordinate so this is 7 and this is minus 2 this is the symmetric point for this point another symmetric point lies in this or and whose coordinates are 2 comma minus 7 so again changing the x and y's and changing the signs you can easily you know a symmetry is something like you can fold one of the octants about the line of symmetry and that's how you get so another symmetric point can be computed like minus 2 comma minus 7 which is exactly giving an extra sign here for the x-coordinate and like this there are seven other symmetric points for one point that is there are eight symmetric points and if you compute one point on one of the octants the other seven symmetric points can be easily plotted by interchanging the X's and Y's and by giving them science and changing the signs also so that's the interesting part so we don't have to compute points on the entire of the circle it is just enough that you we use a procedure use algorithm to compute points on only one of the octants and the remaining seven points on the remaining seven octants can be easily plotted by just changing the X's and Y's and by interchanging them and by giving them various signs so that's as simple as that for our calculations our for our algorithms and procedures we will be choosing this octant that is the first octant that is the positive octant where X is positive and Y is also positive and the left of these two octant so that is the positive quadrant and that in that the left octant so given a circle so imagine you have to find points on the circle what is the input the input to the procedure is the radius and that is the only thing and maybe Center so if Center is given somewhere else so you will have to also take those points and those coordinates assume that if Center is at origin so 0 0 is the origin and radius is say some R units and we'll be interested to compute points on the circle only in one of the octants as I said it is just enough we can start with the first point on the octant which is zero comma R so if R is the radius and if zero zero is the center so the first point on this octant that we are considering has the coordinates zero comma R so how do we start our compression and how do we know where do we stop or what is the stopping condition for the procedure where should we exactly stop so that the quadrant has ended that is the octant has ended there so how do we know the stopping condition or what is the stopping condition and what is the final point in that octant that means this question mark here shows that this is the point that we have to know when we compute we should stop here so how do we know that there are various ways of knowing the stopping condition and one important one useful a simplest way to know where we have to stop is as you know that this is a 45 degree line any point on this line is of the form Y is equal to X because it will be 3 3 4 4 5 5 6 6 & 7 7 any point on this line will be of that form any point in this zone imagine if this 45 degree line divides this quadrant into two parts okay any point in this zone is will satisfy the relation X is less than Y that means take any point say 2 comma 5 2 comma 5 is 2 is less than 5 so in this octant the points satisfy the relation X is less than Y in this octant the points satisfy the relation X is greater than Y and on this exact line it is X is equal to Y so we have arrived at our stopping condition logically saying that as long as X is less than or equal to Y you can continue the procedure you can the algorithm can continue computing points whenever X is equal to Y our X is greater than Y you can stop the procedure that is as long as X is less than or equal to Y you can continue come points on this often so that's how we try to stop the algorithm our stopping condition for the algorithm so that's what is discussed here in this slide as well and you can also notice that in this octant the slope is actually negative so if you start with the circle shape at 0 comma R here the slope of the circle is actually zero because the slope to the circle at this point is actually 0 as you keep moving and down X is increasing well Y is decreasing for this points you see these are all negative slopes so in this octant when we keep moving from left to right X increases while Y decreases ok so that means if you observe this octant the line the slope of the circle is actually inclined more towards x axis so we follow the same arguments that we used for line drawing where lines with slopes less than or equal to 1 we are going to sample the line along x axis so similarly here for the circle the slope of the circle in this octant is such that the lines slopes are actually more inclined towards x axis so we are going to sample the circle along x axis at unit intervals in this obtained so if we happen to choose a different octant obviously you will have to sample the circle along other axis so we follow the same logic here we use the same argument like decision parameter again and what is our aim is to find a simplest procedure find some efficient procedure so that we can compute points and one of the octant sufficiently and the remaining seven octants the points can be easily without any computation we should be able to plot them so the circle equation to start with this procedure is particularly called as midpoint circle drawing procedure what is a midpoint circle drawing procedure is we are going to use the midpoint and let us see that in the next slide and the circle with center at origin and with radius our units is given by the equation x squared plus y squared is equal to R squared so as we know from coordinate geometry that x squared plus y squared minus R squared if it is equal is that means any point X comma Y that satisfies this relation is a point that lies on the circle boundary any point X comma Y when you substitute that in the relation x squared plus y squared minus r squared and if it is less than 0 the point is an inside point so it lies inside the circle boundary and any point x comma way that satisfies this relation is an outside point so our decision parameter here that is whether a point is on the circle or is an inside point is an outside point we can compute by checking the decision parameter pk so if we equate PK to be x squared plus y squared minus r squared we can say that whenever PK is less than 0 it is an inside point whenever PK is greater than 0 it is an outside point whenever PK is equal to 0 it is a point on the boundary that means always we have to find a point close to the theoretical position on the circle so that point may be an outside point or that point may be an inside point so we'll be actually trying that so for that we use the concept of midpoint so what is the midpoint procedure let us understand the principle of midpoint circle drawing procedure we start with a known point on the circle always we start with a known point or a plotted point let us say it is XK and YK the point is plotted so to compute the next unknown point we have to decide our we have to find out what is the next unknown point for that because the circle is assumed to be us is assumed to be sampled along x axis the next x value is one higher than the previous x value so the x position is known so the x coordinate is XK plus 1 but the y coordinate is actually we have to choose we have to decide among YK and YK minus 1 because the circle is actually coming down in this octant the circle is actually has got a negative slope and y-values keep reducing while x-values keep increasing in this for this particular octant so for the next exposition we have to choose whether we have to pick the YK position or the YK minus-1 position so how do we pick whether the next y coordinate is y K or YK minus-1 so that we can plot this or this is based on the midpoint is based on the position of the midpoint relative to this circle boundary so what is the midpoint here for the possible Y positions exactly choose the middle position so this position is the midpoint so how the what is the principle behind this midpoint procedure is if the midpoint for the two possible pixel positions lies inside the circle boundary that means the circle boundary is close to the upper pixel try to understand this let me repeat that again if the midpoint happens to lie inside the circle boundary the circle boundary is close to the upper pixel that means here in this case we'll be choosing the YK if the midpoint is outside the circle boundary and the circle boundary is close to the inner pixel that is the lower pixel that is YK minus-1 so that's how we take our decision so based on the position of the mid point with respect to the circle boundary now how do we know where the mid point is with respect to circle boundaries so take the coordinates of the midpoint and substitute them in the equation x squared plus y squared minus a-square so compute the mid point coordinates substitute the x-value and y-value of the mid point in the equation x squared plus y squared minus R squared and see if it is equal to 0 or less than 0 or greater than 0 so that is how you can know the position of the midpoint so let the midpoint coordinates be the x coordinate is known for the midpoint which is XK plus 1 the y coordinate is YK plus YK minus 1 I do so it is actually like from YK to YK minus 1 we are going it is YK minus 1/2 so it is YK it is YK minus 1 the midpoint is exactly at XK plus 1 comma YK minus 1/2 so what is the next step take these midpoint coordinates put it in the equation x squared plus y squared minus R squared and then check if it is equal to 0 or less than 0 and greater than 0 so that's how our dation parameter starts so let us take the derivation here let PK be XK plus 1 whole square this is x squared plus y squared minus R squared so now we have to check whether PK less than 0 PK greater than 0 or PK is equal to 0 what does PK less than 0 indicate that this midpoint is inside the circle boundary so when the midpoint is inside the circle boundary choose the upper pixel that is YK if PK greater than 0 the midpoint is outside the circle boundary then choose the lower pixel so that means the next Y is YK minus 1 so if we start our derivation PK is this and take PK plus 1 so wherever there is K replace that with K plus 1 for the next decision parameter because always we do this because we want a relationship between the current Asian parameter and the previous dition parameter because to have recursive equations so recursive equations are faster in computation so the next station parameter is wherever there is K replace that with K plus 1 so in this equation K replace that with k plus 1 k here k plus 1 so we have taken this and the next step is to take the difference between the two decision parameters PK plus 1 minus PK which is our 2 XK plus 1 plus 1 plus YK plus 1 minus 1/2 volt squared minus YK minus 1/2 volt squared because this difference is important so that we can take PK on to the right so you can sit and take these steps and you can follow derive them it will get simplified further you can keep this slides observe carefully the next decision parameter is PK plus two XK plus one take the PK on to the right so next - environment is is equal to previous station parameter plus two XK plus one plus one plus YK plus 1 minus 1/2 whole squared minus YK minus half volt squared so observe this k plus 1 all in the suffix observe k plus 1 on the suffix for y indicating next X and next y the next X is always one higher than the previous X because we are going to sample the circle along x-axis at unit intervals so next Y is either YK or YK minus 1 it depends on the sign of peak again so case 1 if PK less than 0 that means the midpoint is inside the circle boundary and the circle boundary is close to the upper pixel so next why is YK so that's what is mentioned here the next pixel that will be plotting is XK plus 1 comma Y K so that is the next why is YK so in this relation for PK plus 1 replace the next Y with YK so YK minus 1/2 whole squared minus YK minus 1/2 volt square reduced to this becomes 0 and you are left out with the term PK plus 2 XK plus 1 plus 1 so at the case 2 if you come to PK greater than or equal to 0 so first we have considered the case 1 PK less than 0 that means the midpoint is inside now if a case 2 PK is greater than 0 the midpoint is outside the circle boundary now then the Y we will be choosing is the lower pixel are the inner pixel which is YK minus 1 so the next pixel to be plotted is XK plus 1 comma YK plus YK minus 1 and replace YK plus 1 with YK minus 1 in the equation for PK plus 1 you or get this relation this expression on the right how this expression can be simplified like this observe this expression carefully YK minus 1 minus 1/2 whole squared minus YK minus 1/2 whole square this this term remains as it is but this term becomes YK minus-1 minus half all squared minus YK minus half volt squared you can slightly rearrange this term like this as shown in the next equation subsequent equation YK minus 1 minus half can be conveniently written as YK minus 1/2 minus 1 just a little rearrangement of terms YK minus 1 minus 1/2 can be written as YK minus 1/2 minus 1 and put a bracket for YK minus 1/2 treat that as J and this as B so a minus b whole square like so you can conveniently cancel out this R square and and here a squared term so for that we have simplified this so PK plus 1 is equal to PK plus 2 XK plus 1 plus 1 plus 1 minus 2 x YK minus 1/2 this a squared ei square term get cancelled and you are left out with B squared that is 1 minus 2 x YK minus of minus 2 a B so we have done a little simplification here it is you can you can easily understand this this part of the equation doesn't get altered doesn't get simplified further while this gets simplified like this 1 minus 2 YK plus 1 if you take this 2 inside and multiply 1 minus 2 YK plus 1 to minus 2 YK + 2 minus 2 okay take the minus 2 out and you get this YK minus 1 minus 2 common and you get YK minus 1 we did this intentionally to say that the next y is YK minus 1 so the next addition parameter is actually PK plus 2 XK plus 1 plus 1 minus 2 YK plus 1 all in the suffix indicating that the next way is YK minus 1 all in the suffix here k plus 1 indicating that the next X is previous X plus 1 so as we did in the bresenham's line drawing procedure the decision parameter the initial addition parameter is always to be computed to start with so take PK as this equation as we started with this wherever there is K replace that with 0 and p 0 is equal to x 0 plus 1 whole squared plus y 0 minus 1/2 whole squared minus r squared and the initial point x naught y naught is equal to 0 comma r as you know a circle with center at origin and has a radius of our units we started with the first point 0 comma r and will have to proceed till the x and y coordinates satisfy the relation x is less than or equal to y you will understand this much is in much better when we solve a simple problem based on this and the first edition permit that is P naught the initial addition parameter is given by X naught is 0 y naught is R so 0 plus 1 whole squared 1 plus R minus 1/2 whole squared minus R squared if you reduce this expand this is a minus B whole squared R minus 1/2 whole squared using a minus b whole square formula so you get 1 plus 1 by 4 minus r which is 5 by 4 minus r but 5 by 4 is a fraction and it is approximately you can round it off to 1 minus r because all for all our examples are will be considered as an integer and so we have approximated this 5 by 4 to be an integer as 1 so based on this if we solve a simple problem here let us take a circle with centre at 5 comma 5 and radius of 8 units so we solved we did the derivation or the steps using a circle with centre at origin but now if given a circle with centre somewhere else say if i comma 5 as given in this problem what is that you do is assume that the circle is at origin and then compute all the X&Y points and then add this centre to every point that you compute so that means using this centre whatever points that you compute or using origin you compute the points and then add to a very point the 5 comma 5 because that is the centre that is the actual center of the circle so to start with first compute P naught P naught is 1 minus R R is eight so P naught is negative so tabulate the values for K P K XK plus 1 YK plus 1 and the actual XK plus 1 YK plus 1 as I said with Center at other than origin you will be adding the center to every point that you compute ok so if P naught is minus 7 that means P naught is negative P naught indicates that PK indicates that it is actually the decision parameter and if the if we get a negative value indicates that the midpoint is inside the circle boundary and we will be choosing the upper position okay so midpoint is inside the circle boundary that means for the Y values you take the same so 0 comma 8 is the first point on the talk tent ok so 0 comma 8 and the first X well next x value is 1 next x value is 2 3 4 5 6 you can keep going you can till but but you do not know exactly we have to stop wait for computing the Y values you can compare x and y values whenever X gets bigger than the Y our X is less as long as X is less than or equal to Y you can compute ok so if you use the as we did in the previous bresenhem's case the first station parameter is minus 7 negative so x value is 6 while x value is 1 while the next y value is same as previous 4p1 case so you use the equation for next station parameter which is in this case that is BK plus 1 is equal to PK plus 2 XK plus 1 plus 1 where XK plus 1 is the next x value so if you the next x value which is 1 so 2 into 1 1 plus 1 minus 7 plus 2 plus 1 which is minus 4 so that is minus 4 minus 4 X gets incremented by 1 while Y because this is PK is negative Y is same as previous so that's how if we keep going what we get is the points on the circle like one eight two eight three seven four seven five six and C six five so five six is actually a point where X is less than Y while six five is a point where X is greater than Y that means we are actually flipping or switching from the on from that coq10 to the next octant so Oh what is that we do finally is this is where you can stop the stopping condition is has arrived because X is greater than Y so we'll be taking this as our last point on the top tenth so five comma six is the last point on that octant and here add that five five Center to every point that you compute here so 1 + 5 8 + 5 2 + 5 8 + 5 so 3 + 5 7 + 5 so when you add Center to the points that we computed here you get the actual points on the top 10 so that's how we can solve a simple problem to summarize the midpoint circle drawing procedure is more efficient and it is it uses the concept of octant symmetry because circles exhibit the property of octane symmetry it is just enough that we compute points on one of the octants for our interest we have chosen the octant that is that is the left octant in the first quadrant so in the first quadrant there are two octant so the upper octant so in that the circle has a shape where the slopes are gradually they are actually negative slopes so from 0 to negative the circle slope moves from 0 to negative so as x increases we are going to sample the circle along x axis and unit steps and Y's are calculated while Y values keep decreasing X values keep increasing so this procedure is more efficient and simpler if we calculate one point on one of the octants the remaining seven points on the remaining seven octants symmetric octants can be easily plotted by interchanging the computed values and by changing the signs ok so that's how we have learned this today in this session the midpoint circle drawing procedure also worked out a problem and that gives us more clarity on this procedure so hope you will implement this in a program and you can try working out more problems taking more other radii other values for the circle other centers and try solving a simple problem okay so thank you for being there 
uJ-tIMuMqcs,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-10T05:19:32Z,Visualization Definition and History Of Visualization (CH-10),https://i.ytimg.com/vi/uJ-tIMuMqcs/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT31M52S,false,75,3,1,0,0,[Music] lecture series on computer finds this module is about visualization we'll be looking at the visualization definition and the history of visualization and this morning so the learning objectives for this module are first we will be talking about the various concepts of visualization next we will be looking at what a visualization pipeline is what are the various modules in the visualization pipeline and then we will be learning about the history of visualization and finally to end up we'll be looking at the various applications of visualization if you look at what a visualization is there is an old Chinese proverb which says that a picture is more than thousand words it is also given as a picture is worth more than thousand numbers so according to this saying it says that if we look at a picture it is possible for us to learn a lot of information when compared to just listening to certain audible information so here is an example for visualization if we just look at this picture it is possible for us to infer a lot of information from this picture it is it looks like the information that we can visualize from this picture are it looks like a smell there are smallest smells at the edges it has different shades of red at the outside and green at the inside the smaller circles of purple highlights the green has also got different shades each swirl is composed of smaller ones and the spools are located in a clockwise direction inside the object there are also red highlights those are different shades of red also the Green sheets vary in the form of a fan well the purple ones are more of more or less unicolor the green shape gets darker towards the outside of the fan so these are certain information that we can infer just by looking at this particular picture but we can also come map this picture to some kind of data so that it is possible for us to get certain and fight out of this picture that is what visualization is all about it is not only just showing a picture it is one for a perfect mapping of data with respect to the picture that is shown on the screen so by performing this kind of mapping it is also possible for us to infer or gain a lot of insight from the given picture basically so we this is the this is another example for visualization seeing is what believing is there is a thing with faith that seeing is what believing is the observe and draw a conclusion from what we see basically seeing is all for understanding so there are lots of visual illusions that tend to that tend to understand concept in a different way so if we look at the image that is shown here there are lots of lines if we look at the horizontal lines it may seem to us that these two horizontal lines are not parallel lines but they it seems as though they may meet at a particular point but actually these two horizontal lines are exactly parallel lines because of this visual illusion it shows as though these two lines are not these two lines are not parallel with each other this is what a visual illusions so we cannot believe what we exactly see because in certain cases there may be some kind of illusions which may mislead us in understanding the entire concept so basically if we look at what visualization is it is a transformation or day of data or information into pictures so it is basically a transformation of data or a mapping of data into some form of picture which we call it as visualization so it also engages the primary human sensory apparatus and that is a vision the primary human sensory apparatus is a vision and this vision is engaged in the process of socialization it is also called as a tool for and it also helps us in learning or understanding certain concepts visualization helps us in learning and understanding certain concepts in a proper way it is a compact representation of number of information for example numbers instead of representing the numbers in a numerical format it is possible for us to represent the numbers in a graphical format so that it is easier for the user to understand what it represents we can also call visualization as a tool which carries the information along with it so that's why it is called as career of information visualization is also a tool which acts as a carrier of information so the basic definition that is given by card he says that visualization is the use of computer support an interactive visual representations of data to amplify the cognition so the use of computer supported usually we try to create visualization with the help of computers the visualizations are going to be more interactive in nature it is possible for the end user to interact with the pictures that are shown on the screen they are all visual representations of certain form of data that data can be in any form it can be a scientific data it can be an experimental data it can be a numerical data or it can be some form of data that is represented in the visual form and finally the visualization helps us to amplify our cognition that is our knowledge so the entire definition goes like this the use of computer supported interactive visual representations of data to amplify the cognition this is what visualization is if you look at information visualization information visualization has given us the use of computer supported interactive visual representations of instead of data here they call it as abstract data to amplify cognition so the data is in an abstract format in the case of information visualization whereas a normal visualization the data is some form of numerical data or scientific data or experimental data which is in the raw format and which is which can be easily mapped down to a visual form whereas in the case of information visualization the data that is being captured as an abstract format and thereby it becomes very difficult for us to map the entire data onto a visual format in the case of information visualization these are the definitions that are given by card see if you look at the basic visualization model the model is given like this they have the data the data is being mapped onto a visual form so there is a perfect mapping from the data onto the visual form and this visual form of being transferred there is a visual transfer to the human being and from with the help of the knowledge that I mean with the help of the visual transfer it is possible for the human being to understand our get certain insight about the data so the there is a perfect mapping if perfect mapping from the data to the visual format and from the visual format the visual is being transferred to the human being under him and the human being can infer certain in-fight out of the visual that he has seen that is a data in faith that he acquires so as I said in the visualization process the data is being mapped onto a visual structure see if we look at this mapping the right now on to a visual structure these mappings are called as visual mappings and these mappings are supposed to be computable in nature that is they are all of mathematical mappings there the visual is a function of the visual is represented in the form of a function of data the visual mappings are also comprehensible in the sense they are invertible in nature it is possible for me to convert the data into the visual format and the reverse is also possible it is possible for me to convert the from the visual it is possible for me to get the data what exactly it is so the visual mapping should be a comprehensible one or an invertible one and another one interesting aspect of this visualization is the creativeness the visual that we see on the screen should be creative in nature so thereby the visual mappings have all these three characteristics within itself that is the visual mapping should be computable in nature mathematically computable in nature it should be comprehensible in nature in the sense that it is the reversible which means that I can convert it convert the visual from the data format or the data from the visual format and it should be creative in nature also so if we look at this visualization pipeline in the visual aid they have the raw data or the information and applying certain data transformation techniques these raw data are converted into some kind of structured data which we call them as data tables later on we try to apply the visual mapping on to the structured data and these data tables are once again converted into visual structures and finally over these visual structures we try to perform or apply certain view transformations so that these visual structures are converted into a certain form of visualizations or various views are being shown and from these views the end user it is possible for the end user to attain or gain certain knowledge out of this visualization the end user can also perform lots of tasks over all these modules the user the end user can easily interact at any stage of the visualization it is possible for the end user to interact with the visualization either at the data transformation stage or the visual mapping stage or on the view transformation stage so usually there will be a lot of interaction of the end user in the view transformation stage there the end user can actually vary the views and you can see what exactly it has happening so that is the visualization pipeline basically see if we look at the visualization flavors all the visualizations flavors or other types can be classified into three types the first one is the scientific visualization second is a data visualization and the third one is an information visualization in scientific visualization there are lots of user interfaces the data representing processing algorithms are being used and lots of visual representation techniques are also used in the case of scientific visualization the data that be used for scientific visualization of the data that we receive from certain kind of scientific experiments that are being conducted so in scientific visualization we can see that we have lots of numerical data or experimental data where and we try to apply lots of data representation of processing techniques or algorithms to convert these data into certain visual representative formats and we try to create certain user interfaces so that it is possible for the end user to interact with the data FET or MIDI without virtual structures that a scientific visualization in the case of data of the shire ization the examples given are they include financial data and statistical methods so in the case of data visualization the rate of set that we use is going to be very huge so that will be huge amount of numerical data set that are being used and which gets converted into certian a certain visual structures and they are being shown to the end-users in the form of visualizations so these include the data set can be you know of financial data set or it can be some form of statistical data set that are available in the case of data visualization the next one is the information visualization in the information visualization the data set that we use are going to be abstract date of it say for example the www documents or the file structures or the arbitrary kind of relationship that exists between various web sites or web pages in in a website these are all certain I mean examples of abstract data set Marren if the visual is going to represent these kind of abstract data set then it is called as information visualization so basically the entire visualization flavors are classified into three different types like scientific data visualization and information visualization so next is a history of this visualization if we look at the history of visualization it started in the year thousand one hundred and thirty seven where the earliest known map was introduced China was represented in the form of a map and that came into existence in the year around the thousand one hundred and thirty seven then later on this got extended and the map was later extended into some kind of star chart which was represented by a person named Johan B here in the year 2000 603 and later on in the year thousand six hundred and thirty seven it got extended into some kind of Cartesian coordinate system so definitely death cactus is the name of the person who invented this in the case of Cartesian coordinate system they entire dataset is represented in the form of X and y-axis or as Cartesian coordinates and then an extension to this the Year thousand six hundred and eighty six the first meteorological chart was formed by a person named Hallie which is also the chart was also named as Halley's chart so this is an example given as an example of this Halley's chart this Halley's chart shows the meteorological information like the kind of Vince that flew across a certain region the trade winds and other ones that flow across a certain region are shown in this particular figure in the form of a visual structure so this came into existence in the year thousand six hundred and eighty six and then later on in the year thousand six hundred and ninety three the mortality tables of city of breslow wasn't first attempt to correlate two different day levels and this was also introduced by the person named Holly an extinction to this approximately in the year thousand seven hundred and fifty entire the dataset is represented in the form of contour lines their heights of regions are being represented in the form of contour lines which came into existence in the year thousand seven a nine and fifty then later on in the year thousand eight hundred and seventeen isotherms were drawn where that time the regions where the temperatures are going to be the same those regions are being joined using certain lines which are called of isotherms and they form a chart which is called as an isothermal chart similar to that in the year thousand eight hundred and twenty nine iso chromatic lines are drawn either chromatic lines of the lines which try to connect all the regions which are same color information kala can represent anything it can represent the height it can represent the temperature of a particular region or it can represent anything any attribute that is related to a particular region and the similar color lines are joined together it forms something called of ISO chromatic line then later on I assume ours came into existence these are also set of lines which are supposed to connect regions which have same pressure information so isobars chart or also drawn so these all came into existence barren the entire set of visualization is represented in the form of a two-dimensional data where the entire thing is represented in the form of a Cartesian coordinate system where you have the x axis as well as the y axis then later on this two-dimensional data set got incremented to 3d imaging data set where is along with the x and y information we have the easier information or their depth information also taken into account so in the year thousand eight hundred and ninety five x tres invented by roy antigen came into existence and thereby it is possible for us to represent the 3d images or the depth information along with the x and y axis then it dis got extended so in thousand eight hundred and ninety eight stereo x-rays where came into existence which was introduced by mckenzie and davidson these kind of stereo x-rays were helpful in locating the foreign bodies in human beings then in 1938 x-ray sections of slices 3d slices were introduced in 1912 x-ray crystallography was introduced by the person named la way baron the position of atoms and the crystals were used to represent the x-rays then in 1949 this are difference people used or attract to the position of aircraft by radar and analyzed the results and display the entire result onto the CRT so this was introduced in the thousand nine hundred and forty nine later on this got extended to sketch path which was invented by a person named sutherland and it was introduced in the year thousand nine hundred and sixty five where it is possible to have some kind of interactive graphical drawing system these kept in a sketch path were of huge files they were very big and they were expands in the nature people used it to draw some graphical drawings so that the entire drawing can be digitized and it can be taken and phi the system and helpful for end users to interact with such kind of drawings so then in the year 1987 these got extended and we were the people were able to come and come across personal or exploratory graphics there it is possible for them possible for a scientist to enable or to gain more knowledge by interacting with the data pure graphics were introduced there the scientists are able to show the information for the colleagues and it is possible for the scientists to collaborate with each other and perform their experiments presentation graphics were introduced using which it is possible for us to communicate the information and results where high quality fully automated information can be communicated in the form of presentations to their peers and then publication of visualization is also possible by enabling others to use the data where it is possible for us to share the entire visual structure and others can also use the entire data as it is so then in the year 1983 augmented reality came into existence by raters from this was invented by the person named Myron Q Krueger where it is possible for us to for the users to interact with the system as though the users are also part of the entire system as such so here we can see two people standing inside a room where they are interacting with the entire system the two people are also taken I mean they can actually feel the entire system are such with the help of their hands and the two people are also taken in today they are also scanned and they are also taken into the system they will have a feeling as though they are wandering and they are wandering inside the entire atmosphere as such then volumetric data sources were being produced volumetric data sources were actually produced by a certain type of scanning devices these act as some kind of mathematical or simple measuring devices so with the help of scanning devices it is possible for us to scan the data and get the end being visualized some of the application tools that are usually coupled are haptic feedback devices using these kind of haptic feedback devices it is possible for the end-users to feel or touch the entire visual structure as such stereo output can also be produced serial put is nothing but the help of some kind of 3d glasses it is possible for us to view the entire information in the form of a 3d three-dimensional object under it is also possible for us to have some kind of interactivity in the case of stereo output devices the users can also interact with the three-dimensional objects that are being displayed and I mean rendering these kind of three-dimensional objects becomes very difficult there are various kind of rendering algorithms that are actually used to render such types of devices so some of the medical scanner that we have at present are MRI CT pet ultrasound and respect these are certain kind of scanners that are helpful to scan the inner regions of the body or interiors of the body and we can see that there are various visual structures that are being produced here so these are certain examples of scanning domains these are certain examples for scanning applications where this scanning is actually used in in the primary education for to make people understand what does inside the entire body this is an example of the internal structure of a frog that is being displayed so it is possible for the teacher to make the students understand what internally the Frog contains with the help of these kind of scanners so these are also helpful in the case of medical education for surgery and for anesthesia when the physicians or the surgeons they try to perform certain kind of surgery or they try to explain certain concepts to their students these kind of scanning devices will be very helpful to get the internal structure of the entire human body or to get the internal structure of various parts of the human body so it can also illustrate the illustration of medical procedures to the patient can also be done using these kind of visualizations so these are certain scanning applications if you look at these applications there are surgical simulations for treatment planning we have telemedicine telemedicine is one kind of an application area where an the doctor will be sitting in a different location and the surgeon will be sitting in a some other different location so the doctor is an expert who is going to explain the entire procedure the entire procedure to the surgeon who is going to do the surgery the surgeon will be listening to it and accordingly he'll be given I mean as per the instructions given by the doctor the surgeon will be performing the surgery at a remote location that is what when the telemedicine is then we have inter operator visualization and brain surgery biopsies etc can be performed with the help of these kind of scanners these kind of scanners are also helpful for industrial purposes for quality control and for security purposes these kind of scanners are actually useful in industries these kind of scanners are also helpful and games to give certain kind of realistic 3d effects so some of the game devices have 3d kind of scanners maybe in the case of Xbox we have something called a Skinit which tries to scan the entire body of the person whoever is standing in front of it and the entire person who is also scanned and he's also taken as an object and find the system so that the user will have a feeling as though he's also he's playing the user can actually physically play standing in front of the system and his entire body will be scanned and his movements will be scanned and they are considered as physical movements and they will be taken inside the system so that the user will have will have full interactivity or Bulava feeling and so he is playing the game physically so these are certain applications of scanning other than this we have scanning in the domain of bio I mean we have biological scanners they have electron electronic microscopes we have confocal microscopes so all these are some of the examples of scanning devices which are helpful to understand the inside parts of the human beings or some kind of microscopic organisms so some of the applications are paleontology kind of applications marason it is possible for us to inspect the entire fossil using these kind of biological scanners it is also possible for us to understand the analysis or we can perform some kind of microscopic analysis with the help of these kind of scanners so these are certain applications that can be performed then their computational other than scanners we have scientific computation domain in scientific computation domain it is possible for us to perform some kind of mathematical analysis so if we look at these mathematical analysis some kind of a partial differential equations or ordinary differential equations can be represented in the form of visualizations so that it is easier for the end-user or the reader to understand what exactly it is finite element analysis can also be performed by the help of can be made to be better understood by the end-user by showing it in the form of an visual and then we have something called a supercomputer simulations simulations can also be performed using these supercomputers which can show the entire simulation in the form of a visual structure so by looking at these visual structure it is possible for the end-user to gain a lot of knowledge other application areas of this kind of scientific come here computation lies in the field of computational fluid dynamics and computational field simulations so if you look at these two figures here you can see there is a tubular structure wherein you can represent the entire flow of the fluid within this tubular structure how it happens and what happens to the entire flow of the fluid within the tubular structure can be shown in the form of simulation similarly we can show field simulations as visualizations also other than this we have vector field applications Marron you can also model the entire weather the weather scenario can be modeled and it can be shown as a weather modeling visualization then we have vector field there are various challenges that come along with the vector field visualization there we need to actually project the entire dimension or say yen dimension of the data onto the screen so it now it should be possible for us to detect certain features like smooth or vortex cones these are certain challenges that exist in the field of vector field the visualization then there is another kind of application which is called as streamlines Byron the curves that connect all the particle positions are shown in the form of an visual structure so if you look at these streamlines it is the streamlines help and displaying these are local technique because you can we can only visualize the flow directions initiated from one or a few particles when the number of the streamlines thus increased the theme becomes more cluttered so if you look at the visual you can really understand that as the number of streamlines increases the entire visual structure is more cluttered and the computation is also highly expensive and mathematically totally the current number of computations that need to be performed is also very high in this case so other than this we have measuring domains which is used when used in the case of spacecraft Seesmic devices and statistical data where we try to measure lots of information say the weather information and that mysteric studies can be carried out the planetary and the interplanetary explorations can be carried out all your precious metal exploration earthquake studies or some kind of statistical analysis all these can be performed by the help of information visualization so this is a taxonomy of the entire visualization this gives an idea of what they what visualization is all about if you look at the data it does you have the scanners or the sensors or the cameras which tries to capture the entire volumetric data they are being sampled or scanned the and they are fed into the system in the form of numerical data later these numerical data are not down to some kind of geometrical models and the help of computer graphics it is possible for them to show the entire geometrical model and the form of the image which we call it as a visual from the supercomputers also it is possible for us to extract the entire simulation converted into the form of the data and the data is once again fed in the form of a man displayed in the form of a visualization similarly video recording the from the images it is from from the visual or from the images it is possible for us to either show it as an display to the end-user or we can capture the entire image in the form of video recording so there's a entire taxonomy of visualization basically so if you look at now what are the difference between visualization graphics and imaging in the case of graphics they say it is making the pictures then digitally made synthesis sampling and illumination all comes at the graphics where isn't the case of imaging it is mainly enhancing or analyzing there to be in 3d images whereas visualization is exploration or transformation or viewing data in the form of image so this is the difference between image graphics and visualization if you look at the relation to other fields the relation of visualization with respect to other fields they can see that visualization is helpful and computational geometry it is used in psychology or cognition to gain certain knowledge it as the visualization is used as an user interface tool it is careful in the amine it means the hardware component are such it is helpful in Applied Mathematics visualization is used in computer vision it is also used in signal signal or image processing it is also used in optics so these are various application areas our relationship of visualization with respect to various other fields so to summarize in this module we have looked at what is the definition of visualization as given by card where the end user is able to extract or gain insight out of the data that is shown in the form of a visual structure we have also looked at the history of visualization how the entire process has started right from the starting of map till today the till the end dimensional representation of images then we have also looked at the broad types of visualization Barin we were looking at scientific visualization data visualization and information visualization and finally we have been looking at various application domains of visualization where muscial ization has been used in medical imaging has been used in finite state analysis has been used in the case of physics psychology and it is also used in signal and illumination or optical engineering these are certain application domains of visualizations thank you 
E0ciH4P7iKE,22,Program To draw a color cube and allow the user to move the camera suitably to experiment with perspective viewing,2020-05-22T14:33:20Z,COMPUTER GRAPHICS AND VISUALIZATION LAB-COLOR CUBE-VIEWER,https://i.ytimg.com/vi/E0ciH4P7iKE/hqdefault.jpg,Kamalakshi Naganna,PT11M58S,false,287,10,0,0,N/A,good morning students today have an optical comfort of reflection man which is a Shinto and here we are able to move the camera so ee to experiment with the concept of perspective so there are a modest perspective projection or perspective use is honorable normally whenever we want to create more realistic looking since we move we lose the projection that is on us a perspective pictures see what is first perspective projection all about suppose I have an object that is very real to me it looks very large and similarly if I have an object that is very far from the viewer it appears one is on the screen so this second term the object appears smaller on the screen in Scala for shortening or we call it as of foreshortening from another name for this perspective projection it's also called as natural we want exactly where Bunton it so happens the move all them whatever it's created for a perspective projection is something like frustum one of the frustum it's like a truncated pyramid truncated pyramid with a narrow end towards the user so normally in order to make those we find it we all whenever we have see normally whenever whenever we want to get an projection we have three concepts here one is viewer then the view walnut and finally the object in between the object and the viewer there is so called as want to scold us the projection plane on which is go in to eat this called projection plane in 3d it is called as the view one them so here the move olive also truncated pyramid and that truncated how are you obtained in this we are adding profiles one is a friend chipping plate and other one is of back clipping plane but which we are able to get quote exactly this okay that is this is how exactly the projections to check what is the how do we represent that in case of OpenGL in oppinion there is a function called as GL frustum which as experimenters and X 1 and Y will corresponds to the x axis y mean and ymax corresponds to the my boxer my access minimum or maximum eyelid and set near and far corresponds to the third axis funding I will be our yard to the center of projection out for you towards percent of projection so normally these values should be always greater than zero and what are this variant for under day from the center of projection reach this value is like something like the Kishori of cap once you cross this your objects over your object that it's of get that is what Sol projection plane is always orthogonal or perpendicular present then so as we all can see in this diagram we have x-men winding X way up towards the front clipping plane and xmax ymax - let fall towards the back it beeping so in between the blue the frame what exactly you are able to look and see in between this blue one and the light blue one this is called as this area is what is called as the frustum this is called as the frustum why are we adding these two see the lines are infinite in nature to make it fine light we need to add this two pills with which you are able to get this point truncated pyramid this old region is what exactly corners the can't--if experiment that is nothing with that frustration now how do we get this already I'm told this is what is another way of setting up this is you a left right bottom top near the business what is something next we have another function called as normally whenever we want to provide a camera position we use what to scold us look at function look at function so what is the purpose of this lipid functionals the Lucas function is used to position of camera with the eye pointing towards the camera that is e plus e is nothing but the camera the camera position to a look at desired function to our desired function ax am i and is it corresponds to the desired function next you X you white music correspond to camera up whenever I want to focus on the object I should make my camera to be focused towards what AB direction that is u X u Y and use that that is water so concerns how exactly the camera looks like all of you are able to see cuz this is where and focusing the camera so E is nothing but the camera I what exactly my eye is focusing on the camera and I am interested with towards or desired this is my object I want to focus so it does a X a Y KZ and now whenever I want to make I want to focus on all check my camera should be facing towards which - I'm direction so this corresponds to effects of 5 and upset now in this program we have used another concept here that is ready with a keyboard into this now what does the skee-bowl interface is all about the keyboard interface is set is done by using the callback registry called as black keyboard funk and it it should have a callback from sugar callback function and I'm explaining here so normally it is world in nature he is the name of the callback function in p1 it has three parameters what is the key you're going to have and where it is it located at that instant of time that is given by x + 5 so here we are using XY to move the v1 suppose I want to move the viewer if I lose see here I've used six variables to move whenever I have lowered is X I'll be moving - I'll be - 1 indicates I'm moving towards for validity of that x axis that is towards the left of this whenever I press capital X and the viewer we will be able to move towards the positive direction of the x axis similarly in positive direction of Y axis negative direction of Y axis and z axis and the z axis all this will be happening towards this now let's move on to the or let let let's move on to do the program so I not explain much for the new concept we have used in this only that I will be explaining their waters that and I am doing there s the spot has been already explained in the other program where all there is a change and we explaining only that part now what do we need for this we need a viewer right we'll need to focus the camera that is to be declared here so what I am going to use here is nut static viewer and the viewer is located in which direct which axis red axis and what value fine initially we always rocket it at this point this is 5 is what exactly the location so is is located at positives and axis at a factor are at the point 5 next we have another function already I told about whenever you want to use a camera whenever we have used a camera in your program we need to use what is called us look at function already act told about the first three parameter signifies the ie of the camera where exactly am focused and next us with that beside position with the camera up now look at this initially the viewer value whatever we have your 0 V or 1 V onto that is what we have set then 0 0 it doesn't design initially my the desired location is a Dalia focus and it will be always pointing towards the y direction so design at up position of course what rataxes with us y-axis it is under y axis that is one so this is the function used to set the camera position now what type of view we want for this program perspective view which function will be discussed to define that it does by using GL frustum all of you are able to see this genial frustum - 2 so x axis is X and that is left towards the laughter - so point 0 okay and left right towards the knife - does - then - 2 into 8 / w so obviously the item which corresponds to the the size of the window what exactly have considered here by default it will take Y whatever the size of the the graphics window you have represented in your program but this is what is a case that we have now and next is all of you can observe here we have very important finger towards the z axis see the neck that is the near value is 2 and the 4 values 20 point 0 similarly minus 2 and this is what is a 0 this is what is a program so the frustum is going to create a move aalam with all this value with the 6 totally the nine parameters and all the object value what they are defined should all the fingers see many causes this will not be able to see the object the object its disappear and another unique feature of this program and already it I explained we have used keyboard interface view so any keyboard interface we provide is going to have 3 parameters unsigned or a P int X & Y this is whatever time we have and next us whenever you take the keys into consideration we are going to have more we have used totally 6 keys and one is X other one is the capital X we are obscene oh and we are of one little SWAT ex-ante we are going to have white white and said see whenever I press the lowercase X viewer of 0 will be moving in the negative direction that is soft it gets decremented it keeps moving towards for anything whenever I press capital X the viewer starts moving in the positive direction so the value gets incremented by factor of 1 similarly for y and set are the same thing pantheon these values are taken from this but this is all about the program now it so happens see we have the values fixed there for me and for values depending on the nearer and for - for object ambience as you keep moving keep moving away away at at one stage you reach a point called as vanishing point and your object start disciplining so that all depends on your mirror and for value earlier your to Center projection and now for your own concept of rotation so this is all about the program thank you 
DPxkMPUEExQ,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-09T09:17:30Z,Visible Surface Detection (CH-10),https://i.ytimg.com/vi/DPxkMPUEExQ/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT35M25S,false,98,1,0,0,0,[Music] welcome to the epod cello lecture series and computer science for postgraduate students we are in this 17th module of comforta graphics so we have learned in the previous module about 3d viewing which is an important topic where we have learnt projections where we have talked about a parallel projection we've talked about perspective projection and we have derived some the mattresses that correspond to each of these projections so let us quickly go into the next module which talks about which where we'll discuss about visible surface detection which is an important aspect of comforter graphics ok here in this module we talked about we will be fully thinking about the 3d world so we imagine that all the objects are in the 3d world are all placed in the 3d world and then say given a vantage point or assume that we are standing at one position and we are viewing the 3d world so we see some of the surfaces and we don't see some of the surfaces we see some objects we don't see some objects because of their arrangement in the 3d world and not only due to that one object that is bigger or maybe one object that might obscure the other object so there are possibilities that an object is hidden by another object so from a given viewing position some objects are visible and some objects are not visible and to be more specific some surfaces are visible some surfaces are not visible so what we will see in today's module is about visible surface detection and in graphics terminology this is also called as back phase removal or hidden surface removal or back face culling and there are many names used in the literature so then to remove some thing that is a back face what we will do here is we will consider a face that is visible from a given viewing position so what do we do let me repeat that again what do we do in this is we select faces that are visible and we ignore faces that are not visible so that will be the discussion today so let us see what are the various so these are the various are the team members who are involved in this exercise so the objectives of this is to understand the need for visible surface detection in computer graphics applications and we will look at the common classes detection methods of visible surface detection methods so some of the common techniques that are used for visible surface detection and the keywords are image space object space visible surface detection hidden surface removal so we can classify these visible surface detection algorithms into a their object space or as image space and we can combine the object space and image space and call them as mixed methods so we have three classes here one is object space the other one is image space and the other thing is combining both we have a mixed method a mixed set of methods so what is object space so object space says that we imagine that we are in the 3d world and we identify objects that are visible within the 3d world and which are obscured or which are hidden in the 3d world by other objects and then we identify only those surfaces that are visible and label them as visible so we compare each object in the 3d world with respect to other object and determine or what is the frontal face or what is the back face and how do we so how do we remove them so that is completely in the object space whereas in the case of image space what we will do is will take a projection of the 3d world onto a 2d plane so that means what do we do is we assume that we are viewing from some position and at the position where we are standing are we are viewing we imagine a 2d rectangular plane and we assume that the 3d world is projected onto the 2d plane and we then try to see what should be the final value at each and every pixel position from the given viewing position so we check which phase is to actually should be applauded on the 2d map on a 2d plane so we look at the projection of the 3d world onto a 2d plane which is all about the image space methods so they they made space methods rely on this technique so mixed methods use a part of comparison in the object space a part comparison in the image space so that's how these mixed methods work so we will see examples for object space and image space as they are generally most popular most common methods exist and let us you can you can you can ask me one question like say why should we remove a surface that is not visible why should we remove back faces so the fundamental question is why should we do this at all the answer is why should we include faces or surfaces in the from the viewing position are whichever are visible from a given being version why should we include those faces are surfaces which are not visible from a given viewing position when they are not visible we don't have to apply we don't have to manipulate the object surface at all we don't need to manipulate that at all so we can save lot of resources a lot of time lot of computational capabilities and the operations are much quicker so the essence is identify faces that are not visible and we don't want them at all in the scene and only take those faces that are visible and do whatever operations we want to do only on those visible faces so that's where we save a lot of time effort and operational requirements and resources and so on so let us start with let us see the classification of the methods as we saw the in the previous slide the visible surface detection methods are classified as either object space or image space our mixed methods the classification goes like this a simple back phase detection method the a buffer method so we call it the accumulation buffer the a buffer method the BSP tree method the binary space partitioning tree method the oak tree method are they are classified under object space methods the other class of methods are depth buffer method which is fundamentally a famous example for image space method the depth buffer and in literature it is also popularly referred to as the z-buffer method the scanline method and array casting is a technique used to used in the image space methods for visible surface detection and finally the mixed methods they are depth sorting and area subdivision or more complex methods we will not focus on them in this session but we will focus on the on at least one example for each of the object space and image space methods okay so fundamentally all these techniques whether they're objects based methods image based methods or mixed methods they rely on two fundamental principles their sorting and coherence so sorting is to sort faces from as per their depths from a given viewing position so sort faces in the 3d world faces here is actually phase can be a surface or a face so a face is a plane which is a part of an object you can consider say if you imagine a 3d queue if we imagine a cube in a 3d world one of the faces of a of the cube is actually what we mean by saying calling it as face or you can also call it as a surface okay so sorting is like say how do we sort or how do we arrange these faces as per an order in some order and coherence is like take advantage of a kind of similarity irregularities within objects are within planes are within surfaces and within parts of a scene let us look at the very first method and for visible surface detection which is this simple back face detection which is an example which is a which is categorized under object space methods as you can see in the slide there from a given viewing direction if a face is not visible it is considered as back face so the important observation is given a viewing direction so the you can imagine a position in the 3d world and from that viewing position if something is not visible we call it a back face sometimes the name back face culling is used in if you look at the terminology in different books you will also find that the word culling it's called back face culling okay so as you can see the example there in the slide a cube is given and imagine your your cube is oriented in such a way that you can see only the three faces of the cube the remaining three faces are planes of the cube are not visible so do not include them at all in the picture so that we can avoid lot of processing and lot of manipulation and time and so on and the very first visible surface detection method is the back face detection which is a category of objects based methods as you can see there's a in brackets it is given as ouais ouais indicates object space method so we'll take examples for object space method and later we'll see examples for image space methods as well so the very first thing is the object space method so what does it say it is the simplest most method imagine you have you're given a 3d a three-dimensional viewing coordinate system so always where we are standing from there you erect three mutually perpendicular directions and that forms your viewing coordinate system okay so imagine you're you can you can choose your right handed coordinate system as you can imagine a the three coordinates which are the right-handed which are the three first three fingers of the right hand where the negative Z Direction is always the viewing direction so imagine drugs so many objects placed in a 3d world as you can see in the example shown there and the diagram shown there God there is a pyramid like object and we can assume that a plane or a face or a surface of a 3d object can be if you imagine that to be a plane then we can assume an equation for the plane as ax plus B y plus cz Plus D is equal to zero can be the equation of the plane okay so if imagine a pyramid like thing so there are four such and five faces for it and we have the equation that defines a plane as ax plus B waveless is that Plus D is equal to zero and a normal vector to the plane is nothing but the components of the equation you can take the a B and C the coefficients and they automatically are the normal vector components for the plane so a normal vector is very important attribute for a plane a normal vector identifies the orientation of an object in the 3d world so the essence is that when your viewing direction and when the normal vector direction of a plane are aligned with each other are almost in the same direction then we say that we are actually seeing the backside of it at the back face we call it a back face that means you are imagine you are sitting in a classroom okay what you see is actually what you are what you are seeing is the inside face of a so because assume normal vector is always an external outside and perpendicular to the plane that we consider so a normal vector is actually the direction of the normal vector and if your viewing direction are aligned so that means you are inside a classroom and you see actually the backside of the walls okay so that's how you can imagine so imagine that this this or the room is closed or the classroom is actually fully closed and imagine it's a closed box like shape it's a cube like a cuboid like and you have the normal vectors which external and outward so the normal vector direction and you if you are inside you are seeing the backside of it so that's how we can classify objects our faces as either front face or a back face so from the discussion given here it is evident that it is given there as the if where the direction is along the viewing Direction is along a normal vector direction drive face and they're seeing the backside of it a point P X Y is an inside point as you know given a plane equation an inside point is something that lies on the plane okay an outside point is away from the plane okay if this inside and outside should be understood carefully a point P XY is an inside point if it if it satisfies the condition X plus B y plus cz Plus D less than zero if it is equal to zero what we say it is a point it is the equation that defines the plane and it is less than zero is a point on the plane you can also include P XY and Z you can have that Zed coordinate at the point so when an inside point is along the line of sight to the surface the polygons must be a back face what is that observe that carefully when an inside point is along the line of sight to the surface the polygon must be a back face okay so if you can define the normal vector components as ABC because the equation of the plane is ax plus B a places at plus D is equal to zero so the normal vector components are obviously ABC and the viewing vector as we know the viewing direction is along the negative Z direction if you use the right-handed coordinate system so along the negatives are Direction x coordinate is 0 y coordinate is 0 and z coordinate is actually negative so VZ if you take the V vector which is the viewing vector direction the components are 0 0 VZ where we said is the SIRT component of the viewing vector which is in fact negative okay so when you or take the dot product so the polygon is a back phase if the angle if the dot product between the two vectors is greater than 0 so when the dot product will be greater than 0 when the when the visa is in is negative we have to also consider the that is because it is negative V dot N is equal to VZ into CE as you can see because the a into 0 dot product it is simply dot product a into 0 0 being a 0 0 then visa into CE is the dot product so that is what is left out of the dot of the dot product they are this dot product has got VZ which is negative in fact so if C is negative the dot product becomes positive visa D is negative if C is negative the dot product becomes positive so V dot n is greater than 0 so whenever C is less than or equal to 0 we can safely conclude that we are seeing the backside of a face we can ignore the face so we can call it as a back face so that's the important discussion in the very first and the simplest method for back face to face detection the other back face detection method that is most popular in the visible surface detection methods is the z-buffer are the depth buffer method which is categorized in the which is in the class of image space methods so in the previous example we have seen an example for the object space method in this this is an example for image space method now what is an image space method again as I as I said in the beginning of this discussion we take a projection of the 3d world onto a 2d plane and there we we check for each pixel what is the possible visible surface so that we can color that pixel with the color of that surface okay that we see so that's how we do it for all of the pixel for all the pixels in the 2d plane we take each pixel at a time and we start with the first pixel the corner say the left corner pixel top left corner pixel and we try to sort the surfaces as per their depths and then we'll see which surface is the front most surface and give the pixel that color the color of that surface so that's what we are going to do in the sad buffer are the depth buffer so depth the Z itself is generally understood as depth okay as you can see in the slide there the object depth is measured from the viewing plane along the z axis of viewing system each surface of scene is processed separately one point at a time across the surface so we take one surface at a time okay the method can be applied to both cleaner and non planar polygons surfaces again planar polygons is of interest to us non planar polygons are like one of the vertices of the polygon are not aligned with the other vertices of the problem or not in the plane of the same as that of the other vertices so we can call it as a non planar polygons so they are still polygons plane there but they're non planar okay two buffers are used one is the depth buffer and the other one is the Refresh buffer so depth buffer is used to store depth values for each XY position as surfaces are processed the important statement is the given there for this Z buffer algorithm depth buffer stores depth values and refresh buffer stores are the intensity before stores the intensity values at a given X Y position so as we process a frame so the the third buffer method is clearly given in this picture as you can see the picture there so we are viewing from a viewing direction or from a viewing coordinate system along the negative Z direction always imagine this keep in mind we are viewing the world along the negatives R direction okay now what do we do is we have chosen a view plane which is a bigger rectangular plane and we start with we take one pixel position at a time on this rectangular view plane we take every pixel position which is an XY position Z is constant so that means we are taking only the XY so because if we imagine this view plane to be the XY plane of the viewing coordinate system then the Z coordinate is obviously 0 so the XY coordinates only make sense here for assuming that the view plane is some plane that is either Z is equal to 0 plane or Z is equal to some constant a plane as you can see there surface s1 s2 s3 there can be n number of surfaces imagine we are viewing exactly along the perpendicular direction assume you are firing a perpendicular direction from a given pixel position the direction is perpendicular to the view plane so imagine a view plane and the direction is perpendicular to the view plane so s 1 s 2 s 3 and s n can be n number of surfaces and you can order them as per depths okay the important point is you can order them as per depths okay so one surface may be obscuring the other but initially you first order and later what do we do is whichever surface our face is closest is visible is closest to the view plane is is the the color of that is to be taken for that pixel so the algorithm is as simple as initialized the buffers we've got two buffers one is the Refresh buffer the other one is the depth buffer so Refresh buffer is initialized to the background color and depth buffer is initialized to the is initialized to a value 0 so for each polygon so take one surface at a time so one face at one surface at a time or the of an object okay you can imagine many 3d objects in the 3d world and take one polygonal face at a time and compute the depth value for the polygonal face again imagine this there can be planar polygons up there can be non planar polygons as well so take one polygonal face at a time compute the depth value set how do you how do we know at what depth the polygonal faces okay it is also interesting that at every pixel position on the view plane when you process the same polygon that might be at different depths so it is also possible okay so sad for every XY position may be different okay if the face is exactly parallel to view plane okay then the z4 for all the pixels of the face will be exactly the same okay we don't have to really worry but if the face is oriented like this and if the view plane is like this then you have for every pixel position you have a different depth value so as for each polygon do this processing compute depth Z for each X Y position on the polygon if Z greater than depth X comma Y that is take each X Y position and keep processing the entire thing for every X Y position what you do is compute depths okay if the depth is greater than the previous position so default is zero default depth is zero and if it is greater because we are in the negative Z direction the negative values that are larger is understood that they are backwards so they are not in the friend they're in the back so the smaller the magnitude the closer is the is the object on the face so as per depth we can keep comparing for every pixel position on the view plane take a polygonal face take one polygonal face at a time and start with the XY position the first pixel position on the view plane and fire a line into the 3d world and see where it hits the polygonal face compute depth and then keep doing this for all the faces and take the color so that's how we do it and finally what color the pixel has is exactly the color of that phase that polygonal face that is closest from that position for that XY position so how do we know what is the depth of a polygonal face given a polygon face with the equation ax plus B by plus cz Plus D is equal to zero how do we compute depth depth is the Z is the depth for a polygonal face how do we compute Z that is equal to minus ax minus B y minus D by C and the weekend we don't have to really do this for a really what is called pixel position instead you can use coherence instead you can use what is called a similarity that is for the next X position for the same face the next X position on the view plane for the same polygonal face you can easily compute replace X with X plus one comma Y you consider a scanline replace X with X plus one comma Y and wherever there is X if you replace that with X plus one X plus one what happens is minus a times X plus 1 minus B y minus D by C and you can you can expand that inside and minus a X minus a minus B Y minus D by C so already minus ax minus B by minus D by C is the previous depth Z X at X comma Y so we can conveniently replace that with X comma Y so we have recursive equations here the depth at the next X position is given by the previous X position minus a by C the depth of the previous X position minus a by C so we have recursive equations here which are very faster when in implementation in a program so imagining we have got one scanline so we go row by row wise one row at a time so we take we fix a Y and we keep doing this across the Y and then take the next way on the view plane and do the same thing and we keep doing this for all the pixels in the view plane okay so we can also do this recursively along an edge of a polygonal face by taking Y minus 1 and we can easily do this using because as we know the next X X dashed is equal to X minus 1 by M you don't have to really computer your news again recursive equations if you do a computation on the previous step you can use the computation the subsequent step using recursion has given there the next X position is X dashed is equal to X minus 1 by M minus there is substitute in place of X X minus 1 by M in the previous equation for and what we get is minus a X minus 1 by M minus B into y minus 1 minus D by C which is Z X comma y plus B by C as we know M is negative for this for the edge that is like this so M is negative so the equation is X minus 1 by M so that this is how we look at the depth buffer method a very important thing in the visible surface detection methods it requires two buffers the depth buffer in the Refresh buffer it deals with only opaque surfaces so there are some drawbacks of it obviously it takes up only one phase at a time for processing it doesn't take multiple phases at a time so that's one drawback a major drawback so but the advantage as you can see this is simpler it is easy to understand no sorting of surface is required polygons may be processed in any order it is easy to implement yeah the next important method which is very popular in the visible surface detection methods is the scanline method okay we have seen the simple back phase detection method which is an example of object space methods we have seen one example for image space methods which is the Z buffer at the depth buffer method another interesting example is the image one of the image space methods an example for image space matters is the scanline method okay so this scanline method it works like it assumes a scanline across a polygonal face and the advantage over the previous the depth buffer method is that we can process a number of polygonal faces simultaneously so we don't have to take each polygonal face so there can be too many polygonal faces in a scene so we cannot refer to take each and every face at a time and sometimes there can be opaque faces there can be transparent faces there can be any type of faces so we need to process multiple faces at a time so this scanline method is advantageous as we can take care of multiple faces and faces that overlap on each other as well so the is an extension this this algorithm can be used for polygons that are intersecting across a scanline okay process from left to right and depth calculations for each overlapping survey so we can have n number of overlapping surfaces like this and we can process all of them at the same time that's the advantage of this method the intensity of the nearest position is entered into the Refresh buffer so let us see how does this work so as you can see in the picture there we have two surfaces we can call them either a phase or surface so imagine imagine they're all planar so both of them are playing off the first surface is identified as s1 the other surface is identified as s2 and where s1 and s2 a part of s1 is overlapping honesto that means there is a partial overlap between the two phases now s1 is determined by ABCD and s2 is determined by a FJ is identified by the four vertices a of GH okay now the first scanline as you can see it is intersecting the edge a B of s1 and edge H of s 2 and also edge BC of s1 and edge F G of s 2 so it is intersecting four edges of these two surfaces of this two faces so but if you look at scanline 2 & 3 the number of intersections are that it does is still 4 but the but the difference between scanline 1 & 2 is that as you can see scanline 2 & 3 there is no difference here as you can see scanline 2 intersects ad scanline 2 intersects the eh as the next intersection point is on the ehh the next intersection point for the scanline 2 is on the BC edge the next intersection point is on the F G H so this the the intersections are exactly the same for scanline 3 as well so 2 & 3 we can use the principle of coherence okay we can use the principle of coherence so whatever we do for 2 can be exactly copied for 3 and we can simply I do not have to bother about the rest of the computation so we can exactly copy the same set of operations that we did on two for three but one is different from the two entry because one intersects a be a different edge than BC then eh then FG so what we do is we note these intersections and then between one edge to the other edge we take the color of the pixel a color the surface whichever is being intersected say s1 between a b and b c s 1 is to be selected for scanline one between eh and FG 4 scanline 1 select surface s2 between the edges bc and eh there is no intersection or there is it is it is like an open space so we don't have to bother about it so don't take anything there and beyond so that's how we try to select each scanline and we prepare an active list here what is an active list active list is the edges across the current scanline so whatever it is that the scanline touches and they are also sorted in the order of increasing X as the scan line intersects each edge see the X order so put them in ascending order that is increasing order flag each surface and indicate whether it is on or outside of the surface so as I said earlier it is s1 as long as we are between the two edges of scanline of a surface the surface should be on when we are outside of the surface it should be off the surface should be either on or of honor of here means we are taking the color of that pixel the surface pixel or we are not taking the color of it that's it it is on or off means that so at the leftmost boundary of the surface the flag is turned on at the rightmost boundary of the surface the flag is turned off so that this is an interesting method here no depth calculations are really necessary and for the active list one for the scanline one but for this can line 2 & 3 we may have to compute also the depths ok scanline one is to it differently from Scanlon's two and three but scanline one nor depth calculations are required intensity of either s1 is on our s2 is on as you can see for the discussion in the now given in the slide for two and three we need to also look for what is the what is the combined color so for scan lines two and three there is an overlap so they are going across an overlap region the overlapping region is between eh the overlapping region is between eh and the BC edges so though for the overlapping part are overlapping region for the scanline two we need to combine the colors of both surfaces s1 and s2 and then we can give a combined color there so that's the interesting point so if s1 is prior okay we can if they're opaque if they're opaque we can take the color of the surface that is overlapping the other so the color of surface that is to the front if there if it is a transparent surface what we can do is we can take the combined effect of both and we can take the common color there so it's very efficient algorithm has we can process multiple surface at time only when overlapping is there we need to calculate depths otherwise we don't have to oh it takes advantage of coherence and the advantage and disadvantage are does not work for surfaces that cut through or cyclically overlap each other takes advantage of corenz many overlapping surfaces can be processed so here we have learnt in this module how visible surface detection czar classified and we have seen examples for each of them one is for objects based method we have seen and we have seen two examples for image based method so you can you will be able to you can explore more on the on our books and other literature thank you 
IlOjPXcwSeQ,27,"Subject:Computer Science 
Paper:Computer Graphics and Visualization",2016-10-27T07:12:28Z,Animation,https://i.ytimg.com/vi/IlOjPXcwSeQ/hqdefault.jpg,Vidya-mitra,PT30M35S,false,396,6,1,0,0,you welcome to the epod Shella lecture series and computer science for postgraduate students we are into the 20th module of the subject computer graphics and visualization in this lecture series for the subject computer graphics and visualization in the previous module that is the 19th module we talked about rendering an important technique which brings or what is called which yield which imitates the real-world objects as closely as possible so with advanced rendering techniques like ray tracing we were able to achieve the visual realism that had been the ultimate goal of 3d world at the 3d virtual world that we have created in this module we will talk about animation which is the animation is like say a computer graphics without animation is something which we cannot afford to lose so animation is an important concept or important topic which we should discuss as part of this series as part of this subject so this is the 20th module discussing about I will be discussing about the concept of animation okay let us get into the objectives the objective is to understand the basic terminology of animation to understand the principles behind the techniques of animation so there are many techniques of animation so as soon as we we hear the word animation something immediately pops into our mind that pops up into our minds animation is like say the cartoon shows the kinds of 3d animations the kinds of simulations and so on and so forth so all that is true and there's a lot of a lot of techniques behind this the very word animation so animation is something that is fully created using electronic means that is like computer so animation is fully select done and created and designed created and done fully using electronic means or the computers now the some of the key words here are twinning kinematics and many more so let us understand the very definition of animation so animation is something that is likes a series of frames that are constantly changing before us are like say in simple terms any time sequence of visual changes in a scene is can be considered as an animation so animation is a series of frames are constantly changed with a frame rate so the important phrase there is the frame rate so the frame rate decides how many frames should be there in a second so the animation is much smoother and it is valid for the chosen animation what are the visual changes here so what do we mean by visual changes here so anything that changes before our eyes is a visual change so the change can be in terms of shape the change can be in terms of size the change can be in terms of color in terms of texture in terms of many other properties of the objects so a visual changes to any of these properties of objects and many more here listed can be considered as animation so now you can wonder say like say these changes give us a feeling that something is happening before us something is getting animated but the characters undergo these changes so that we feel that they're in an animation so the various versions of animation that people have been trying for years people have been using warriors r2d2 and half d 3-d and 4-d what is 2d today animation is something where in the olden days when there was nothing like 3d or the 3d animation software like Max and Maya when nothing of that sort who are available then it was only 2d só 2d is simply basic plain images and they're constantly changed and where the 2d version lacks a kind of depth and a kind of feeling that it is made up of real-world objects so we will feel a kind of say we will immediately come to know that it is a pure cartoon character in the case of two and half d the half there is nothing see don't worry about the the half sing half there half is an addition to 2d the half is giving a feeling to the users of 2d are the viewers of 2d that it is 3d so giving a 3d feeling by using 2d is 2 and 1/2 D giving a 3d like feeling in 2d is 2 and 1/2 D so by adding shadows are by adding some kind of what is called extra features by giving a direction to them and so on and so forth we give them a feeling we give the viewers a feeling that it is 3d ok so that is 2 and 1/2 T the next kind of animation is 3d so 3d is pure as we discussed earlier using studio is introduced to do max or Maya like software like blender like software so we can create 3d objects and we can create views and we can do all that so that is purely 3d we get the feel for the depth and we get the feel for the real like objects and the next thing is 4d so what is for T we know there are only 3 dimensions for real world objects and even the artificially created objects the 4d is an addition so we add something like a feel for touch and the weekend we will have extra gadgets around us are we have some kind of changes to the physical world where we are sitting and we might wear some kind of gloves we might wear some kind of electronic cloves kind of headset and we feel that we are in another world where we can smell we can touch and if these kinds of extra attributes are added to the 3d we say that it is 4d okay so animation can be in either of these forms before an animation is done before something is visualized we create our the weak on you can call them some kind of these master animators or people who are like the the core people industry so they'll be creating what is called a storyboard the storyboard is a is a graphical layout of the entire animation sequence so they will be drawing the characters or they'll be positioning them or they'll be knowing so like say where when what should happen they'll be doing all that paper or maybe it can be in the form of electronic means or it can be in the form of a slide it can be but it is fundamentally a pre step and an it's a pre step precursor for animation okay it's a storyboard well once the storyboard is done we'll get a feel for how the animation is going to be how it will be visualized at the end so it's a graphical layout of the actual animation once that is done the objects are defined their properties are defined then we'll be using a technique like say a keyframe technique or a keyframe animation technique where there are keyframes which are important frames the keyframe means an important frame so we'll be the master animators will be defining the keyframes say keyframe 1 and after say after a little Jewish in time duration they'll be giving another keyframe are they'll be defining another keyframe so the master animators will be defining the keyframes where there is a considerable change or a noticeable change in the course of animation so the keyframes are defined by the master animators and the in-between frames are done by the junior animators or you can say they are the subordinates and now this place is filled up by the machines so the machines are the computers the day they interpolate the in-between frames of two keyframes okay they interpolate the various possible other frames depending on the frame rates chosen so let us understand what is frame rate okay so the frame rate is the number of frames per second as we know for animation we can still go to a number say 12 frames per second 15 frames per second is still acceptable it depends on how much at how much action we would want in the animation it depends on the frame rate depends on how much action we want in the animation so there is a lot of action a lot of changes are to be there then we'll increase the frame rate otherwise really we can as we can afford to have loyal frame rates the higher the frame rates the higher is the processing capability required and vice versa and the video is a video or we can real-life objects are what are captured in the video which is 24 frames per second are 30 frames per second and even if we want can go higher monitors have 60 frames per second is the frame rate defined the refresh rate for the monitors and animation we can still be happy with 12:15 and so on so some of the popular techniques of animation which are listed here on your screen but this is not the exhaustive version there are many more recent techniques we'll be discussing some of them here in this module the techniques of animation so the olden day animation techniques the very beginning techniques are initial techniques of animation with the frame by frame animation or the keyframe let us let us know the list first and then we'll go into details of each of these techniques the frame by frame animation keyframe animation onion skinning rotoscoping squash and stretch second reaction morphing motion capture kinematics and there can be a big list so added to this there are many new techniques which are not discussed here so but some of the standard techniques are given here or let us see each of them in detail the frame by frame animation is the olden day technique used for animation where each frame is individually edited individually composed and they're all played at a faster rate so that a character walking if we want to show that so if you want to have 10 frames if you want to do it in 8 frames or 10 frames or each and every frame you should manually create edit and between 2 frames there will be hardly any change so each thing you should do it manually ring and individually you can also use machines for this or computers for this where you can place each frame along a timeline and then you can quickly play them back so that you will have a feel that there is the car the character is actually walking so again the important thing is how many number of frames other is frame rate is what is important based on that the number of frames are actually decided are the number of frames in which the content should change will be decided okay so the first thing as we saw is frame by frame animation the next thing is the most popular and the most used animation technique which is the keyframe animation where keyframes are key frames here are the important frames important frames are where the frames where the content has a considerable change okay that the changes in the animation are considerable okay between two frames the changes may be gradual but exactly at the key frames that is if we compare key frame one and keep keep them two there'll be a big difference if we compare key frame two and key frame three there will be a big difference so depending on the kind of that is how you design the animation how you want the animation to happen if you want sudden change to the character's properties you can give a keyframe with less interval with less spacing between the previous keyframe and the current keyframe if you want a gradual change you can keep keyframes much apart okay along the timeline so once the keyframes are defined as you can see in the figures here the first keyframe has got a ball position here second keyframe ball above and third keyframe ball here in the to the right and now you can give it to the software like any animation software it automatically tweens the word tweening means interpolating the in-between frames are in between two key frames so the word tweening has that meaning the number of in-betweens is decided by the frame rates as required now the kind of interpolation are the twinning depends on how you want the object to go or what kind of path you want the object so if you can do it in linear interpolation you can do a kind of what is called a curved kind of interpolation you can decide on the shape of interpolation or the shape of twinning okay for the in betweens so how you or tween the in betweens or how you interpolate the in-between depends on how thee a part should look like okay so another technique used for animation is a squash and stretch you can imagine the cartoon characters where a cartoon character like say is a Tom and Jerry are like say your favorite characters where which keep running constantly one behind the other so once they hit an object array or a very firm wall like what happens is the Tom or Jerry they bombard are they bang the wall and the shape suddenly changes and so the shapes what is called a squash and stretches like squash is like they're shapes you know this shapes get squeezed and the stretch is like their shapes elongate as you can see here Lee so you can you can use such techniques for animations okay some of the other techniques that are popular in the animation world are the morphing which has been quite popular and we convert one object into the other but this is not just as simple as converting one thing to other anything to anything is not possible so you cannot convert any random thing to any other random thing there is a condition so there is some specific condition is to be satisfied by the two objects participating in morphing technique for example you've got a initial object you've got a target object so they should agree on some condition what is that condition the condition is that the number of vertices with which the initial object is made up of should be exactly the same or the as that of the number of vertices with which the final object is made up of again let me repeat for the four morphing animation to happen the two objects participating in a morphing technique should agree on some condition also it should satisfy a condition what is that condition the number of vertices with which this initial object is made up of should be exactly the same as the number of vertices with which the final object is made up of so that you can perform a morphing so we'll be mapping these vertices and according to the shapes we'll be changing it as you can see here a person is change to another person an object like a banana has changed to some other object like an orange or something okay so that's where morphing technique is so useful so here we can perform this morphing technique we can understand this better by understanding by looking at thing here the using what is called linear interpolation imagine you got an object with two vertices so an object is made up of two vertices now you want the object to have three vertices okay initially there were only two vertices now the final object is made up of three vertices now how do we interpolate from two vertices to three vertices how do we map so we cannot map as per as far as morphing technique is concerned the constraint is concerned the number of vertices should be exactly the same now because they are not the same we will add an extra vertex to the initial object so that is the extra vertex added okay you can look at the extra vertex added and the extra vertex is no map is now changed and accordingly we perform a linear interpolation so that we see the final shape with the three vertices as you can see here for this we have a technique and algorithm I say a set of steps we'll see that later so another simple thing which you can better understand the technique of animation is shown here what a triangle the triangle is to be changed to a rectangle now triangle has got three vertices the rectangle has got four vertices now how do we map between the two is we add an extra vertex and to the initial shape and we map the now there are four vertices as you can say so this extra vertex is added on any one of the edges of the are the sides of the initial shape as you can see here it is added to one of the edges of the initial shape so that they can be conveniently mapped so that the shape is has now four vertices which can be conveniently mapped to the four vertices of the rectangle and you can perform a linear interpolation okay so the technique used is the algorithm used is as shown here if we want to so you can also equate edges or you can also equate vertices you can follow either method while performing morphing so for the initial shape and the final shape you can either compare the number of vertices and you can compensate for the number of vertices or you can compare the number of edges and you can compensate for the number of edges this method takes edges into account let L K o be the and L K plus 1 will be the number of edges other line segments you can call number of edges of the two consecutive frames K is the initial key frame k plus 1 is the next key frame define l max maximum is the number of edges in the initial shape in the final shape the maximum L mean is the number of edges in the among the two key frames so let us define n e and E is the number of edges of key frame min so okay number of edges which is L max mod L min so we are performing a modulus operation here L max mod L min and that value is assigned to any what is any number of edges NS is number of sections NS is number of sections so which is typecasted to integer and it is a division between L max and L min so it is actually what is called integer version of this division because the division can give a float value or a fractional value we are converting that into typecasting the integer now see here an example if LK is 15 and L K plus 1 is equal to 11 we divide the four lines I can you can take the vice versa because initial key frame should be having less number of it you know edges and the final keep them to be there and more we divide four lines of key frame k plus 1 into two sections each as per this max is 15 min is 11 so we divide four lines of key frame k plus 1 into two sections each okay when once we make them into two sections each now we've got four so okay the difference is 4 that's why the remaining lines of key frame k plus 1 are intact so what you can do is take two edges of one of the key frames which has the less number of keyframes less number of edges the key frame that has got less number of edges and now you divide two of the edges into two parts each so we get four so now they are no matching they have a they have an equal number of edges for each other for the first and the last keyframe similarly you can use vertices that we can be K plus 1 be the number of vertices for the caithe and the K plus 1 the key frame and similarly you can define v-max and we mean maximum is the higher number of vertices minimum is the lower number of vertices NLS is the number of line sections and P is the number of points so we have done a similar thing here but because this is vertices and remember the previous one was edges either thing you can try if BK is equal to 3 and VK plus 1 is equal to 4 that is there are three vertices in the first you can imagine triangle you can imagine rectangle number of line sections is equal to NP is equal to 1 so because the difference is 1 so add one point to one edge of key frame K because key frame K has lesser number of vertices add one extra vertex to one edge of K frame K so that as we can even refer to the previous slide so where I have shown you an example of a triangle converting that to rectangle that's what is explained here ok now how do we simulate the accelerations so linear interpolation is perfect how do we simulate acceleration the acceleration is what are deceleration there is a sudden change in the velocity there is a change in velocity suddenly something is running with much speed suddenly something has come to a standstill so there is there's a lot of change in the speed what is the acceleration so how do we switch to speeds and how do we imitate this acceleration and deceleration for characteristics or we can try these trigonometric functions and where the the initial differences are less here but suddenly there is a change and with passage of time is like there is a lot of movement ok so there is a slow initial moment there is slow initial moment and later it is very high so that is we can keep distances between the various frames in such a way that we can simulate the acceleration and deceleration the spacing is adjusted according to the requirements okay now the deceleration as we discussed before so you can perform similar such spacing you can you can vary the spacing between various frames are important frame so that you can simulate acceleration and deceleration okay so the same thing is explained here and you can also use curves or you can also use a paths which is part based animation you can you can you can define a path and you can hello the object to follow that path so a damping motion for example a ball when it bounces it slowly comes to rest okay so the bouncing ball animation can be performed by properly defining the shape of the bounds are the the kind of steps that you define how many steps in which it should come to rest okay you can define that if you want a highly elastic ball it might come to rest after a long time so depending on the kind of objective what you are animating you can decide on the number of steps before which the objects come object comes to rest okay so it's a damp sine function you can try KYNA Mattox and dynamics is the next and the most discussed most discussed in the literature what is kinematic sizz imitating human-like movement and giving human-like movement to artificially created characters for example how do you give a character a kind of here say suppose for example you have created in the 3d using a 3d software have created a human character now how do you give the human character a walk or a kind of human-like movement we have got joints we move so we first more leg before we bend our legs and we do all that see kinematics is a study of imitating human-like moment and so that is emulating human movement using artificial characters okay now in kinematics you can talk about two things one is forward kinematic the other one is inverse kinematics what is called forward kinematics you can imagine a robotic arm here the the end thing that is this end point is called the end effector so it is where that is finally its position is finally decided that is why it is called the end effector in forward kinematics we adjust the angles of these various joints and elbow extensions and arms such that this is positioned finally at the desired a point this is finally positioned as desired so by adjusting the angles here of the various joins and other things and other components we will be finally making it a point at something our position at some at the desired location now there is forward kinematics as you can see here the animator specifies the joint angles q1 and q2 the computer computes where the effector should be so the angles are given and the angles for the various joints are given and the software or the computer should simulate a find order compute the end effectors position final position there is forward kinematics in the case of inverse fine American emetics this is exactly opposite we position the end effector and we in turn calculate the angles for the various joints so angles are computed the end effector position is given prior and the angles are computed so inverse kinematics is more popular than the forward kinematics so the reverse process that computes the joint parameters that achieve a specified position of the end effector is known as inverse kinematics the animator specifies the end effector position while the computer finds the joint angles the q1 and q2 exactly opposite of the top forward kinematics inverse kinematics is more popular to the forward kinematics and as you can see a comparison between the two specified conditions in forward kinematics and it computes the end effector position the opposite of that happens in inverse kinematics it's goal-directed motion so where we specify the position of the end effector specify goal positions of an defectors compute conditions required to achieve goals okay so goal is defined and what conditions should achieve that goal is to be computed or with this we come to the end of the discussion on animation so we can discuss more into what is called the other techniques of animation like motion capture in fact with motion capture is one of the popular techniques in the industry but due to its laborious require due to the requirements that are a big there is installations and laborious requirements the motion capture is restricted it's its application is restricted people have tried motion capture and have successfully applied and artificially created characters so the motion of a real-world object and a character real world performing objects is is actually applied and taken and recorded and is applied on an artificially created character so let me repeat motion capture is one of the fantastic techniques where the motion of a real-world object is recorded and is exactly imitate rx exactly overlap R is exactly applied to an artificially created character so that the artificially created character exactly behaves as that of a real-world character so that's where motion capture is one of the fantastic techniques for used being used for animation there may be many other techniques like rotoscoping which which we had that in the list but i did not mention that rotoscoping is another technique where we can keep the background can be fixed and we can keep changing the foreground so that is where rotoscoping is where on a video we can perform some kind of changes so on a video when we perform changes and we perform are when we put for example the best example for rotoscoping is as a video and there's a text at the end of the video so at the end of the movie we'll see the scrolling text so video with the scrolling text it says is a kind of rotoscoping another kind of technique you can imagine is onion skinning which we have not discussed here onion skinning is one of the fantastic techniques used in the flash software you got this onion skinning what is onion skinning onion skin is as you you should know exactly where to position an object suppose we want an animating ball you want a ball to be animated what you can do is you can for the to have to exactly define the previous position of the ball you can take the onion skinned version of it and you can forget about all the previous other versions let me repeat say for example we want to do an animation you don't have to define all the possible positions of the ball rather you can take onion skin diversions of the object in the previous frames so that you can position the current you can position the object in the current frame perfectly so you can position the object in the current frame so perfectly that's what onion skin so say for example in a tenth of frame it is important it is it is enough that you know the previous two or three frames you don't have to know the first frame when you are positioning the ball in the tenth frame so that's where you can perform onion skinning so some of these techniques are discussed here you can explore more and in the literature and the books referred or with this we come to the end of the 20th module for the subject computer graphics and visualization thank you 
_HW1M5sZOkw,27,"This is the 1st  Online CSE class conducted on April 1st, 2020 on Computer Graphics and Visualization which is Module 3 from the CSE 6th Semester. The content is part of the VTU Computer Science Syllabus. The  CSE class was conducted by our Professor Priyadarshini. The Class captured the functions related to 3D Transformation functions like glTranslate*(), glRotate*(), glScale*()


Module 3 | CSE VI Sem Computer Graphics & Visualization | VTU | CITech",2020-04-30T17:17:52Z,"OpenGL 3D Geometric Transformation & Matrix Functions, CSE Online Classes by CITech",https://i.ytimg.com/vi/_HW1M5sZOkw/hqdefault.jpg,Dept of CSE- Cambridge Inst of Tech,PT29M,false,21,0,0,0,0,[Music] you good morning everyone today I am dealing with the topic OpenGL 3d transformations opens your 3d transformations functions okay and the functions which is available in OpenGL we are learning under these topics okay the functions available under these three scenarios we are actually dealing it that two based on OpenGL or geometric transformation matrix operations matrix tax actually let us learn one by one before going to put your geometry transformation let us learn some of the basic concept that we have assumed or that is assumed in OpenGL package okay in a good library of opens you a separate function is available for each of the basic geometric transformations which are the geometric transformations we have translate scaling rotating sharing and reflection as usually the it's not a basic it's an advanced basic only three we are taking here in our cinemas so here OpenGL is designed as a 3d graphics API will all transformations of this is specified in three dimensions so 3d graphics API isn't designed in such a way that well the API is are designed for 3d purpose not for 2d purpose fine so the it to 3d is incremented all 3d api's we will apply a 2d surface okay we will see how it is so we don't have separated 2d functions I'm ready function especially for geometric transformation functions okay internally or coordinate positions are represented as for a moment column vector so that means our coordinate positions are X Y and right which are the coordinate positions a coordinate position for each and every point P is nothing but it is X Y and such okay we have three coordinate positions but this coordinate position is actual for element column vector it is self column vector we have one more addition to this which is nothing but of homogeneous coordinate system is what they try to tell our transformations are represented using four plus four mattresses our matrix we have 4 plus 4 3 cross 3 is our 2d as we are not implementing a 2d concepts with respect to the transformations of these we have there is only one matrix which is that 4 cross 4 we don't have 3 cross 3 it's only theoretical live alone but the implementation will be in OpenGL practice we have 4 cross 4 matrix performing 2d transformation within OpenGL is children in just a matter of few single value for the transformations in the Z direction that cause no change in that dimension so if you were to perform 2d because we are learning that aperture has already functions so if we want to perform 2d transformations then we need to operate on that we need to operate not sad so it's quite easy it's not difficult here which cause no change in any of the dimensions or in any of the values let's say start seeing one by one about the functions so what is the first function we are learning here the first function we are learning is Gio translate function and then we will not you rotate and sheer scale all these three functions has all these three functions hands star star indicates yes or B star indicates F or B star indicates float or double that we will find in all the green transformation functions right so now we will see a translator so trusted we have a three translate parameters that is txt y9p said so how do we use it so a function to your translate every function as you know that the first two letters G & G of U or two o'clock will be in a small case and the next word every word starting at the VP character so star either you replace by F for acting what is the x dy and listen can be assigned with any real number values for any values for two dimensional applications we will put that is equal to zero point zero in the third place we place what zero point zero otherwise other than zero if you place then it applies a 3d transformations or really translate functions to die initial position is represented as for element even two-dimensional represents as a four-element column matrix with a set called component is equal to zero point zero so what they're trying to tell you here is I have 4 cross 4 matrix T X T YT set is in the fourth column 0 0 0 TX if I have a TX then it is - okay let us see here what I have 25 so DX is and it is 25 in the same way in a y0 0 and then 0 it is - fine like that the third one will be 0 0 0 and exact as if I bought a 2d and keep yourself as 0 so this is 0 that 4th 1 0 0 this is a homogeneous solution your 4th row it will be 1 so this will become our matrix so this is a full cross 4 matrix it is not even though it is a 2d it is not 3 cross 3 matrix it is 4 cross 4 matrix our cell value will become 0 so we should not worry about this I'd wanted to use put it over theta degree around axis X Y and G rotate theta V X V Y we said theta is my first parameter X Y cell is nothing but a coordinates so vector B all these three coordinates this vector itself defines orientation for our rotation axis in which access they have to rotate so then I have to use that respective matrix because we have in the three dimensions we have three matrix for the rotation rotation with respect to X rotation with respect to Y rotation with respect to that so to know all these three dimension matrix in which direction we have to rotate so we have to keep this either one okay so next sit down theta is nothing but a hangar how much we need to retain - so it is a degree it will be in the form of a degree medically we have a root daily or a function embedded which converts that would be great Iranian for any kind of a diplomatic calculations but to me like a son we are as if it is a unit vector so rotation in 2d system is rotation about being set axis no you're you're trying to implement rotation in the two dimension where I will see that axis will be should be equal to one so any Alexis if you want to use you should only use one point zero because we have already told it is a unit vector either zero if it is not protecting with respect with those access on one if it is rotating with respect to in your axis so in 2d what I will do I will use one for the said axis because the 2d rotation have your water is seen the matrix 2d matrix is equal to so axis rotation in the 3d that's why whenever we are using 2d we will see to that it is what you take with respect to that axis so let's see the example here you're rotating F F is my starry please if it's a floating value so I know 0:55 yeah thank you degrees make theta zero zero because I wanted you with respect to z axis so that axis will be but point Z if you want to use with respect to x axis and keep x axis as one point zero and y axis is zero point zero x axis as zero point zero okay zero zero open to 3d transformations with respect to jail scale cheers killing has the factors a 6x white and this set against our stands for and flow toward our success my essence get assigned any kind of real number values exception Skelly do these systems involves changes in the x and y dimensions and the scaling factor of one point see if you want to be scaling with respect to B then C 2 that the 2d will have certain axis will have one point single which was no change in the self coordinate positions because in scaling the value the formula that we use this X into SX a sin no sex right so you have two here if you might implement zero everything will become a zero here so if it is a already made here it multiplied so this is not possible so multiply this by one and it retains the same value if I multiply I get the same value of x if such a zero it applies a quick one fine and there is one more point that you need to know curious so whichever the access especially in two days and access will be one so here this is my example for 2d with respect to three scaling so I am using scaling with respect to x axis to scant respect to y-axis three unison you can use - also here and that will be once why have we used 0 in the Z value zero interest rate function but it's getting there losing 1 because 0 has expressed in X you have an addition so for any kind of a Mayan coordinate axis final if you add 0 finally get the previous exact the same one existing one and the same way is X into so when I multiply from x 0 different things will become 0 so I have to make it as one more important note we should do see how that is we should see - that is why I said we should not use 0 any times it will be cover processing it why it will become a processing error because the composite transformation what we have most of the cases the objects the complex objects we will be drawing in the potential trying in open shell complex objects will be drawing open shear so most of the time when we have a complex project object is drawing composite transformations will be applied so when we are using a complex or composite transformations in composite transformation we will have universals what is the scale inverse the inverse of scale as we already know it is 1 by 6 1 by sy and f-15s set so when the denominator is 0 and we buy a divide by 0 we will and counter I divide by zero system error so in order to avoid that so we don't use zeros so next we will see some of the matrix opengl matrix operations in opengl matrix operations we have jail matrix mode jail might explode let's see what is real matrix mode chill matrix code has a parameter two parameters in our syllabus GL projection and real model apart from this we have tour that is a texture and color as we don't use those two parameters in our we do syllabus or in our prescribed syllabus we don't deal with that we deal only with the projection I don't wanna be so what is a projection and modern uses June projection says that the matrix that is to be used for the projection transformation this is in the fishes we have reshape function which we'll be dealing with an aspect ratio so this zooming zoom out aspect ratio perspective projection orthogonal projection everything is a parameters all factor set is applied on the camera so to store the so while the camera related informations or the matrix a camera related information stored in the subject matters which is sheer protection vengeance so before we call any of these bloomin functions that is all you should say that I am keeping ready for you by the projection matrix now you can store all your viewing functions in the projection so till modern you used to store and combine the geometry transformation settings now I have a separate matrix tan which is so used to store the geometric transformations so what is geometric transformation your translate rotate and scale etc because even that has to be applied through the matrix so again matrix mean it is attack so that separates that is nothing but a model any kind of these if you are applying then you have to apply in this modern view matrix so before you use these geometry transformation you need to call what are we let's see examples all those by this world the geometric smooth function will have G and what with you it's not gel projection rates and x so just before we see an example of how it might applies we will see what is G load identity and G unload matrix we can assign the values of the elements of the current markets and there are two functions with open shield so that means correct matrix we can store me by default we can force to restore some of the values in the form of the matrix in a two ways two functions one is with the g-load identity and - with respect to the G load matrix you'll note identity the matrix 2 identity matrix that is by calling the function G load identity alternatively we can assign other values also this is just assigning the identity matrix then to column the first column will be filled for a second for a third column so now store this matrix to the current the current matters which is there what are you Mattox more that we can ask this if I assume element 16 array which has 16 element array of floating point because assuming we have given a flow F with a parameter element 16 and the surfing's code by Daniel 4d which used to designate the data type let us see how does it work to illustrate the whole ring of matrix being she likes the modelview matrix with the following code example I'm calling a modern view matrix current dear Lord assuming the modelview will have a load identity initially Jian float16 RA position we have taken K is for the for-loop abused for you just to fill the array position elements of zero will have flown to K it's nothing but zero point zero content of elements now the contents of elements will be the first element is nothing but element of zero which I call it answer zero point zero because I am talking it ask okay what is K case actually zero incremental elements of one we have the value one point zero five element of two will have two point zero so like this this is the value that I'm storing those sixteen are a position there are 4 cross 4 matrix what I'm doing now my god this is my elements this complete are I will go and storing these modern view matrix this completed image that is nothing but this is my array values which stores in me what are you so like that you have so many options told me are you we can also concatenate a specific matrix with the current factor so if you want to concatenate means apart from your transformation functions automatically gets concatenated apart from that if you want any other function to concatenate with correct matrix then you have gee my mattress okay so there is nothing but I multiply the matrix that is nothing but else other elements by default your translate rotate and scale will have me be stored in a matrix form so my next month form obviously gets converted from those three then you have to multiply again the suffix code is I know if on be the current matrix is post multiplied by the matrix specified easy but you might say this product we places thing I see that the current matrix whatever is there it's post multiplied by a trace specified enough but as first multiply you see an example for the state I have a matrix morning I'm calling it doesn't know any identity sex the matrix to the right actually this scenario currently what are you so much let us dream according to the textbook that is Harvard vaguer let me also this is my modern we stack matrix tack what I have I have no identity when I have no identity down but can be the next one month matrix it's nothing but empty so and you will comment said to you that means I am Telling that please multiply this with my current magnets was the correct correct matrix was loaded entity so now you know what identity into gets multiplied okay so these two gets multiplied now these two gets multiplied and the result stores current matters also let me cancel this it's gone now my current matrix is here which is M okay my current matrix is M 2 e so now again next again please this matrix please get multiplied with the current models whenever you say here in one context it gets multiplied so then the current is post multiply what is a crank matrix M 2 is post multiply what do you mean by post money gets post multiplied yes M 2 its post multiplied with cheer - matrix whatever I am calling down see if it happened in the first scenarios it's nothing by the m1 modelview matrix n is equal to M to eat dough because we already know load identity is nothing but I get em - so I don't have explanation explicitly show no identity into M into M 1 the first transformations to be applied the first transformations to be applied in the sequence is the last of my composite matrix both - the first then any kind of rotation and I can say this up next again right leg calling us translate English so if you want this to be multiplied so that is nothing but I will say T in Reverse this post multiplied by the power and the result of that is post multiplied T so if you want to get in such a way in this way and you see to that your code should be like this your hole should be 
IxXCSSIlpas,27,"This video is called “Engineering Graphics -Visualization.” It is the 8th video in the Engineering Design, Modeling and Graphics series, and is brought to you by http://www.cadmodelinghub.com/. This video instructs new and aspiring mechanical engineers, aerospace engineers, and automotive engineers in the importance of developing 2D and 3D visualization skills. Engineers need the ability to view 2D images of mechanical parts and quickly imagine or see them as a 3-Dimensional object. Conversely engineers also need the skill of seeing 3D physical or virtual objects and immediately picturing their orthographic 2D views. 2D to 3D, and 3D to 2D visualization skills are vital when mastering the topics of engineering design, 3D design, 3D modeling and 2D drafting of mechanical components. The serious student will use this lecture as a point of departure into deeper investigations of the visualization topics and techniques shared in this video.   The better your visualization skill the easier it will be to use commercial Computer-aided Design (CAD), sometimes referred to as 3D CAD. I is also important to note that ASME and ISO design, and drafting standards control how and where 3D images are placed on 2D drawings.

For more information, the syllabus, expanded course content, assignments, etc. regarding Engineering Design, Modeling and Graphics, visit: http://www.cadmodelinghub.com/eng-design-model/ 

LIKE us on FACEBOOK!
http://facebook.com/CADModelingHub 

FOLLOW us on TWITTER!
http://twitter.com/CADModelingHub",2016-03-05T17:09:09Z,Engineering Graphics -Visualization,https://i.ytimg.com/vi/IxXCSSIlpas/hqdefault.jpg,CAD Modeling Hub,PT9M52S,false,3462,22,2,0,2,visualization is an essential skill of designers engineers analysts and manufacturers gazecki in his engineering graphics and technical drawing textbook states envisioning objects in three dimensions is one of the most important skills he goes on to state spatial thinking skills and the ability to sketch allows you to communicate your ideas quickly and accurately this said we have all been tricked by drawings meant to deceive the eye take for an example this image most people think looking at it for the first time they see an old woman wearing a white hat however as you continue to look at this image you should soon see a younger lady looking over her right shoulder when we create views of mechanical objects the goal is to send one and only one interpretation notice this goblet or is it two silhouettes about to kiss which of these interpretations is correct from our earliest memories if we have been blessed with normal sight everything we have seen in the physical world has been in three dimensions we have learned to judge distances understand depth perception orientation and so forth at an early age children are asked to draw on paper what they have seen in three dimensions we each learned to map the 3d physical world to the 2d piece of paper some do this better than others for example an organized collection of physical toys become an assignment for children to sketch on a piece of paper the results would look something like this this drawing was done by my nine-year-old grandson who has been drawing pictures since he was three this is another example of a collection of physical toys with its 2d sketch done by my granddaughter who is 6 years old you should realize that your spatial skills have been in development over the course of your lifetime it is also worth noting that anyone can refine and enhance their visual and spatial skills through consistent practice mapping from the physical or virtual 3d world to the 2d world of sketches and drawings equally important to practicing is the mapping of the 2d drawing world to the mental virtual or physical 3d world of objects and parts if you have an interest in developing your sketching skills check out the website art for kids hub dot-com spatial skills Center on how we see visualize or perceive objects in our physical world or in simulated digital worlds one of if not the most important aspect of visualization is the ability to orient oneself within the current environment another important visualization skill is the ability to mentally rotate and/or translate an object and know with certainty the resulting scene without needing to actually make the rotation or translation relativity is the skill to judge which object is more forward or further away overlapping or intersecting larger or smaller than others finally visualization would not be complete if we could not determine what horizontal vertical arm if we have well-developed spatial skills we could mentally take this tuning fork and rotate it so that it's that flat on a horizontal plane instantly we would know the new scene without the need for doing the physical rotation likewise we can imagine what the scene would look like staring down the prongs of the tuning fork without needing to do the physical rotation of the fork in a similar way our spatial skills should prevent us from creating this drawing of the tuning fork that is unless we are being asked to make an optical illusion MC Escher's ability to draw believable illusions made him famous however in the mechanical engineering world we focus on sending one and only one manufacturable interpretation of an object or part some textbooks provide basic visualization assessment assignments and related study materials if your textbook lacks visualization assessment material here are a few links I would recommend I encourage all of you to take an assessment before proceeding too far in this lecture series and then redo your visualization assessment once you have completed this series your textbook should have examples of scenes that you can use for practice use their provided scenes to determine each viewing point in this exam in these examples you should be able to quickly orient yourself in the scene in the lower-left you are looking straight into the front view of the scene lower right you are seeing the back of these objects and in the upper scene you are positioned to the side and above the objects here is the same scene from the previous slide what would this scene look like if it were rotated 90 degrees about its world horizontal axis hopefully you pictured something close to this what would this new scene look like if the siloed object were reflected about a plane two units from its base you should have mentally constructed this scene if the plane had not been two units below the base but symmetric or reflected about the base what would it look like again you should have imagined a scene similar to this returning to the pictorial scene can you determine relationships what objects are in front or behind other objects what objects overlap or intersect other objects which objects are larger or smaller finally can you tell which lines in these two scenes are horizontal and plumb meaning vertical in the left scene the bottom line is not horizontal in the right scene the bottom line and the two lines that rise from the endpoint of that line are not respectively horizontal and vertical 
1kOzuiMsJbs,27,"Clipping - Introduction and Point Clipping
Dr. Josephine Prem Kumar, Prof. - CSE, Cambridge Institute of Technology, Bangalore
#VTU #Cambridge #CGV",2020-05-01T09:51:59Z,Clipping-Introduction| Module 3 | CSE VI Computer Graphics and Visualization | VTU Syllabus | CITech,https://i.ytimg.com/vi/1kOzuiMsJbs/hqdefault.jpg,Dept of CSE- Cambridge Inst of Tech,PT6M56S,false,26,0,0,0,0,[Music] stopping what we are going to see is clipping okay now what is clipping clipping is we try to eliminate those portions which are outside a specified region okay it can be outside or inside depending on the application in general what clipping we mean is any object that is within a specified region should be removed okay so the formal definition is clipping is the process of eliminating parts of object primitives that cannot because it is outside the clip volume or view volume okay we have seen that in the last class Manas explained okay if you go to the top of a mountain and you see your view is so large but we are not able to show the entire thing on a screen okay then how much is it that we can see on the screen okay whatever we define inside the clipping window is what can be see okay so in 2d it is clipping window in 3d main we take we take a volume that is what we will see after this topic okay it is a volume that we define okay in 2d we define a rectangle that is a clipping window okay whereas in 3d we define a volume okay basically it will be a criminal pyramid or a frustum that we use we will see that when we come okay so right now clipping is the process of eliminating parts of objects that cannot be seen on the display because it is outside the clip volume now how do we clip a point first we see a point clipping okay just once yeah say this is the clipping window that we have okay defined by X W min by the human X W max Y W max then how do you say that a point X comma Y is inside the clipping window okay we say that it is inside this window if uh what about our x-coordinate x-coordinate should lie between xw min and x mu max okay so that is between XW mid and XW Max that means our x-coordinate should be greater than X W min or greater than or equal to X W min and at the same time it should be less than or equal to XW Max okay so what is the inequality that we write we can write it as yeah we can write it as X W min is less than or equal to XW and sorry is less than or equal to X okay same way the other condition is X is less than or equal to X W max now same way what about the Y coordinates again why should lie with me why W min and why W max only then the point X Y will be inside the clipping window so the inequalities that we have for a point to be inside the tipping window is X W min should be less than or equal to X should be less than or equal to X mu max okay same way except you min should be less than or equal to Y should be less than or equal to Y W Max okay if these four conditions are satisfied then we can say that the point X comma Y is inside the clipping window okay otherwise the point becomes outside the clipping window so in order to clip a point what the points coordinates X comma Y okay should satisfy these four inequalities that is X W min is less than or equal to X is less than or equal to X M V Max and why W min is less than or equal to y less than or equal to Y W max okay if the point x y satisfies these four inequalities then the point will be drawn on the screen okay that is it is inside the clipping window and it will be drawn on her screen if the point does not satisfy even one of these inequalities that means the point is outside and we cannot draw the point on the screen it cannot be shown on you 
-hJpheVe9w0,27,Subjects in Computer Science and Engineering,2016-03-12T12:38:27Z,Computer Engineering,https://i.ytimg.com/vi/-hJpheVe9w0/hqdefault.jpg,Desi Scholar,PT3M19S,false,75776,1071,51,0,67,hello everyone I am here with my another video on subjects in computer science and engineering what is computer engineering Computer Engineering is a discipline that integrates several fields of electrical engineering computer science required to develop computer hardware and software coming to the course it is a four-year course and the entire course is divided into eight semesters total number of subjects will be around 45 and labs will be around 15 as mentioned in my earlier video the first year is common to all the branches so in the first semester we have engineering mathematics 1 engineering physics elements of civil engineering elements of mechanical engineering basic electrical engineering workshop practice engineering physics lab then in the second semester we have engineering mathematics - engineering chemistry computer concepts and C programming computer aided drawing basic electronics computer programming lab engineering chemistry lab coming to the second year on the course objects in the third semester we have engineering mathematics 3 electronic circuit logic design discrete mathematical structure data structure with C object-oriented programming with C++ data structure with C C++ lab electronic circuit and logic design lab in the fourth semester we have engineering mathematics for graph theory and combinatorics design and analysis of algorithms units and cell programming microprocessor computer organization design and analysis of algorithms lab microprocessor lab coming to the fifth semester we have software engineering system software operating systems database management system computer networks one formal language and automata theory database application lab system software and operating system lab in the end of third year we have 36 semester management and enterpreneurship UNIX system programming compiler design computer networks - computer graphics and visualization elective a computer graphics and visualization lab unique system programming and compiler design lab I have not mentioned the electives because it varies from college to college coming to the final year we have in seventh semester object-oriented model modeling and design embedded computing system programming the web advanced computer architecture elective B and elective C networks lab and web programming lab in the end of the course we have in it semester software architecture system modeling and simulations elective D and elective e to know more about other subject other branch syllabus please stay tuned I'll be uploading those soon thank you for watching 
eoRE-qbWA9g,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-10T06:57:17Z,Case Studies in Visualizations (CH-10),https://i.ytimg.com/vi/eoRE-qbWA9g/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT24M2S,false,21,0,0,0,0,you welcome to you GCC partial lecture series and computer fine the paper is on visualization technique and this is a module there they are going to look at case studies and visualizations some of the learning objectives of this module are this trying this module tries to introduce the different case studies that are available in data visualization we learn about the techniques applied in the various case studies we'll also learn about the principle of effective data visualization so the first case study that we are going to look at the visual DB which is called as this DB so what is this with DB as such the with DB system developed at the University of Munich is a sophisticated tool for visualizing and analyzing large databases the key idea of this DB system is to support the exploration of large databases by using the phenomenal abilities of the human vision system which is able to analyze visualizations of mine face large amount of data very effectively so this is an example visual that has been shown here of the best TB system we can see various frames of the DB system now we are going to discuss in detail about each and every visual that has been shown here what is the goal of this this DB system the goal of the with DB system is to provide visualizations of large portions of the database it alludes properties of data and structure to become perceptually apparent distinguish the whisky be from other approaches two aspects distinguish other visualization techniques from other approaches first the number of data items which can be visualized is much higher than in other approaches in general this technique used each pixel of the display to represent one data value this means that the number of data values which can be visualized at one point of time is 1 Li limited by the number of pixels of the display ya  unique feature of technique the generated visualizations are very dependent query dependency means that not only the data items fulfilling the query or visualize but also a number of data items that only approximately fulfill the query the approximate results are determined by calculating the distances for each of the attributes and by combining them into an overall distance there are 11 factor approximate results are determined by a relevant factor the relevant factor of a data item is obtained by calculating distances for each selection predicate and combining them the more the combined distance they're less the relevance of the data points are such there are various visualization techniques that are applicable in this DB 5 different visualization techniques are available namely the spiral axis grouping technique parallel coordinates and stick figures this is the kind of arrangement of windows for the 5 dimensional data representation as you can see the first window shows the relevance factor then we have the window for all the 5 dimensions and we can see one data item approximately fulfilling the query is being shown here similarly one data item fulfilling the query is being shown using the green arrow so the arrangements of window for displaying the fine dimensional data is represented here mapping to dimension to the axis it is possible for the user to assign two attributes to the axis and the system will arrange the elements factor according to the directions of the tons of data points from the selection predicates the dis method it is possible to provide better feedback to the user however they may not be able to use the display efficiently in some cases that is some quadrant may not be used too freely while others are being saturated with the data points so this is a 2d arrangement of one dimension Baron we can see the positive as well as the negative values Baron you are going to represent dimension I in the x-axis and dimension J in the y-axis this is a two-dimensional tation of the data grouping their dimensions the pixels corresponding to the different dimensions of one data item are placed in one area instead of distributing them in different windows this will require more pixel per dimension per data item and may provide more useful visualizations for datasets with that larger dimensionality this is an example of grouping multi-dimensional data this is a grouping arrangement for Phi dimensional data set so we have the relevant factor along with all the five dimensions which are being represented grouped and are arranged from a five dimensional data set interactive GUI of this dis GB if you look at the interactive GUI of this TB the graphical user of interface of this DB system allows a direct interaction with the data examples are we can interactively change the very ranges they can highlight corresponding pixels and different windows they can use a projection of visual representation to specific color ranges we can access the attribute values that correspond to some specific pixels applications of this DB this is used in molecular biology project to find possible docking regions by identifying sets of surface points with the distinct characteristics we can explore several other data sets including a la database of geographical data a large environmental data base and another earth observation database dynamic querying is also possible using this misty be selecting the value ranges of the variables by a control but the real-time feedback in the display is an essential and important quality of this this DB the principles of this DB are the visual presentation of queries company's visual presentation of the results rapid incremental under Versa Balcon pools selection by pointing and not typing immediate and continuous feedback and it supports browsing details-on-demand type coupling is also supported by this G be the query components are interrelated and based that preserve the display invariance and reveal the state of the system output of queries can be easily used as input to produce other queries eliminate the distinction between commands queries input and results tables and output examples are interactive scatter plots multiple names given for this are Spotfire whom find a star-filled example is a home finder in this comb finder we can filter by immediate visual feedback this is a star-filled scatter plot so here we can see that this is a visual tool baron it is possible for me to select to find a home as per my requirement so here I can reset all the ranges I can change dynamically change all the values and fix up all the ranges so that I can fix up the area in which the location the area the amount or the rent everything can be fixed up by the client and again loop for various houses that are available for rent in a specific location we just called us find out so the DC home finder dynamic query system enables the user to adjust the sliders for location cost number of bedrooms home types and features the results are shown as points of light which can be selected to generate a detailed description at the bottom of the screen so this is a home finder text screen which is shown here based on the values that are being selected the text is shown on the screen as such the next example the film finder which is also an interactive scatter plot example so in this film finder we can see the color coding that have been given for to represent the gender of the movie the year at which the movie has been released showing the x-axis the popularity of the movie is shown the ratings of the movie are also represented the director actress actor title everything can be represented using the sliders so using these sliders the clients are able to look at various kind of movies that are being released within a specific time frame they can look at whoa who are the actors who have acted in that movie we can search for actors we can search for movie we can search for a year on things like that this is a good example of in using dynamic query position which is this interactive scatterplot technique to display the data as such to the end user so this is another screenshot from the film finder where we can see some of the values are being said the actor value is being set and the director has been specified as all the length of the movie specified the ratings are given and we have the various channels of the movie within the year that are being released within certain year from 1960 to 1990 are being shown on the screen are such hierarchical clustering Explorer or head see is an interactive visualization tool for exploring and analyzing multiple attribute data the tool was developed by the human-computer interaction lab at the University of Maryland by jinguk's CEO and bench need a man the head see which is a hierarchical clustering Explorer applies the hierarchical clustering algorithm without a predetermined number of clusters and then enables the user to determine the natural grouping with interactive visual feedback then program and column mosaics and dynamic query controls the various components and head cer dendrogram which allows users to interactively explore hierarchical clustering results users can drag the minimum similarity bar to interactively separate clusters by cutting the branches of the dendrogram that meets the bar there is a feature framework which is called as a right by feature framework which enables the user the systematically explore one day and two-dimensional orthogonal projections of the original multi-dimensional data using easy-to-understand visualization such as histograms and scatter plots so there's an example ten program that has been drawn and which has being visualized as shown below this is a ranked my feature framework many improvement possibilities in hexie as well as some errors and user databases for example in the case study had to add an option to exclude missing values not to distort the real relationship because missing values were encoded as 0 skier so this is one kind of disadvantage that is available in the rank they feature framework so here we can see how it does a ranking with respect to the feature and that is being shown in the form of a vegetable yeah so this is a screenshot of the head CD they can look at the link Debus we can look at the dendrogram navigation we can also compare multiple den programs there is a detailed view which are shown here minimum similarity bar is shown here scatter plots are shown on the right hand side there are a both common available which are available in this next one is an interactive exploration techniques watching clue dynamic query controls using which the number of clusters and level of detail can be controlled they have coordinated display Varon bi-directional interaction with the 2d scatter grants are possible over the use the entire dataset which is coupled with the detail view visual comparison of different results that is different results are provided as a result by different methods these are the various dynamic query controls filter out the less similar genes by pulling down the minimum similarity bar they show only the clusters that satisfy the minimum similarity threshold this helps the user determine the proper number of clusters and it is an easy to find the most similar jenis we can also adjust the level of detail in dynamic query controls by dragging up the detailed cutoff bar and we can show the representative pattern of each cluster we can hide the detail below the bar and let us easy to view global structure as such in the coordinated display to experimental conditions for the X and y axis the two-dimensional scatter grants are limited to two variables at a time and readily understood by most users users can concentrate on the data without destruction and bi-directional interaction between displays are also possible this is an overview in a limited screen space what if there are more than thousand 600 items to display compress to overview shows the averaging adjacent leaves it is easy to locate interesting spot so here we can see a scatter plot view as well as a detailed cutoff you the minimum similarity view and the number of clusters which are shown and here then they can also perform a cluster comparison so different distance metrics are used and different linkage methods are being used to dendrograms can be compared to see time they showed the mapping of each in between the two ten programs there's a busy screen but crossing lines and easy to see anomalies they can also incorporate visual design principles like usage of song visual design elements like line form shape value and color but the principles like balance and variety to make the visualization both more inviting and easier to read for trends and comparisons this will become particularly important as we take our linear metaphor visualization to the next level they can also bring in more dimensions to the visuals that are being created once we have good data and a sound underlying spatial metaphor it is time to take into account the complexity of the metaphor be is known of a knowledge and research we can come up with initially look after the simple linear metaphor visualization how we can do that but uptick in sales is just not a seasonal trend that is an example from a store sales the total sales are up but as a new store layout succeeded in improving the performance of some departments that are struggling before are we succeeding and getting more customers into the store and not just selling more to existing ones our customers shopping good departments and buying a more diverse mix of items these are certain examines example questions that are to be asked on looking at the store sales firm analysis a report this is shown using a simple linear metaphor visualization asking these kind of questions is a great exercise to begin talking about visualization which will lead to the next level because they prompt us to add more dimensions to the visual that allows more viewers to explore and understand the subject in additional angles and in more detail there are a variety of solid techniques but can help achieve this additional dimensionality we can add small multiples as small repeated variations of graphics side by side a low for quick visual comparison wherever possible Sheils should be kept the same on the axis of comparison should be aligned adding some small start the thumbnails to our chart the main one hello a comparison of sales strength and the one before that we can add layers to the existing visual we can add extra level of information while preserving the high-level summary data we can make a graphical representation more flexible and useful we are going to break down the top line of the total sales in two departments the resulting start the area chart shows the sales from appliances data department as increase as a proportion of the whole but media department sales does not include much so these can be inferred from the visuals that is being shown here using the addition of layers we can add axis or coding patterns another way to get more dimension in a graphic is to add additional patterns for coding information such as varying the shape or color of points on a plot based on a variable an extra axis and space alongside an existing one or in a new direction it can also be useful for showing new variables and it's important to be careful with this approach as it can add clutter but when you sparingly and that good design principle it can increase a graphics usefulness we can also combine metaphors so far we have used linear metaphor for our visualization we want to add a network metaphor to show connection between product categories and purchases a pair of circular relationship or chord diagrams showing the snapshot for the beginning and at the end of the time period under consideration can help compare the connections like a pie chart each product category is assigned a section of the circle by percentage of total sales but center of circle is going to be hollow for majority of purchases containing items and one category all saying to their items in the second category a line is drawn to that second category the line width was based on the average proportion of both categories in the mixer purchases the increase in these con this saw when visual is shown here at the end of the slide the increase in these cord lengths from the first to second diagram suggests there are indeed more purchases that cross departments since our initiative cemented to place this relationship data would be even better if we could see it any chosen point and time for example to see what effect if any the lay of change alone had before the promotion that started as our graphics increase in complexity and sophistication we need to think more carefully about how to deliver the radar to the hindusim so we need to consider new delivery methods for delivering the visual that has been created to the end-user the point of any visualization is to be viewed by the right people in the right context few examples we could enable scrubbing through time or drilling dough and zooming out for a bird's-eye view seeing new data live as it becomes available or even manipulating future variables to watch different scenarios so finally let us look at five different principles for creating effective data visualization be open to discovering new insights effective data visualization enable the user to discover unexpected patterns and invite a different perspective of the data think big but start small users needed quick solutions to a very painful process that was costing time and lost business design for your user use your journeys and prototyping help to define the user good prototype to identify the needs a small cross-functional team to be set up to find a solution based on three equations will the customer use it can they build upon it does it mean the business means the final principle is obtain feedback early and often user testing is about going beyond what your users tells you to uncover the needs both met and unmet so if you look at the five principles principles are discovering the new insights think big design for the user prototype first and I'm tying the feedback is early and often from the end users so these are certain examples that are being created using the above five design principles that have been studied the one color dominates here here we can see they are bluer colors difficult to distinguish in this figure they re colored with the brewer palettes and this is murky in nature so here it does mean recolored this is another example which is called as a sortable table or a matrix here it is in the form of a stock at a bar chart which is lying in a horizontal fashion we can see for each and every city they have shown the information the ratio layout with respect to high average capacity and other things you know horizontal layout method so in summary if we could have seen we have looked at the different case studies and data visualization in this model especially the in the case studies that we have looked at we have looked at the techniques of interactive data exploration they have also looked at what dynamic queries are and how dynamic queries are helpful in generating different kind of visuals to the end users and at the end we have looked at the fine interesting principles which are very important for creating effective data visualization thank you 
rTWWZJkoTNI,22,Computer Graphics & Visualization-17CS62: MODULE_5(Part-2),2020-05-16T09:11:41Z,Computer Graphics & Visualization-17CS62: MODULE_5(Part-2),https://i.ytimg.com/vi/rTWWZJkoTNI/hqdefault.jpg,Zabiha Khan,PT7M38S,false,134,13,0,0,15,hello students in today's class we are going to discuss part two of module five in computer graphics and visualization 417 series patch that is curves circle of radius R centered at the origin can provide an illustrative example which has constant curvature which is a measure of how rapidly a curve is bending at a point the contents goes like this where we have cord surfaces quadric surfaces OpenGL quadric surfaces and cubic surface functions Bezier splines curves Bezier surfaces and some OpenGL functions regarding this coming to the curved surfaces we have the parametric form of a curve which expresses the value of each spatial variable four points of the curve in terms of an independent variable u such that the parameter u can be defined as X is equal to X of U Y is equal to Y of U and that is equal to Z of U so we can define the other form in the final category of non parametric where we can define the object reception's directly in terms of coordinates that is XY and Z if we are using the objects in second degree such as a loop toys Spears Tories parables and hyperboloids will be having this kind of categorization a sphere can be a surface with radius R centered and the coordinate origin which is defined with a set of point satisfying the equation x square plus y square plus Z square is equal to R square so you can see the diagrammatic representation of it along with the equations similarly a torus which is a donut shaped object which will be having Y minus radial or axial or square plus Z square is equal to R square with the pictorial representation you can see the quadric surface and cubic surface of as in wired objects we can define the OpenGL glut quadric surface functions such as longitudes and latitudes with respect to the functions that are included in OpenGL utility tool Control Act and OpenGL utility that is glow libraries similarly we have opengl functions for the objects code and for the torus we have already discussed the tpod functions in the teapot program so you can see why the teapot object and the solid teapot object how we can define it with respect to glue or quadric surface functions so where we have quadratic object with respect to Speers and new quadratics considering the bezier spline curves where we consider again the four control points P naught P 1 P 2 and P 3 suppose we still insist on interpolating known values at the endpoints with the cubic polynomial P of U P naught could be given as P of 0 P 3 could be given as P of 1 Bezier propose that rather than using other two control points for interpolation we can use them to approximate the tangents you can see in the equation here with respect to some bezier curves i have defined here a pictorial representations which demonstrate the appearance of bezier curves properties of Bezier curves the first property defines a very useful property which is a bezier curve is that the curve connects the first and last control points property two defines another important property where a bezier curve which lies within the convex hull other properties include the basic functions are real the degrees of the polynomial defining the curve segment is 1 less than the number of defining points the curve generally follows the shape of the defining polygon the tangent vectors at the end of the curve have seam direction as the first and the last polygon snaps respectively coming to the bezier surfaces we can generate the bezier surface patches through the blending functions if p is a 4 cross 4 array of control points P is equal to P of IJ rather than IJ we can use a UV also then the corresponding Bezier patch could be given with the respect to the formula P of UV each curve of constant U is plotted by varying V over the interval form 0 to 1 opengl includes some of the curve functions with respect to the pictorial representation included in the glut library OpenGL supports Bezier curves and surfaces through mechanisms called evaluators which can be used to compute values for the Brillstein polynomials of any order Bezier curves and surfaces to generate other types of polynomial curves and surfaces by generating a new control points does mechanism is flexible we can use evaluators to generate one two and four dimensional curves and surfaces also the three dimensions as you can see we have categorized opengl functions of opengl spline functions in baseline curve functions where the type parameter specifies the type of objects which we want to evaluate using the Bezier curves are busier polynomials the control points data are in the array pointer to point array the value you mean and you max specify the range of parameters for example in our cube B spline we stride three points for each curve segments in the next category we have blue functions the glue library uses this mechanism in four dimensions to provide NURBS curves you can see in the opengl functions of NURBS now functions can be categorized in five important nerve functions such as glue new NURBS renderer bloom nerves property clue begin NURBS surface glue nerve surface glue and NURBS surface the first two functions set up a new nerves object and define how we would like that rendering and the final three used to generate the surface for Knob curves the final three are replaced by the functions blue begin new curve glue nerve curve and glue and not curve the glue library provides an additional useful facility called trimming curves are trimming curves which are closed curves that we can use to render surface from which the areas defined because have been removed the trimming curves are defined after the call to gia GL NURBS surface and the vertices are specified between calls to GL begin trim and GL and trim as you can see in the diagram at I in the open GL functions here that completes your topic of curves with respect to v zo curves if you liked the video subscribe it share it thank you 
GY5fJGyLCrc,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-10T05:33:10Z,Task and Interaction (CH-10),https://i.ytimg.com/vi/GY5fJGyLCrc/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT31M4S,false,21,0,0,0,0,[Music] welcome to you Jesus epoch sharla lecture series on computer finds the subject of graphics and visualization and in today's module we are going to look at tasks and interaction their learning objectives for this module are this module will introduce the need for task and interaction in visualization and we can also learn what what are the various user tasks that can be carried over the visual that is presented to the end user they will also learn about the basic interaction techniques that can happen on the visual that is being displayed to the end user and we will also come to know about various examples of various interactions that ring that can take place over the visuals the task task is a structured set of related activities that are undertaken in a sequence so as shown in this figure there are three different entities the data the users and the tasks data is a set of data that are set related related to some kind of patient data or treatment plans the data can be quantitative or abstract kind of data the radar can be of any dimension say from one dimension to n dimension or it can be any kind of multivariate kind of data and we are supposed to handle even some states that are related to data and the time arrangement can be linear and instance can also be used as time parameters over the data the users can be some kind of users who are going to what with the data that is available so the users can be some kind of medical expert and physicians who are using the data for their own purposes the tasks that can take place over the data are exploring the effects of clinical actions on a patient conditions can be an example of a task that can happen on the data so using this task it is possible for the users to perform various activities on the data that is available and the users can come up with certain conclusion by performing various tasks on the data that is a way if we look at the various task categories there are various source current categories associated with the data in fact it can be classified as the interaction primitives the tasks can be some kind of conversations the tasks can be some kind of rhythms and prints that occur in the data it can be some kind of descriptive statistics that occur on the data or it can be some kind of community and social network so let us look at each and every task category in detail the first one is the interaction primitive interaction primitive is one in which the user is supposed to interact with the data as such so it is possible this is an example of an interaction primitive where the user is sitting inside the car and he sees that I am honest how the thickness of the width our mark on the road really comes through in the video snapshot he is looking at the video and he sees something in response to it that is an example of interaction primitive the next kind of tasks that can happen over the data archon is conversation so in the conversation there are various kind of conversation that that can take place so here there is an this is an example which shows the kind of conversation that can take place so they say that the sort of soccer practice is on Monday they also say that there are water is was so clear photos were taken on a picnic day so these are some kind of conversations that can happen over the photos or over the data that are being captured the next set of tasks that can happen over the data set is the rhythms and trends so if we look at the rhythm and trend this is a timeline that has been taken right from 8 a.m. to 4 p.m. and we can say if we look at the data set we can say around 10 a.m. there is a break in between 10 a.m. to 12 p.m. and there is a lunch time between 12 p.m. to 2 p.m. so therefore there are no kind of data that occurs or any kind of trend or rhythms that occur during the break time or during the lunch time so this is a good example for rhythms and the next kind of tasks that can be carried out is the descriptive statistics Dharan we can see this is an example for descriptive statistics there the number of messages posted online is shown in the form of a bar chart so from this we can understand who are the people who have talked more number of times so we can say that even Mary F dr. Moore a number of times or have posted more number of messages in the social network these kind of descriptive statistics can be understood oh the over the data that has been presented in the form of a bar chart which is called as a descriptive statistics the next kind of task that can happen is own community and social network so this is a community or a social network Barun each and every node is represented as a people and that the edges are represented as a relationship between the people it can be any kind of relationship that exists between each and every person it can be a friend of relationship or it can be some other kind of semantic relationship that exists between each and every person which is represented in the form of a node so this is an example of community and social network so these are various tasks associated with their data cell the next one is interaction interaction distinguishes the information visualization from static paper visualization with the help of interaction it is possible for us to for the end-user to identify some kind of dynamism or some kind of dynamism in the visual that is being shown to the end-user so with the help of interaction it is also possible for us to differentiate a static paper visualization with respect to some kind of dynamic visual analysis can be performed with the help of interaction and this kind of analysis is a process which is often I trade them in nature with the branches and Flyway paths there are various visualization tasks that can be performed on the data set or on the visual as such and they are given below some of the visualization tasks that can be worked on the data are the overview which is a collection of data set zooming in and zooming out on the objects of interest it is possible for us to zoom in or zoom out on the objects of interest as such the next kind of task that can be worked out on a visual is filtering out uninterested items and showing only the interested items to the end-user another kind of tasks that can be performed over the visual is the details-on-demand Baron the user can only view the retail whenever he is needed you can view the retails if it does not need it for him it does not necessary for the designer to show the retails to the end-user next one is relate kind of tough Veran the user can view the relationship between various entities that are shown in the visual the next kind of task is the history tasks varan user can undo or redo or refine the kind of output that are shown in the form of a visual another kind of task is an extra task where and it is possible for the end user to extract a subset of data and visualize what happens so there are various summon tasks which can be classified as the Oh as told already as the overview task which gives an overview of the entire collection of data set the filter tasks which can filter out uninteresting items the details-on-demand tasks which can by which it is possible for the end user to select an item or group to get the details the Zoom talked with the help of which we can zoom in or zoom on to items of interest the relate task which helps in relating items or groups within the collections the history task which helps in keeping a history of actions to support some kind of tasks to it undo replay and progressive remind a refinement the extract task which helps in allowing the extraction of sub collections of various query parameters DX insight is an example visual visualization toolkit that has been developed by Sandia Labs this helps to visualize various databases it is a licensed VX insider's Allah sensible product the elements of database that can be visualized using this px insight can be anything in the case of information visualization there anything can be some kind of abstract objects like document relationship company profiles etc or it is possible for us to visualize even some kind of scientific data using this px in fight bar an experimental data a numerical value or numerical values are stored into the databases and are displayed with the help of plus BX and fight the example screen also shows some grant proposals we can have a look at the video in the given you are by clicking on the given URL and this video shows some kind of interactive capabilities that exist in just the X inside so this is a screenshot of this DX insight using this we can visualize and navigate large data set basically there are various menus that are available they can choose from various menus that are available here we can have an overview of what is shown in the entire screen how such we can go in for details in demand we can just zoom in into the objects that are present on the screen we can also use the most button control for zooming in and zooming out of the object they can use SQL based queries we can supply SQL based queries to the database and get various interesting output based on the queries that are given to the database so this is an example these are various example tasks that can be performed over this VX inside too as such so the Schneiderman's information visualization interactive paradin says that overview can be overview zoom filter detail wonderment browse search query relate history and extract so these are various interaction paradigms that are given by Schneiderman's information visualization all these interaction paradigms are possible with the help of this BX insight so it is shown here you can go in for an overview of the entire database as the database are said earlier the Raider base can contain any kind of data as such it can be either some kind of experimental data or scientific data or it can be some kind of abstract data as such which is represented in the form of table so this is an overview of the entire database are such in the case of VX inside this is zooming in to a specific area they're just being displayed to the end-user it is with the help of this VX insight I can zoom in into a particular location and see in depth or in detail what happens in that particular area as such I can also look in for the detailed visualization this is the detailed visualization of the zooming in part of this DX insight there are various user tasks as said earlier that can be applied over the dataset or over the visual some of the easier stuffs that can take place using these kind of tasks are it is possible for me to calculate the minimum maximum average or percentage in any kind of data set and these kind of the data set can also involve one data item or it can be some kind of multiple data items or it can be some kind of the luda data items these are certain easy stuff that can be performed over the database some of the hard stuff that can be performed over the data that is available is to find out patterns or to find out trends or distributions to check for changes that exists over time to look for certain kind of outliers or exceptions that happen in the data to look out for certain relationships or correlations or some kind of multi be relationship that exists between the various data set to look at some kind of combined min max effect and some kind of trade-off effects by looking at the data it should be possible for us to infer certain clusters groups or comparisons and the context information it should be possible for us to infer of some kind of anomalies and data are elf paths and things like these kind of hard stuff are possible only with help of visualization whereas the easy stuff are possible with the help of say some kind of graph or some kind of excel sheet itself but as these kind of hard stuff cannot be provided only by an excel sheet these can be provided only with the help of some kind of visualization by applying some kind of visualization technique some of the basic interaction techniques that can be applied with the visual or on the data set are selecting process which can take place with the help of a mouse click I can select a particular item by clicking with the help of the most I can select a particular item by keeping the Mo's over that particular item or hovering the mouse over the particular item or I can select a particular I can select a particular item with the help of the tooltip I can go in for some kind of lasso tool for selecting a particular item I can drag and drop a particular item these are certain basic interaction techniques for selection process similarly there is a process which is called as rearranging process parent it should be possible for the end user to move or sort or delete certain items that are visible to the end-user either in the form of a data or in the form of a visual so in the case of rearranging the data set it should be possible for the end-user to move certain data set as per their wish the moves that an element from the visual as per the wish it should be possible for the end user to sort the data that is shown to the end-user or to sort the visual elements that are shown to the end-user it should also be possible for the end-user to rearrange the various elements by deleting the attribute that are the elements that are shown to they induce them so this is an example for selection process we can get pop-up tooltips by hovering most cursor it brings up certain details by just hovering the mouse cursor over a particular position I can go in for some kind of most selection by clicking on an on an particular item it selects that particular items and it displays the attributes of the data that are being selected so this is a selected here here and they in this example we can see this example is an example application which is called as a Spotfire they can see that we have selected a particular item and the various attributes associated with that item are displayed on the side are such this is a selection process the selection task that can be performed over the visual next is the rearranging process in there this is an example example screen given by a particular visualization tool called as table length in this table length it is possible for the end-user to move the columns are attributed from right-hand side to from left to right or right or left so that the user can perform some kind of comparison over the rate of it it is also possible for the end-user to sort the data with respect to a particular attribute in the table length the user can select a particular column and he can ask the tool to sort the data that are present in that particular column so that the user can look in for in for certain interesting patterns out of it some of the advanced interaction techniques that can be applied over the vegetables other than the selection and rearrangement are brushing and linking process which is which can be done over the data set or over the visual that is being shown to the end-user looking at overview as well as giving the detail of some portion of the data set another kind of advanced interaction technique is a focus plus context information Baron the user is possible to focus to a particular point and look at the context information that is I mean the context information that is related to the focus focus the spot another kind of advanced interaction technique is a panning and zooming process in the case of planning the user can move from left to right or right to left under the case of zooming the user can move inside and outside that particular data set next then last kind of advanced interaction techniques are distortion based views it can be possible for the end user to have some kind of distortion based views for example from official views which will be helpful for the end user to infer that an information out of the visual as such so these are examples for brushing and linking with the help of dynamic queries for the help of this pot fire it is possible for us to bridge and link certain data items with respect to the visuals that is shown here this is a Spotfire which has been designed by al Berg and Schneider man so this is a visual that is being shown presented to the end-user the dynamic queries can be generated just by using these kind of slight birth and by assigning various values to that tributes automatically the dynamic queries will be generated and based on these kind of dynamic queries that are being generated it is possible for the end-user to brush or to remove certain data or to link certain data to some other data that exists in that particular data set this is all for another interesting visualization pattern that is shown to the end-user which is being generated by purvis and by Leatherman is the which shows the parallel coordinates so this is an example here we can see that it is possible for the end-user to look at the various data items and he can go in for a selected item and remove the other items and they can see how that selected item looks like which is called as brushing you can he can highlight the brush the items that they can see only the particular items he is of he is actually interested in and by removing various other items that are shown here so if you look at the overview and detail process these are two different views that is we have separate views one for the overview and the other one is for the detailed view there will not be any distortion when showing the overview and the detail information and both the overview and the detailed information are shown simultaneously to the end-user one of the drawback here is it requires a viewer to consciously shift his focus of attention either from the overview window or to the detailed window so this is an example visualization which is being given in the traffic dot Phi urg which gives a good example of this overview and detail part so here we can see that there is a small window which shows an overview part and the big window which shows the detailed part in the overview part the user can select the objects of his interest and based on the selection of the user and based on the objects of interest that are being selected only that particular portion is being enlarged and shown in a detailed manner to the end-user and the bigger window so this is an example for overview and detail tasks that can be performed with the visual the other one is a focus plus context information yes single muchos both the focus as well as a context information in detail the upon textual information should be very near to the focal point Distortion me makes some paths hard to interpret also in the case of focus plus context approach distortion may sometimes obscure the structure in the data from of the example visualization technique that uses this focus plus context approaches from Xerox PARC it is a table length the perspective wall and the hyperbolic tree pose browser let us have a look at all these visuals the first one is a table length from Xerox PARC so here we can see the the entire context information that are shown along with the focus the information which is being highlighted the highlighted portion is a focus the information that is of interest to the end-user along this focus the information the context information is also shown by the fight to the end user so that it is possible for the end user to compare the focus and information with that of the contextual information that is available another example if the perspective wall from Xerox PARC Baron we can see that the focus plus context approaches applied here focus is on the specific entities that are presented in the front side of the wall along with this focus the information the context information is placed in the side walls of the figure so that we is possible for the end user to understand what is the kind of relationship that between the focus the information as well as the contextual information not only that this we can understand that the distortion technique is also applied to show the contextual information to the end user because without applying these kind of distortion technique it is not possible for the designer to show the entire information in one screen because the focused part alone is shown with the much clarity and the contextual information is shown using a by applying the distortion technique so this example is from the perspective wall the other one is a hyperbolic tree from Xerox PARC so here also we can see the focused information that is being seen more clearly along with the contextual information the the red one is a focused information we can look at the relationship of the focused information with respect to various other known using this contextual information so this is also a very good example of focus plus context approach there test being applied over the hyperbolic tree the next kind of interaction technique that can be applied over the visual is panning and zooming technique panning and zooming helps in moving the helps in the end helps the end user moving from one location to another location and all either from left to right or right or left and also from inside to outside kind of movement there are multiple levels of resolution and pan and zoom the view changes depending on the distance from the viewer to the objects these sometimes distortion baster techniques are also applied to keep a steady overview and using these techniques it is possible to make some objects look larger while simultaneously shrinking other objects which are not of interest to the end-user so let us first see what zooming is zooming there are different types of zooming that can be applied over the objects of interest the first one is the standard zooming wherein we get closing to see the information in more detail in the case of standard zooming example is zooming into the Google Earth information to get a lot of information about some kind of location or kind of traffic that exists in a particular location now other kind of zooming is an intelligent in an intelligent zooming which semantically which shows the semantically semantically relevant information out of proportion to the end-user it is possible for us to speed up and slow down the process of zooming as such some of the examples of this of speed dependence assuming the next one is a semantic zooming semantic zooming can be conceptual as a fluid as applied to simply by reducing the pixel from of the tools which help which help and semantic zooming or Pat plus plus and piccola projects so this is an example of a speed dependent zooming which has been designed by Igarashi and Hindley in the year 2000 we can see how the speed varies by looking at these various vegetables the first figure is very clear whereas then we look at the last figure it shows some kind of zooming out of zooming out option that has been applied over the image are such or the visual as such if we look at the difference between standard and semantic zooming we can see that in the case of standard zooming the view depends on the physical properties of what is being viewed there is in the case of semantic zoom mean when we zoom away instead of seeing a scaled down version of an object we see a different representation of the object that is shown to the end-user the representation also shown also depends on the meaning to be imparted to the end-user as such some of the examples of semantic zoom are information maps for example it is possible for me to zoom into a restaurant and look into the interiors of the restaurant and I can also see what is being served inside the restaurant maybe I can also zoom based on the price I can see the expensive restaurants first and then I can zoom until I get the restaurant of my price range next one is browsing an information service noticed we can charge the user successively higher rate for suction more detailed information whenever the end whenever the designer is going to provide more detailed information the end user can be charged accordingly these are certain examples of semantic zooming then in a infinitely scalable painting program is also an example of a semantic zoom program wherein I can have a closing view of the paint sheet that is being shown to the end-user where I can see flux of paint when the paint is being moved farther away I can see some kind of paint strokes farther still if I see the paint I can get a holistic impression of the painting and further still when the painting is placed at a very long distance from the end-user I can see the artist sitting and doing the painting at plus plus another user interface which helps in having a man which helps in making the ending zoom move across the entire surface of the plane this is an infinite 2d plane as such and it can you can infinitively get close to the surface also we can navigate the end user can navigate by panning and zooming process panning is moving around on the plane and zooming as said as moving closer to and farther from the plane it is also possible for us to perform navigation in this pad plus plus so how do we keep from getting lost we try to animate their traversal from one object or another using some kind of hyperlinks if the target is more than one screen away we try to zoom out a pan over and zoom back in the goal is to help the viewer maintain the context information the help of pad plus plus so let us these are examples of pad plus plus screen shots which is called as pad plus plus to the rule of portals all this panning and zooming can get more confusing portals are low for zooming a small piece of data set while keeping everything else in the same position that plus plus is a very stretchy sheet as such a portal is moon more like a special window into a piece of a sheet and that B window behaves independently with respect to the rest of the windows so these are examples of space scale diagrams that are designed by finest and better than in the Y are 95 the original figure is being shown at various scales here in this we can see that the horizontal axis is standard whereas the vertical axis is a scale axis so the user has a fix advice viewing window as such the Moodle fixit's a viewing window through the 3d space which tried to yield all possible frequencies of panning and zooming options so your point in this case transform twe array on the circular region becomes a cone instead so if you move the origin of the 2d plane the properties of the original 2d picture do not change as such therefore the absolute angle between the Ray should not be assigned any meaning as such so these are two different views of the space Cal diagram we can think of this in turn in terms of one dimensional space scale diagrams also when zoomed out you can see a wider set of points this is an example of a one-dimensional space scale diagram as such there can be some kind of pure panning there just moving from one location to another location as shown in the a section it can be some kind of pure zooming Marin I move from one location to another location that is outside to inside out in the case of B I can also look at panning and zooming options Marin I change the position as well as I try to move in and out so these are some examples of space scale diagrams using these pay scale diagrams it is possible for me to implement semantic zooming also so in summary if we look at the summary we what we have studied in this particular module they have looked at various tasks and interactions the definition of what task and interaction is we have looked at various examples example application and information visualization related to task and interaction and it is also possible for us to choose the better option days on the kind of goals that gets applicable over the various information visualization interaction process thank you 
1jSHiILOJTY,27,"ACCORDING TO VTU SYLLABUS
VISIT MY BLOG 
http://vishesheducational.blogspot.in/
pinhole camera and human visual system explained in easy way",2016-03-11T19:51:20Z,COMPUTER GRAPHICS-PINHOLE CAMERA AND HUMAN VISUAL SYSTEM EXPLANATION,https://i.ytimg.com/vi/1jSHiILOJTY/hqdefault.jpg,Vishesh Educational Videos,PT17M20S,false,1575,38,0,0,2,welcome to the fourth version of the course computer graphics and visualization in this session I want to call a topic amazing systems in that I want to discuss about pinhole camera and human visual system introduction system there are two types actually those music systems are physically she stops first one is pinhole camera second one is human visual system by understanding the concepts of pinhole camera I can understand most of the functions are for modern cameras and other optical images that's why pinhole camera and other imaging systems plays a very important role so you can see the diagram here actually this diagram is a geometrical model of a pinhole camera now we are going to discuss the concepts related to pin down one by one so pinhole camera is a box with a small hole in the center that hole will be on what side of the box and the filum is placed inside the box exactly opposite to that Pinole so you chilli the pinhole is covered it is uncovered for a short time to expose the Filip you can see there is a diagram our cow bra is oriented along the z axis you can see the cursor here or comprised oriented along the z axis origin the pinhole will be the origin of our coordinate system right guys next we assume that hole is so small so that's why only a single ray of light get passed through you right next the film plane is located at a distance D from the pinhole you can see there in the diagram so Philip plane will be in the opposite side of the pinhole so it is located exactly at the distance D from the pinhole Phillip plane is located exactly at the distance D from the bit node and to to calculate the distance Z value will be minus dy it is minus D me as you can see here so I need to travel in a reverse direction to reach the fill up plane so that's why value of for Z coordinate is minus B you can see the side view of a pinhole camera so using purple of similar triangles I can yield two values experient YP remember here so I'm going to get a image on the film plane your film plane is a two-dimensional screen that's why coordinates so many coordinate guys so that's why two coordinates those coordinates are XP and YP right so using the formula of similar triangles I can yield a value for y epared XP YP is equal to minus y by Z by D X P is equal to minus X by Z by D so these are the values of a coordinates of the image plane right and one more important thing the point X P comma Y comma minus D is called the projection of the point XY said you can see there is a diagram so this this is a actual point actually it sees the object and this is the image of the point that is exactly opposite on the Phillip plane remember here my object is point that's why my image is also a point only so you can see here so this plane where my image of a point is projected that that line is called as a projection of the point X comma Y comma is it the point XP maybe communities called the projection of the point XYZ you can see there in the dead gram X become a P comma Z P is the projection of the point X ray said and one more important thing so you can't go backward from your point in the image plane to the point that produced it you can see there here so X P where P comma Z PZ image of a point X comma a comma is it from a point there is the image of a point in a film plane so I can't go backwards towards the actual point in the coordinate system that's why right so I can't go back towards X comma Y comma Z from exp como AP comma next in our model the color of the film plane obviously what is the object here the point is the object that color of that point if you love plane will be the color of the point X comma Y comma Z so what is your point here on the final plane that is X P comma Y P comma Z P so color of the X P comma P comma Z P is same as the Y X comma Y comma theta right so for a pinhole camera I can delay angle of view also angle of view is the larger angle Midway the largest object they took that our camera can image on its feel a plane that's today's so what is the angle that can be made by a camera to display the largest object right so that angle is called as the angle of view and the formula for angle of Vivi's to tan inverse H by 2 D and the tangle of Eve is denoted by D tau right and one more important characteristics of a pinhole camera is it has an infinite depth of field now you can ask a question what is a you know point depth of field every point within its field of view is in for so if you did the field of video yeah very point whatever the pine is there within its field of view of a pinhole camera will be in focus focus means right so you can see it you can see it you can see everything with a focus right regardless of how far it is from the camera do you need not to worry about the distance whatever the distance it may be but you can see everything if it is in focus with your camera there is important characteristic next disadvantages of a pinhole camera so what are the disadvantages actually there are two disadvantages first you know that pinhole is so small in a camera that's why only a single ray of light can pass through the source so there is almost no light enters the camera right you can ask a question why what is the disadvantage here if a light is less your quality of the image is also less that's why there is a disadvantage second one the camera cannot be adjusted to a different angle of view so fixed you can't add this true different angle of view but one thing you can work of these difficulties now you can see how we can work out the difficulties so by replacing the people with ellipse we can solve this two problems so what are how we can do that means let's gather more light right so so if gathers more light what happens the image quality will be very high along with the larger aperture of the lens the more light the let's can collect so larger aperture for the lens will help to collect the more light so by using lengths you can work of the first diver disadvantage the same way you can work up the second disadvantage also see here so by picking a lens with the proper focal lens to show your focal length is very important you should be very careful while picking a selection equivalent to choosing D for the pinhole camera right so that that is important the focal length is important do you need to choose it properly so you can achieve an angle of view up to 180 degrees if you use lens for a pinhole camera right guys and one more important thing remember this always image generated on a filament of a few film plane of a pinhole camera is inverted what is the meaning of inverted so you're going to get a reverse image in a pinhole camera the film plane this is very important image is inverted in Pinole Capra next physical imaging system is human visual system you can see the diagram here what are the components of your Yuma usual systems optic nerve retina rods and cones cornea lens and iris right so now I'm going to explain the procedure light enters the eye through the lens and cornea so Korea is a transparent track structure that protects the eye right so understood guys what is the first step light enters the eye through the lens and cornea cornea is a transparent structure that protects the eye next what happens means iris it is what it will do means iris opens and closes to adjust the amount of light entering the eye right and the lens function UBS on a two-dimensional structure called retina remember guys the camera image will be found in the film plane but in the human visual system your image will be captured on a two-dimensional structure that is called as retina and retina will be on the backside of the height so in Kimbra you were in a plane will be on the opposite side here also your retainer the retina will be at the back cuffed on evenly along with that you're going to use Rhodes and cons so the rods and cones are actually sensors located on the retina and remember these very important rods and cones are excited by electromagnetic energy in the range of 350 to 780 nanometer in the previous video I explained about radio spectrum right there you can see there 350 to 780 nanometer range is a range of visible light right so when he sees a visible light it went to excite right that's why light is electromagnetic energy so it is a visible light right so one more important thing rods are low-level light sensor mainly you are mainly account for our nitrogen so rewards are mainly used for a night vision and are not color sensitive this is very important rods are not color sensitive but cones are responsible for our color vision all right guys so one more important thing resolution of our visual system plays a very important role so now you can ask a question what are the factors affects the resolution of our visual system with the design right so the sizes of the rods and cones coupled with the optical properties of the lens and cornea is going to determine the resolution so resolution is the thing but a measure of what size objects we can see right so resolution is what so it is a measure of what size objects we can see more technically if I you want to give an example suppose it is a measure of how close we can place two points and still recognize that there are two distinct parts that means I'm putting two dots here so I need to recognize those two points as a different ones right so that we example for a resolution and one more important thing said said in the human I do not react uniformly too late energy are different we have elapsed here color vision comes into play see here actually I told you cones are responsible for color vision actually there are three types of cones a single types of sickle tip-off rod right so now if I'm telling three types of intensity by this plays a very important role right that's it is nothing but a physical measure of light energy so brightness is nothing but a war all measure of or we react to the intensity of light right so one more important thing guys so I told you your eye behaves differently for different wavelengths right you can see the example here so human visual system does not have the same reference to a monochromatic green and monochromatic red light so why I am Telling this means you can see that if these two lights are reacting with the same energy right if these two lights are emitting with the same energy also same energy also they would appear to as a different brightness right because of her new cool response of the cops and roads to red and green lights re not rods quotes to red then green light right so why he means you understood right because our eye is more sensitive to green light and less sensitive to red blue color right understood guys so even if two lights emitted emitted to see energy see same energy we think that it is having a different brightness because of unequal responses right so you more color is your capabilities are due to the diff Sin City with these are three types of cones so three types of cones what I can do means I can consider my three types of cones as the primary colors you should you know right RGB colors here also same thing three types of cones that can be red cool green cone and a blue core so those standard primary colors I can use so using these three standard primaries I can approximate any color that we can pursue alright guys so you're also RGB plays a very important role and one more important thing intial processing of light in the human retina system is based not the same principles used by the most of the optical systems but the difference here is so back and task the back end task of human visual systems are more complex than that of camera right so those back-end computations are carried out in a optic nerve actually optic nerve is connected to that road sound consonant extremely complex arrangement I told you right it is extremely complex and definitely is going to equal is a post acute red signal processor so it is equal as equal as sophisticated signal processor it is very complex right but but the final processing of is done in the part of the brain actually final processing is the visual cortex so where the e level functions like object recognition is going to be carried out right guys so that's it thank you for listening please do not forget to subscribe peace 
Vw9bKmG5aec,22,"Cohen Sutherland Line Clipping Algorithm with Hands on program

Course: Computer Graphics & Visualization
Course Code: 17CS62

BMS Institute of Technology & Management
https://bmsit.ac.in/",2020-03-24T13:57:34Z,"CG 17CS62 Module 3 - Cohen Sutherland Line Clipping Algorithm with  Program - Shankar R, BMSIT&M",https://i.ytimg.com/vi/Vw9bKmG5aec/hqdefault.jpg,BMSIT&M CSE Learning Channel,PT1H16M23S,false,202,8,0,0,0,so yeah let us start welcome to my session this is the session is all about Kevin Sutherland line clipping algorithm and we shall see how exactly this works so here is the code I'll come back to the mathematics for this if I run this this is what you get so basically this is the input and this is so you can see here there is a clipping rectangle there is a line and this is the zoom the ocean of this this is the output this is the dip in your tangle and whichever pixel comes in between the rectangle I should I like whichever pixel doesn't come they should not should not show so we'll see how exactly we can do this is there any problem no sir someone is did you redo her all my words yes sir I guess when nan BMS active members try to log in you wouldn't uh you'll get this boy because young it's not less wise it's a company team boot but we are able to hear completely great and great break so yeah if you run this program this is what you will see and this is my input and this is so whichever pixely comes outside my flipping rectangle should not be shown in whichever pixel comes within the rendering should be shown and yeah this is the zoomed version of my output so why exactly I have it owned this you will understand this in epic or so this this particular theory is in the strand the theory behind going so the land taking so the agenda for today's we'll start module three and module three is all about clipping 3d transformations illumination models so now let us start the first one called written basically war ii mean by clipping is for example if you pay if you take your camera whoever comes in between all within the camera frame your shadows objects would be visible and those days those objects those pixels [Music] that is what is called as clipping I request everyone to mute themselves so this is the theory behind clipping and there are various forms of clipping you know various types of clipping start with point there is something called as line clipping this poly polygon clipping so Kohan Segel and algorithm talks about line clipping and there is another algorithm called sutherland Hodgman algorithm which talks about polygon clipping so I'll repeat flipping means just take out whatever pixel comes outside mr. Ramon can you please move it sir it is not mine sir so yeah pour let us start with clipping there are various types pointing so all we have to do is there will be a there will be a rectangular window so called a clipping there will be an object example line because we are talking about cones of the land so the learn oxido of line clipping so we have a rectangular window we have a line and we have to show only those pixels which are inside this rectangle and those pixels which are outside this rectangle should not be shown in means to say it should be clear top so example let us take this particular rectangle and let's say I have a line like this so what I essentially need to do is take these parts and also take these parts clip off means remove these and what I need to show is the pixels which are coming inside the rectangle like this so how do you do this there are various ways but Sutherland her I mean consider learning algorithm talks about doing this task in this way so there are various combination of lines for example a line can be a beeline a line is you know as a line which is completely inside the clipping rectangle there is there can be a line called 'rain like EF the line which is completely outside the rectangle there might be a line called gh where in some parts are out and some parts are inside there will be a point there is there can be a line called CD since story some parts inside some parts outside how do we clip this well what we can do is let's fix some boundaries so that we can know what to be think for example if this is your window and there you can you know you can just have this x-axis boundaries and y-axis boundaries like this and thus you will get nine regions we call this as out cold regions and assign essentially 9 cooks for example this is stop and if this is left and this is bottom and this is right obviously this this becomes stop left this becomes talk right and this becomes bottom left and this becomes bottom right so this is this is all pure English but how do I make my machine understand about what it stop what is left what is right and what is bottom so where we have four codes forbid codes perhaps so if I I mean I can assign something like this this is a TBR L called top bottom right left you need not to be trivial you can you can take any sequence but whichever bit you highlight or whichever bit you make it as one that indicates that particular region for example how do I make my machine understand that the line or the pixel is at the top region well what are those I'll make my top pick as one and all the bottom right left as zero so if the pixel is at one triple zero means that pixel these are the top so left means me only the left pixel as one me others 0 bottom means TBR L make the bottom part as one and make others as 0 right means pbrn third bit is one angle is zero so on the similar lines can you tell me what is this this is stop right so TBR M so T is 1 and R is 1 so D and L there is 0 so this is how you will meet the emission understand about where exactly your pixel lies and I can use these four bit codes to make my machine understand about this so next point is how do i exactly clip the pixels outside the window well what we will do is let's first calculate the intersection point then redraw the line from the inner window point to this intersection point so essentially to make you understand for example I want to clip I will take this line CD so to clip from B - that is the intersection point from B - to be essentially I should not show this be - to D I should only show from C to B C - D - so what I'll do is I will first calculate the intersection point called as D - and then redraw the line from inner window point to this intersection point means to say I'll redraw from C to D - so it's an indirectly an order drawing from B - to D so it's it's just cool so in order to you know repeat in order to line let's say from G to H I want to draw a line and I should get from G to G - + H - to H so how will I know how to draw G - G - and H - 2 H is I will calculate the intersection point G - and H - I will quickly draw a line between G - to vegetation thus indirectly I am NOT writing I'm not drawing these pixels and these pixels so in that way it's very cool so this is what a what is called as Cohen cylinder gotta command main question now comes is how to exactly calculate this intersection point so see this B - G - and H division if you can ask me the question what about a and F well E is also lying outside F is also lying outside the clipping rectangle so no need to draw the scanner so if you don't draw this EF up obviously it means that it is being clipped out of the what about I J I is also outside the clipping window J is also said that upamana so intersection point I - J - they are also outside the window so no need to come so you have to make the Machine understand about where exactly this first is you know to calculate the intersection point and then you should make sure make the Machine understand about where exactly these points right so we'll do that in a in a while so the main challenge is to calculate these points so we'll see how so what we will do is first point we will pick clipping that angle as usual what we will do is we will mark the boundaries so let's say this as X way these two are X x axis and this is my Y axis and this is also my Y axis so if I can hear mark this as this guy's X min and which one this one and this as x max you know horizontal bodies and if I make this as my women this is my Y max vertical wise and let's take a line so I need to essentially clip this part and this part so I should draw only this from this intersection point to this intersection point so before we calculate the intersection points so let us try to understand the existing points or else the points which we already know so for example if this is the scenario and if I have a clipping rectangle like this and if I have a line like this can you now tell me the warp is Dysport what is this point this is obviously X comma Y but X I know it has explained because this particular line is X min and this particular point is X mixed so X I know but what about why can I write Y as Y min for this point no so Y mean is here and I want to know what is this way so I don't know I cannot write this particular point as whitening because why mean is here so why I don't know here same case why I don't know for this I cannot write Y is equal to Y max Y max is here X I can write as X max because this vertical line is x max I cannot write Y as Y X because y MX is apparently here so for this coordinate intersection point what is what I don't know if you take another case another line something like this can you now tell me what is this point and what is this point well if Y is equal to Y min definitely for this path because this line this line is women but yeah similarly for this this since this is y max I can write Y is equal to MX but for this point what is X can I write X as X min no because the explained is vertical point vertical line here so X I don't know here and similarly X I don't know here as well so now the real challenge you know is calculating those question marks if you miss if you have missed just a repeat here is my my clipping rectangle here are my boundaries this is X min x max Y min Y max if I take a line X minus this X Max is next why I don't know for this you know what so why I don't know and if I click another line y is equal to Y min Mexico y equal to Y max X I don't know here and here also there is when I cannot determine X just like that so my real challenge is calculating those question mark means to say this one what is the Y your what is the Y here what is X here what is extra so what we do is we know that for a line X naught comma y naught to X and comma Y n the intersection point X Y can be calculated something like this let's take a rectangle and this I know this is a line and I am saying for a line X naught Y naught means this is my X naught Y naught and there is X naught Y naught 2 X n comma Y n means this is the Rickson you are calling it Carolee unavailable the intersection point means to say it's this or perhaps this this is X naught Y naught this is x and y and the intersection point can be this also can be this so let us take this so this intersection point XY which is my question mark this can be calculated something like this so this X Y we have the slope that is y 2 minus y 1 by X 2 minus X 1 so for this point from this point to this X naught Y naught so the slope is y minus y naught by X minus X naught so cross multiply M times this is equal to this so by this if you if you I mean your intention is to calculate x and y so take out X from this you will get X naught plus this x by Y and they got Y from in this equation you know that Y naught plus M times this so we should now be applying this formula that is this X is equal to X naught plus why minus 1 by M and y is equal to Y not plus M times X minus X naught so this formula in my question marks so let's go back where we left with question marks let us also have let us also keep the formula ready and now comes let us now calculate these question marks so let us start from this Y the left coordinate so this question mark I don't know so what you do is you want to calculate Y so apply this formula Y is equal to Y naught plus M times X minus X naught so that is how well get it Y is equal to Y naught plus M times X X is here X min minus X M so what about this now you tell me Y is equal to question mark I don't know so this will now become y equal to Y naught plus M times what is X here it is X max minus X so what is left now we shall calculate this x coordinate and this x coordinate so so now X apply this formula X is equal to X naught plus y minus y naught by M so X is X naught plus y Y means whinin - why not / M and similarly for this X that the top one so you can write the same formula X equal to X naught 1 by M into what is y this is y mx it's fine so these are my intersection points so if I want to put it in a nutshell finally this is how the final intersection points look like let's go back these are you are you understanding it it's a are you on this training yet guys everyone so should i quickly recap the mathematics is it required no okay so will now go to I will quickly show my PDF as well this is my nine program for a fifth program Cohen circle and algorithm and you can see in my PDF this I have taught you know what is top left bottom right and also I have taught you this and I have taught you this the same things will now come into not over you can see all these equations are nothing but calculating intersection points so this is how my program looks like and you will see all these alright so go back to the code blocks so I have my program and if you run for your sake yeah let me show you output so this is my input and this is my output I have clipped from this point to this point and this intersection point to this intersection point can you now tell me why exactly I have zoomed this portion and I am showing this here the reason is if I don't do this kind of an activity the customer will not be customer in the sense you you will not be able to see what is input and what is output the moment you run the program you will only see this particular things so I just wanted to show what is the input and what is the output so next question you should get is why exactly am rooming this that is purely my wish I can say I could have I might as well you know written this output next to to the input itself which you could have done it but I thought let me show this you know in a big escape to my students so that's the reason I am zooming this showing the center of the screen you can you need not have to zoom this like zoom it like this you can perhaps show the output here itself or what you can do is show the input to the customer have a dealer for two seconds and then there itself you can show the output so it depends on the customer satisfaction you know if the customer wants both the input and output could be seen perhaps you can do something like this and if you want the output to be shown to be showed in a bigger scale so you can zoom soon like this and sure so zooming is also in fact we have done this in 2d viewing I have taught you the scaling practice if you can remember while is teaching 2d reviewing I had while derivation that big derivation what we did in the RUS so scaling factor of X is this scaling factor of Y all this we saw there anyway so we'll come to the program now this so this is this is the program there is start from the mean so mean is this is and this is single buffering more and this is my single buffering mode why because no animation is required and showing any 3d with animation it's this to be static image which gets cleared up so I should not write or I need not have to write glut on the score number all right so window size 500 by 500 my window position initial window position starts at 0 comma 0 these are all be only my wish you can developers wish even so I have a window which says this heading and let me call my in it my in it is here so I am having a black window this one yeah it's starting with 0 comma 0 and I have a black window and my ortho 2d my camera coordinates is also fine under confinement so my LR beauty which I have totally in the class that is also planned on the fact so my window size is also found at homo 500 and I can the coordinates this is LR beauty left is zero right is 500 P is zero so I love left right bottom all right so now coming to this - blah blah display funk of display so I will go to display function and X naught Y naught X 1 Y 1 so X naught Y naught is apparently this the the line starting point and the lines ending point that is this point this is 80 comma 1 point 8 so the line starts from 60 comma 20 to 80 comma 1 rupee so color buffer bit it whatever we had set the color to be black it will now rush to my screen and GL color 3 of 1 1 1 means my pixel color is white meaning to say my primitive pixel color this way you can see this white rectangle white line these are I mean the courtesy in this one 1 1 5 line so now let us concentrate on this part show the input of the coming customers important so begin lines so vertex 2d what X function JL property two arguments D is double X naught Y naught so 6420 is this and x 1 y 1 that is 84 my 120 is this line it is let me draw the line first and then how do I draw this rectangle well it is just nothing but a line load line loop X min Wyman so X min Y men mix max my max these are all my nodal coordinates so X min is 50/50 X min women and xmax ymax is 100 100 means to say this X min Y min this whatever we hear this one xmin xmax ymin ymax these whatever I show now happens to be your P comma 50 hundred 100 and X we mean why we mean next V Max Y V Max these are my viewport candidates rapport coordinates so viewport coordinates in the sense these so where exactly I am doing so these are my two hundred 200 and 300 I will come back to that in a moment so where yeah we are done with this so we are done with the input line and the input clipping rectangle and next is it is our job to call coincident bypassing clipping that sorry the the line that needs to be clipped is X naught Y naught X 1 Y so go to coincide land so you are passing X naught Y naught X 1 Y 1 actual parameters will now be collected into my formal parameters same parameters like I mean same arguments of you have seen variable names all right so you remember this we talked about yeah regions alarming top left bottom right top bottom right left whatever sequence you you prefer so we should be carefully talking about our plan about how exactly a pixel situates in any of these regions so we call those as out core regions so we definitely have two out core regions one is output 0 and out one means this particular pixel and we can name it as output zero and this is output one and the final one that the one which will allow us to decide where exactly this output 0 is situated that will to be pasted in there will be held in a new variable called will will come after that in a bit so I have a boolean variable accept and done so if I say accept is equal to false means if you take this particular portion yeah so accept equal to for me false means II the pixel number E is also outside pixel number F is also upset so both the both the guys I should reject it except is equal to false so if you can take a B both the guys are following inside there are kind of exception to each other and there is none done is equal to false means right now the done variable is false means we have not yet started our algorithm the moment we make done as true that means we are done with our good well you will understand that enough in a bit so out code 0 that is the first points that is X naught Y naught out code region so out cold region means if you take the point them in the line CD C is inside B is outside so C is inside I can understand B is outside this rectangle the human being like me can understand but how do I make the Machine understand I should be making my machine understand I'll assign the outfall regions the orbit course so something like this so out code 0 that is the calculate that is calculating the region of first point you call this function out called zero of X naught 1 so go through this function compute out code of X naught Y naught that is apparently this computer it's not why not so we are exactly your point lies so initially make your code as 0 the initial code variable 0 understand 0 means here here this is 0 means everything is inside so let me assume that everything is inside so once I assume it then I will calculate the exact point exactly so if Y what is y now you are sending X naught comma Y naught so Y is apparently why not now if y naught greater than Y max so what is your why not so I'm passing from one so the land so from Kovan Sutherland I am calling computer code X naught Y naught so X naught Y naught is your P comma P so the same things x and y is also in this case it is home of the feet so what is y y is 50 now if P greater than Y max or is y max so is greater than 100 know the P is not greater than hundred else is 50 next and what is women Y mean is 50 is 50 less than 50 no so P is not less than 50 so P is equal to P so the control doesn't go here next one what is X X is 50 P greater dan what is X max its max has to be 100 is 50 greater than 100 no the control doesn't go here so next one else it's checks is X 3 less than what is X min X minus 50 so 50 is less than 50 no is equal to 15 so control does control does not go here and told him to go here control didn't go you can ask me why or what is the logic behind this the return code means to say X naught Y naught is this point though X naught Y naught a return code means it is just a project again so you're saying X naught Y naught 60 comma 20 guys 60 comma 20 P sorry this is 60 this is strengthening Y it is 60 X it is 60 so now let us yeah X naught Y naught is 6 3 comma 20 now I'll pass 6p comma 20 here all right so 60 comma 20 will be passed Y 20 greater than 100 no 20 less than 50 s the control will now go inside this so 20 less than 50 Y is 20 Y minus it's 50 so 20 less than 50 means yes control will now go inside this now this is fine mathematics is mind fine but I would like to let you know from the logic angle as well why exactly control went here the logic behind that is see where is X not Y not easier it is where the bottom left or topper right is at the bottom we we human beings we know that this is at the bottom but how exactly I can make my machine understand this is how I can make my machine understand so basically you have all this and check your output regions so in these four loops the control will go inside one loop will satisfied so 20 less than 50 called or is equal to cold or water so cold will now become so this is equal to bottom it shall now become which will now be for its core initial 0 0 0 0 or what is bottom what is bottom 4 so 4 in the sense 0 1 0 0 which if you are these two you will get 0 1 over here so this is my latest corner 4 is equal to 4 or bottom zero 0 0 0 or 0 1 0 0 so this is 0 1 0 0 so what is understanding so if I is 10 60 120 we I know that this is at the bottom I made my machine understand something of this so code is now 0 1 0 0 means that is nothing but 0 1 0 4 but what is for for its water so we understood that this particular point is that whatever so let us also yeah if I go with this the control doesn't even I mean the control after this it will go here because this is n this is just if there's an RLC and I written here else control wouldn't have gone inside the office so don't write a for this I should check my why my I'm done with my ex I should be not checking for X so what is X X is 60 60 greater than 100 No else is 60 less than 50 No so it doesn't go here a return code so what is the code now so the calculated code is is 4 so I will return for so what is the meaning the meaning is X naught Y naught that is X naught Y naught means line so Y bottom because 4 is what now so out code 0 because this guy will now return it will now return 4 and 4 will be now paste in this out cosy similarly we will calculate out code 1 you will now understand if you have any doubts here x1 y1 what is x1 y1 there is not me that mistake eddie comma 120 so 80 can you now tell me what exactly this function will now return out code 1 so 84 120 is here it is where the top so top meaning to say 8 so that is what this function should return let us see whether it returns so x1 y1 is 80 comma 120 so this is 80 this is 120 now all right so 4 is 0 he is why why is 120 120 greater than Y max is 100 yes 123 100 yes cold will now become cold equal to 4 Oh which is equally scored 0 so it is 0 0 0 0 or with top but it's top top is 8 so 8 is 1 triple deal though rich is if you are a zero with 8 you will get 1  0 which is nothing but 8 which is nothing but top so me please it is top yeah common sense 80 comma 120 this is situated at top region for example if I take a horizontal line something like this so you will understand that this is at the left portion and this is at the right place but since you have taken a vertical line so we we understood that the X naught Y naught is at the bottom x1 y1 is at the top so you should mean the machine understand about it so similarly we will check if Y is greater than Y max since the controller satisfied your control will never go there and since this is just if so it will check will go here it will just check what is X X is 80 greater than hundred no and since I have not satisfied here I check here what is X X is 80 less than a 6 min no so return code what is code for is 8 so return the same meaning x1 y1 is at so this guy will now return a meaning so out code 0 is for out for 1 is 8 that is this is out code 0 this is bottom foot and out code 1 this is at 8 means it is under all right so it's a dual now we will see what needs to be accepted what needs to be rejected and all these mathematics all right now what a now the if loop says if called zero or out : so means to say if not equal to out code 0 is 4 or out code 1 that is faith so nothing which is nothing but what is 4 4 or 8 is 0 1 0 0 or with 8 this is 8 is nothing but 1 and 1 0 0 right so which is nothing but 12 in getting 1 I mean 1 1 0 0 is 12 which is nothing but now what he says not equal to true means it is false so it becomes something like this it will know that calculated as if not equal to true which will now translate so if false means the control will not go there it will now come here now it says if out code 0 that is 4 and the sign out cold 1 that is so what is 4 0 1 0 0 and person with a is 1 0 so if you add these two you will definitely get 0 it is equal to 0 this is equal to the force now what he says if I just so I will not go through this yes sir because it is says and if this is false yeah we got to know that this is false if false if means I would have gone here because it is if false control doesn't go here it comes so this else part now here comes though going to the learned mathematics so double X comma Y okay now we know the slope which is y 1 minus y naught by X 1 minus X naught now what is outcode foul okay now what he says if this is true out core out will now hold all calls you know Ellis out her own so what is out code 0 out for 0 is fourth that is true out or 0 it translates something like this is for question mark out code 0 is for : out code 1 is 8 so what it says here with true but that is true select for oh this is the conditional operator which you have studied in first or second sister BCD so yeah now out code 0 is 4 which is true so I will select out core 0 and I will put this output here to out color so you're out cold out 0 that is what so go out is now for now comes to this if out code out that is 4 and oh what is top of this 8th so 4 & 8 means to say 0 1 0 0 and plus and 1 to the 0 which is equal to 0 0 0 0 is equal 4 so if false so I will not go inside next one out pour out that is for ampersand bottom what is bottom bottom is fourth so how about four and bottom is for break is equal to zero so four and four is four and it is true angle the control will now go to this part but the real mathematics toriel fun starts here you remember we did all this alright so if my output is at the bottom means here here yes my out code at the bottom Y is equal to Y min X is equal to this whatever we discussed the profits back we will apply this one so before that it is what X is equal to X naught plus 1 by M times y minus y that is poor yeah this is 4 so out code out is 4 equal to equal to out code 0 what is an output 0 outer core 0 this is 1 so is 4 equal to equal to 4 yes go inside X naught is equal to X so what is X X is now 6 to 6 so this guy is 66 y naught is equal to Y and Y is now so in this peer mapping with my ex Norma wine and you now tell me why why am I writing or making X Y as X naught Y naught what was my X naught Y naught past tense it was it was 60 comma 20 right it was 60 comma 20 now what is X naught Y naught 66 comma 50 so I'm just here marking that this is my first point now this is the my starting it was starting point was 60 comma 20 now the starting point is 66 comma 50 now will again calculate out core zero because who knows a single pixel can be outside so will again calculate this so we will now pass this 66 comma of 366 comma 15 as my X naught Y naught so it is now 66 comma 50 so core is 0 you will now understand that everything is 0 0 that is what I was talking about earlier so what is y y is 52 T greater than Y max hundred no else part I'll not check but for your purpose I can write is 50 P less than 50 no X X is 6666 greater than 100 no else part it will not check but anyway we shall write 66 less than 50 also no so code the control is neither going here nor here nor here nor here so control will now go here return code what is core code is 0 what is code is 0 meaning meaning meaning Y or X because you are passing you're passing it's not why not the latest X naught Y naught X naught Y naught is lying where core is equal to C there is one means left two means right four mean bottom eight means top but we got zero what is the meaning of zero meaning over zero yeah here here here meaning 0 means the know pixel is inside the window in fact we had got this as bottom now we got this as Z so is lying [Music] so return this 0 where will you collect you will collect this 203 so money out hold zero because compute cold it is returning me to 0 return 1 so my out core 0 is 0 since I am done with if loop I will not check in spot so you should keep on doing this as long as this guy is true what he says now he says not equal to what is done done is we didn't go inside this we didn't go inside this so done remains it was false it is still not equal to false means it is not in not equal to false which of course it is 2 not equal to true means false not equal to false means true so while while true yes go inside go inside in the do loop now what is out core 0 now out code 0 I have calculated this as minus Z so out code zero out cold one remains same so zero zero or with eight zero zero or with eight means this is eight this is true not equal to true means false so if false means control will not go here control will now come here if out cold 0 that is 0 and 8 so this is 0 now and 8 is equal to 0 is equal to 0 is equal to false if false so don't go here come inside double X Y M M will now again change Y because X not Y not have been changed you can see here X naught is 66 why not this 50 so we'll do that why 1 what is y 1 y x x 1 y 1 we didn't touch x 1 y 1 wouldn't touch we only touched X naught Y naught so 66 colorful thing so y 1 is remain same why not that is 66 comma 50 so this guy will now become 50 and X 1 remains same X naught it was 68 is now 66 so can you now tell me 120 minus 50 this is 70 70 divided by 80 minus 16 it is boring so when we buy hoping it is fine if now comes this out core out is equal to out called zero my out code zero is zero so I will same out cadre of this zero question mark it is out code zero is zero out or one is it so now now guys look here this is the interesting part zero question mark zero : eight means if zero is false you can either I mean it says if false means don't take this value fake this value means if this is false don't take this fake out : so the condition becomes like this if if zero this you can take it as true case ii it is false case so since this is false this you will not be taken this will be taken so out core out will now be out code one out cold one is yet yeah it will now be given to out code out so out code out will now become eight what do you mean by out core out is equal to eight is we are now looking at the top region the trees we are now looking at district all we did all these mathematics whatever we did but this happened for the first point X naught Y naught now we have the same mathematics for X 1 Y so the out cold yeah out code is now eight now check out code out out core out is now eight is eight ampersand talk about this anyway it so how core out top eight and eight that is one zero zero ampersand eight this is 1 0 0 this is now true so 8 & 8 you will get it and that is true so true and true it is true that means you are in the top region remember the last point next not why not we went inside this Y because X naught Y naught was but the bottom now x one y one is at the top that is the reason we are going inside this 18 date is true so go inside so X is equal to X naught what is X naught X 3 6 so 66 us 1 by M in this file is y max what is my max 100 minus y naught y naught is being changed here it is yeah miscalculate so 1 by 5 100 minus 50 is 50/50 by Phi is 10 plus 66 it is 76 so what is WiMAX WiMAX so if you ask me what are these formulae well you remember yes yeah if you lay at the top so Y is equal to Y max that is what we did here Y is equal to Y max and X is equal to X naught plus 1 by M time is y -1 is why not this is what 1 by N Things WiMAX - fine so this is my X so 76 comma hundred now what did we understand X&Y is 76 comma hundred the if loop has been satisfied here I will not go to the cells I will not go to the cells I will not go to the sets I will check whether here what is our out code out how to code out it is it eight equal to equal to out cold zero out code zero is zero zero is zero so eight equal to equal to 0 there is no so control will not go here control will now come to this can you now understand what's the logic because if the controller had gone here that means I am done I would have taken care of X not Y not since the control is now has gone to this part it simile it means and now should take I know should take care of both x1 for my wife which is nothing but this this is X naught Y naught this is X 1 y 1 we have we made this intersection point as X naught Y naught now and we have x1 y1 the the intersection point is 76 comma 100 we will now make that x1 y1 s 76 from 100 something like this so X 1 is X naught so what is X 4 is X 76 make that as x1 y1 y1 as my Y so Y is 100 so you need this so now we will calculate whether we have perfectly calculated the out cold we general 76 comm100 so we will now pass 100 what it will return you should return 0 because 0 means inside you know means you should return 0 0 so I write this so 76 comma hundred x 1 y 1 76 comma 100 we will pass out code out compute output so this is 76 this is hundred now put in 0 fine y Y is X Y this is 100 100 greater than hundred no I will not go to else but anyway I will write here Y is 100 hundred less than 50 no X is 76 76 greater than 100 no anyway I will write x mean this loop is less than 50 no so control neither went here nor here nor not here return court whatever is a court for a zero return code for zero meaning x1 comma y1 is live inside the window so return code return zero you can see the return type is integer so it will now return 0 and that 0 will no be they can do for one so out for the final out for one is now also 0 now comes to these flower brackets now comes to this not equal to you as you remember we didn't go inside this inside this yeah so we didn't touch my done dice so the done remains false so not equal to false true while true yes go inside that loop now we will see the magic out code 0 both are both output 0 and out code 1 our output 0 is also 0 output 1 is also 0 so 0 or 0 to 0 or 0 0 or 0 is 0 0 means false if not equal to false not equal to false leaves so if not equal to false if true means or you do except make it as true done make it as true so the moment done will became true this is I will not check while thumb is true now that means what not equal to true means false the control will now come directly from this point because this see this is a living situation where we should leave here as long as is was now now that done became true I will directly come to this point now except is also true not in our case because we went here except is true done is true so done became drove me what we came out of the loop and except this also true so now go here FX that means you have to accept became true and this is anyway I have thought even the viewing class these are my scaling factors means to say this the zoom other scaling one I taught you in the class what is you know positive scaling negative scale and positive scaling means the same shape in getting increased negative scaling means the same shape getting reduced now since we are having positive so we will take positive scaling factors this I have taught you in my theory plus just to give you an idea you remember this yeah so remember all this whatever we did we did this big derivation right so this derivation and the problem this problem excuse equal to experiment plus this intersects this you see this this is X is equal to X we max minus X women by it's lovely amounts minus X mm and so that is what he says and it's wife sys yeah why we max - why - sorry this is wavy engine yeah this should be Y sorry when I'm W max - that is what this is and we are so my view bottoms to do the same mathematics we will get this whatever T relation we did this these equations it so write those equations we can calculate by request rather units to calculate I'll show I will show one guy s6 or is X we max X we max is 300 so we write if you open up your calculator so it's 300 minus X we mean it is 200 300 minus 200 but they were and by X max - fix me so is x max x max not X V Max x max is hundred X famous perfect so which is equal to 100 by 50 get students similarly do for sy v X naught V Y naught V X 1 V by 1 you will get these guys my see this is your window this is your View window this is this is X my next maximum in 1 X this is your X V X naught V X naught is this guy we why not this is V X 1 comma V 1 calculate this you will get the zoomed version of this that means you have the 66 comma fifty and seventy six comma hundred the zoomed ocean of 66 comma 50 can be something like 86 comma 60 or whatever the zoomed version of 76 comma hundred can be something like ninety six comma 120 water so the those values you will get for these days weeks even or I will tell you what you mean by V X naught C X naught Y naught is your input V X naught V Y notice this outputs first angle first no coordinate x1 y1 is your input here and VX 1 V y1 is your viewport X own way so once you get V X naught V Y naught and V x1 v vy remind you VX not formula in that formula you should apply this X in V Y naught V x1 we were so what I ultimately want is V X naught V Y naught V x1 v1 so once I am done with that now my job is very simple I draw one line loop go on that tangle now that tangle has four points I write that X women way in the main way women next we max way we man I mean all these points so I will get this big rectangle now I should draw from VX not V Y not to VX 1 V right so draw the line v X naught V away one will not be Y naught V X 1 we ended so once you are done with the entire cone to the land you come back to this you flush it now this essentially ends the discussion but we will close the loop by keeping last five minutes discussion [Music] so where we started the line display if this is the input in : Sutherland we will go and if this is cut now what we will do is first I will show you this way firstly the big point here and let me close all this all right so blood display funk of display I'll come to display I will break point is your so he bucket [Music] [Music] this will keep it the rush debugger will now go to the debugging mode and I kept my watch it's not why not x1 y1 over those so the yellow triangle is here that means to say the control is here so what we will do is we'll say next line so we got this line now push it move it out we think left angle now don't press next line you should apparently go to go on sutherland function so let's step into so yeah step into you can see all my reasons so now you can say next line this all those whatever they did so yeah ultimately it comes calculates all my output zeros whatever we did and yeah and then it became dumb so assets not know I can press this X knowledge do you know the X climb loop I will get a maximized rectangle but so now my job is to give me some so that's it that's it about today's session I hope you really enjoyed it any do I will the recorded video I'll post to you to let me know how the session went in my youtube comments and any doubts please post there itself thank you thanks for your time 
fWkLMRcVTBM,27,"Subject:Computer Science 
Paper:Computer Graphics and Visualization",2016-10-27T07:12:34Z,Rendering,https://i.ytimg.com/vi/fWkLMRcVTBM/hqdefault.jpg,Vidya-mitra,PT26M28S,false,368,5,0,0,0,you [Music] welcome to the epochal electricity's and computer science for postgraduate students we're in the nineteenth module of the honor of the lecture series for the subject computer graphics and visualization we had 18 modules earlier in the previous module the 18th module we discussed about color models where we talked about the most popular popularly used color models like RGB C my the HSV HLS color models and so on now in this session today in this module we'll be talking about rendering an important concept an important topic as far as computer graphics is concerned the subject of rendering is too vast and since we have a shortage of time we'll be talking about the fundamentals of the concept of rendering okay so rendering involves our rendering in 3d is all about imitating the real world as closely as possible as we discussed earlier the previous modules our aim in 3d is to imitate the real world as closely as possible and give it a real lifelike object feeling of a real-life object so what shall we do or what do we do to achieve this what is called visual realism so let us learn more about it the learning objectives are to understand how to apply shading models textures and shadows for visual realism so this is our objective to also understand the techniques of ray tracing an important technique used for rendering so these are the key words let us understand what is actually visual realism in the case of 3d graphics as we know so we can create a lot of objects but how do we give them the real life-like objects are real object like feeling so for this we have various stages through which we should go so that we achieve the objective of visual realism so the stages of visual realism as you can see our wireframe model first we'll be forming a wireframe model of an object which is the skeletal version of the object you can call it as the flat shaded version the smooth shaded version then will proceed to the light lighting so we can we can add lighting to the 3d scene that we've created we can add textures and we will be adding shadows and some materials I will be giving some material properties and finally some kind of environmental maps or bump maps or MIT maps so that for some objects they are so highly reflective that the surrounding environment is seen on the surface of the objects so because of the material properties with which the surface is made up of this is we're giving visual realism involves a sequence of steps which are to be followed so what is actually rendering so we will be computing the color of a pixel given a chosen viewing position so what should be the final color of a pixel so for example imagine a 3d world a collection of objects are there and now we are choosing a position in the 3d world and now we are taking a view of the 3d world so from the chosen position and the orientation so how the world appears because as we know in the real world depending on where we stand and depending on how we orient ourselves we'll have a different view of the world so the same thing we are going to imitate here in the 3d simulated world so visual realism is how to model 3d objects that look exactly similar to real-world objects so in essence it is simulation of the real world so let us see how the objects are rendered so you can see here on the screen or you have a wireframe model so this is the wireframe model then we are applying some shading so we call it flat shading then we further tweak it and so we give it a more what is called we add more lighting conditions we add more lights we have we compute the reflection properties we assume some material properties for the various objects and so on and so forth so that we compute the final light that gets reflected from the surface of the objects and so that they appear as realistic as possible so then we further add textures and as you can see in the last picture here some textures are added so that depending on what texture we add it appears to be made up of that object so that's where this texture here looks like made up of wooden it is a wood texture that we have applied on the object so that is how we achieve visual realism so what is a shading model so we are going to start our looking at the first so in this in the sequence of visual realism art by achieving visual realism we follow a sequence of steps as I said so the first thing is the wireframe model the wireframe model is a skeletal version of the 3d world are the objects in the 3d world so we are applying shading once the wireframe model is there the next step is to apply shading so shading is the essence of shading our the idea of shading is to compute the interactions of light with the surfaces of the object so how do we compute the light interactions our say there is a light and the light is incident upon an object and how the object reflects light or how the object absorbs light or with what materials the objects are made up of so that the surface properties are evident and when we observe the objects from a distance how do they appear so all this computation of light are interactions of light with various surfaces of objects is all done in this shading model so as you can see here a shading model dictates how light is scattered are reflected from a surface assume that there are two types of lights that illuminate objects in a scene so for simplicity we can assume that the world is illuminated the world here means the 3d world that is the imaginary 3d world is illuminated by lights from external sources which can be point lights are ambient light it can be so the daylight so that we can assume so a shading model the job of a shading model is to compute the amount of colored light that gets reflected from a surface given a viewing position so finally what we observe is the reflected light and given a viewing position given a set of lights and assuming the light properties assuming the material properties so how much light gets reflected and what we see actually in our eye is what is to be computed so the shading model does a big job of computing light interactions with surfaces of objects so how does the light interact with objects in a 3d world so you can we can take the real world analogy again an object can be a blackbody an object can be highly reflective an object can be made up of say a combination of reflective and absorptive properties it is something like whatever light that is incident on an object if it gets completely absorbed we call it a blackbody as you can see here in the picture when the light is incident upon a blackbody the whole of the light gets absorbed and nothing gets reflected so but what we observe is a reflected light okay what we observe is only the reflected light so a blackbody is something like whatever light that is incident absorbs the whole light so it appears black a dark so unlike that we have another kind of object where say if the surface of the object is imagined to be like this very much rocky rough and it is made up of this made up of what is called very rough or texture a kind of surface so when light is incident some light is absorbed some light is reflected in multiple directions so that is called diffuse reflection so a part of the light is absorbed and some part of the light gets reflected in all directions equally the other kind of reflection is specular reflection so in the kind of surfaces that exhibit this property are like say where when the light is incident the whole of the light it's reflected in only one particular direction so that means you will see what is called a bright spot on the surface but that's called specular highlight so as we can observe that mostly surfaces exhibit both specular and diffuse properties for the surfaces so let us see how light computation is done how the interaction of light with objects is done so what are the factors that are involved what are the computational parameters that are taken into account here the amount of light incident so how much light is falling on the object the color of the incident light so color also matters the relation between viewing direction and the incident direction it is also important because we are viewing from somewhere the light is incident and if it doesn't get reflected in the direction of viewing we don't have to bother about computing the light in the direction of viewing and the surface properties of objects because they are going to define whether the light how much of light should get reflected from the surfaces the type of the light sources in the scene are the reflective properties of neighboring objects so sometimes the neighboring objects also play a major role and ambient light and its color as well so color light also influences the way that we observe a light or the reflective light so interaction of light with objects can be categorized into two which is diffuse scattering and specular reflections as we discussed earlier a diffuse scattering is where the amount of light incident on the object a part of it is reflected in all possible directions a part of the light is absorbed so as you can see a ball like object is shown here when it is made up of material with diffuse properties it will appear like this but when an object is made up of metals or maybe like plastic like objects or like say shiny surfaces whatever light that falls on the object most of the light gets reflected in a specific direction so that is why you would see what is called a specular highlight this is called this bright spot on the surface is called as cooller highlight so as i said earlier most of the material most of the objects are made up of surfaces are materials which exhibit a combination of both diffuse and specular properties so flat shading so is a basic version of shading where we tend not to bother much about the various undulations are the kinds of surface properties what we do is we imagine the surfaces are made up of polygonal flat faces and also that we consider one polygonal face on the object and we compute the normal vector for that compute the amount of reflected light assuming a given light source and a viewing direction and then for the whole of the polygonal face we'll be applying the same color are the same intensity so that's where because we apply the same color throughout the polygonal face as you can see here the donut like object here appears Jagd and roughed up as all the polygonal individual polygonal faces are very much clear with shading techniques better shading techniques like much smooth shading techniques which we'll be seeing later will be able to give the object a very smooth like appearance so as you can see in the smooth shading there are two of standard shading techniques used one is godard shading the other one is functioning in the case of Garwood shading we interpolate the colors assuming the vertices of a polygonal face are given various colors and we try to interpolate the in-between colors between two vertices so we interpolate the colors between two known vertex colors well the case of Phong shading the normal vectors are interpolated so unlike garage shading here the normal vectors are interpolated as we know from earlier discussions normal vectors is an important component of 3d world because normal vectors identify the orientation of an object in the 3d world so what will do is will be computing the normal vectors of various vertices and then we will be interpolating the normal vector directions so that is more accurate and it gives a better surface than the garage shading so as you can see the flat shaded one of a ball flat shaded appears like so what is called desolated a garage shading one appears like this and a Phong shading one is so perfect and smooth so the light sources so once the shading is done shading models are done so we can also imagine the light sources in the 3d world so or we can imagine four types of lights one is the point light that one is the direction light the spot light and the area light so light also has got properties so as you can imagine light can be directional so we have a direction for it you can attenuate that is you can fix up a distance after which the light intensity dies or the it's a it's the attenuation you can imagine the light properties like diffuse ambient specular the color of the light is also an important factor which we can consider so here let us go further into the next level of visual realism which is applying textures so we have added lights we have added we have computed the shading model or we have used the shading model and the next step is to add textures so by adding proper textures we would get a feel for the kind of material with which the object is made so in 3d graphics we can make surfaces look more realistic by trying various textures like which are made up of either bitmap or procedural what is it a texture texture is fundamentally an image okay what we will do is it is something like say imagine you you wanted a globe like object you can imagine a sphere like thing first what you would do is you would take a sphere and then you would wrap around a sheet of a printed flat globe you would wrap around that sheet around the spherical surface so that is what we are going to do here we are imagine a 2d map and then we wrap around the 2d map object of choice so this is there are two ways in which you can imagine a texture one is either you can imagine a bitmap or you can use a mathematical equation to create a bitmap okay so to create a map or to create a procedure that creates an image or an intensity value so how do we apply textures given a 3d object in the 3d world and we have now a texture which is a 2d image okay now as you can see here this is the 3d object which is a cylindrical surface and this is the bitmap image which we would like to use it as texture so we are trying to take this texture and wrap it around the cylindrical surface so how do we do is our aim is to find for every position on the cylinder or the cylindrical surface we try to compute or we try to find an equivalent pixel from the bitmap texture image so once this image is now used being used as texture you know for texture image it is called it is a texture and it is in 2d world so for every pixel in the found a cylinder or for every position on the cylinder will be using will be computing or will be selecting a position on the 2d world so this in between 0 0 and 1 1 space is called the texture space so we are in the we are in the pixel world are we once we collect a pixel and then use it as a texture we call it at XL pixel and pixel okay once the Texel is used or to map are to attach to a 3d position now the texture we say is applied to the 3d object so that is how we do it in the reverse order so this is the texture space for every position here we normalize the bitmap 2d space into texture space which is between 0 0 and 1 1 so we take each and every point and we convert that into an equivalent value and we find a suitable pixel here a suitable position here okay now you can see this order the image space okay a texture space the object space the viewing space and the screen space so the arrow marks are in the reverse direction okay oh you should observe that so we'll be going it in the reverse direction okay screen space viewing space object space texture space and in the image space okay the texture space is the normalized version of the image space okay this is what is the texture space and textures also can be used to are like say the bitmaps also can be used to create roughness on surfaces for example you can imagine orange the orange surface is such that there are lot of dimples on the surface so the surface is not smooth like your baller spherical surfaces perfectly spherical orange is a spherical but its surface is lot of it has got a lot of dimples dimples are lows on the surface or the low means it's a you know it's a valley like our it's a hello as you can see here on the teapot there are a lot of dimples so how do we create such a surface is we can use the bitmap or the texture space and we can try to pattern the normal vectors of the surface of the object by the petrol being the normal vectors according to the texture values are according to the intensity values in the texture space so that is where we can modulate this modulation gives us a feeling that so what we can do is on the low you can you can redirect the normal vector so that it sees in a different direction so that the reflection at that point is almost minimal okay when no light is reflected from a point it appears as if it is a dimple okay otherwise it is a high so it is a low and it is high so we can recreate such surfaces which have dimples like orange the surface of an orange width by modulating that normal vector using the texture values and reflection mapping is one another technique where you can reflect the surrounding environment on the surface so of objects often you can see when somebody wears a spectacle or you can see the surrounding environment seen on the spectacle so that is the nearby objects are the objects in the outer outer world are seen on the surfaces of the highly reflective metallic objects like you can as you can see here the metal teapot the surrounding environment can is seen on the surface so this can be done by techniques like ray tracing Oh we'll see further the shadows is the next step of visual realism so once we add lights it is obvious that there are shadows so if the light is unlike an ambient light there will be a shadow okay so how do we compute shadow or how do we create a feeling that the object is casting a shadow so for that what we can do is we can imagine a light source and we can compute we can take projections of all the faces of the object imagine a cube there are six faces for the cube now you can imagine a light source you can compute the projected version of the of each of the faces on a flat plane which is basically the ground okay so once we add up all the projected versions of all the six faces on a planar surface like ground we will once the sum the projected versions are summed up we will get this shadow shape so the shape of the shadow is computed by summing up all the projected versions of all the possible phases of an object here the example given is for a cube you can read here further which you would understand better so the last step in the towards visual realism is ray tracing ray tracing is such a fantastic technique where it's and it's so complex it's it takes quite a lot of time the algorithms are so complex that to give us a real lifelike object a feeling it's it's very difficult because of lot of interactions of light because of the colored conditions of the light because the viewing positions chosen because of interactions of light with various objects and because of the surface properties of the objects we get to see the various kinds of surfaces and objects ray-tracing is a global illumination based rendering method for generating realistic images on the computer so adding realism is so fundamental and it is the ultimate objective the advantage of ray tracing are to enhance visual realism lighting simulation hidden surface removal shadow calculation texturing reflections and transparency as you can see here a principle of ray tracing is to calculate what is called that is the amount of light that reaches a given pixel position so imagine we are standing here and we are seeing the world and before your eyes you can imagine a rectangular grid the grid is our viewing area okay in the grid for each pixel position you can start with the first pixel position on top and you can fire array into the 3d world and the light are the ray hits various objects while it moves imagine the 3d the ray hits the objects in the 3d world when it hits depending on the surface properties of the object the Ray will take multiple direction some of the light rays get absorbed and some of the light rays you can you can divide the light rays or the intensities further and you should track the Ray till it reaches the light source because say we have to track a ray from the grid position or the from every pixel position on the grid towards the light source why it is in fact you can imagine why it should be done like that in fact every light originates from a light source and then it reflects and refracts and then it gets absorbed and finally lot of light rays go in multiple directions and in fact we should track the light ray like that know why because we are not interested in all those light rays that emanate from the light source and then go in all possible directions and which finally do not reach this grid okay which finally do not reach this grid if we do that that is if we track the light from the source towards to various into various positions we will be wasting lot of time and source resources and thereby will lose a lot of processing power as well I'm wasting lot of processing power as well so instead we'll be selecting a pixel position on the grid and we'll be firing a light we'll be filing array into the 3d world and it takes multiple directions and we can calculate reflections and refractions and the final finally these should reach the light source so we'll be calculating how much light intensity finally reaches the pixel question here so for every pixel position we should calculate this so for the entire grid once we do this we will get to see such fantastic images as you can see here these are the Ray traced images as you can notice simple and ordinary images look like this ordinary visuals look that look like this but realist images look like this as you can see how fantastically the reflections and refractions and the transparencies there can be transparent objects partly opaque and partly transparent objects and imagine such complex objects in the 3d world but we can still fantastically do this rendering of various objects so that they appear like real-life like by ray tracing technique or with this we come to the end of the 19th module of the computer graphics and visualization subject we'll be continuing in the next module with the topic with the animation which will be the next topic in the 20th module thank you 
Dizhc98pL7M,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-09T09:18:45Z,Color Models (CH-10),https://i.ytimg.com/vi/Dizhc98pL7M/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT33M38S,false,12940,153,8,0,9,you welcome to the partial a lecture series and computer science for postgraduate students and this is the 18th module of comforter graphics and visualization subject ok so we are we've learnt in the previous module how visible surface detection methods are actually used and why do we need to remove a surface that is behind our back face up we call it a back face so why should why don't we consider faces that are visible and only take them from a given viewing position or given a viewing position so in this module let's focus on the other important aspect of computer graphics which is color models so which is an important thing as far as for you to understand how colors are reproduced on a system and how colors are used and the theory behind them so let us see what are the objectives of this module so to understand what is color and how it is represented in graphics application so what are the various color modes and color models we call them mode so you can also call them as color mode or model whatever the popular color models are RGB see my Y IQ h sv & h LS color models okay so let us understand what color is our how do we represent a how do we represent color so how do we model color and how do we use color and in what context we use color and how do we use them so color is nothing but we can define that as it is made up of three attributes one is like say the dominant wavelength our hue the other thing is intensity or brightness and the other thing is saturation so we can understand that a color can be defined with the three parameters the dominant wavelength so wavelength of what here wavelength is what wavelength is nothing but the wavelength of the light that is reflected and that enters into the human eye so imagine you are standing in an open area and imagine it is a day light so what you see actually is not the light itself what you see is actually is the light that gets a selected from the objects so what we see is the light that falls on the object and gets reflected so we see the reflected light so here the word wavelength means the wavelength of the reflected light okay the wavelength of the reflected light so light we can imagine that it is in an elect in the electromagnetic spectrum we've got from violet to red the Webb's your so there are wavelengths in the wavelengths of each of these lights so we can classify them into a bands of wavelength bands and accordingly we've got various colored colored lights and lights and so on so and here color models are the interesting things that we will look at so as you can see here the color models the light is an important thing that you should understand so light in an electromagnetic spectrum he is understood to have various frequencies and various wavelengths from violet to red and beyond okay so which is the electromagnetic spectrum so the color is fundamentally defined by the three parameters the hue which is called the dominant wavelength very important the dominant wavelength out of lot of light that gets reflected from objects okay light falls on them and light gets reflected out of lot of light that falls on them only there is what we see is the dominant wavelength not all wavelengths we see we see the dominant wavelength so whichever is dominant among all the other wavelengths and the humans are also are limited in their viewing range we don't see all possible colors and we don't see all possible wavelengths we see only specific wavelengths the next important parameter is the saturation which talks about the purity of the light a third parameter is luminance which is which gives the intensity or brightness of light so the three important parameter that define light are the defined color are the hue the purity or saturation and intensity of brightness the word chroma refers to color so if we say chroma means it is a combination of hue and saturation chroma defines color looma parameter which is intensity or brightness of that color so as you know when we combine two colors we get white so if those two colors are called as complementary colors so red and cyan green and magenta and blue and yellow so colored models are used or colored models use three colors a two sometimes two also so two to three colors a minimum of so to produce all possible colors so as you can see if you take RGB color modify see if I say RGB is my color model what do I mean to say is I have got an R I've got a G I've got a B and I'm going to combine them in various proportions to get the colors of my choice so I take some R and J as you can see in a color palette so a combination of colors if you can see the monitors can produce 16 million colors so to power 24 if 24 bits we are saying to a color the possibilities are 2 power 24 the other high power powerful monitors can still produce 2 power 32 possible colors are there so what why these are possible we says at the amount of each of these colors that we combine to get a color of our choice is the color that we see so these two or three solid colors that we are using and we are combining them so these two or three are called the primary color so if we take the two or three colors which are used to produce many other colors is are the primary colors and what is color gamut the color gamut is the range of colors that a color model can successfully produce color gamut for RGB might be different from color gamut from say San magenta yellow color mall the CMYK color model so color gamut for see my may be different from the yaq color model color gamut for y IQ color model may be different from the HIV HSV and HLS color models and so on before we go to understand actually what is a color model and what is a color gamut let us look at a theoretical color model from that we will take some we will derive some concepts and we will apply that on the real color models or the practical morals so let us understand some theoretical color model a theoretical color model say XYZ color model where XYZ are the three primary colors which when combined produce many possible colors okay so the amounts of as you can see in the slide here the amount of red green and blue needed to produce any spectral color can be represented through what is called color matching functions so what is a color matching function here as you can see on the graph so there's a function for B function for G function for R so each of them are curves the x-axis has got the wavelengths suppose for example you wanted to produce a color at exactly say five hundred and fifty five hundred and say for example five twenty five is the wavelength there you want to produce a color at that wavelength so what do you do is at five twenty five you can take a little of blue as you can see from the color can take a little of blue you can take some good amount of green and you have some amount of red which is on the negative side so what do you do has given in the equation there for a color of your choice you can take some amount of red blue some amount of green and subtract the amount of red from it okay the red curve alone has got some part of it in the negative direction but otherwise leaving that part if you go beyond say 550 and 600 if you want a color to produce at 600 what you do is simply add the amounts of green and red you don't have to bother about blue so that's how we can produce any color using the color matching function so the CIE XYZ color model is a commissioned international it's an Italian the expansion for it so do not worry more about the expansion so CIE color model it says how what is a theoretical color model and how do we understand what is the color gamut and many other concepts from theoretical color model we are calling it theoretical because we have our gbcm where which are practical color models so imagine there are three colors XY and z they are the primaries and that means we are going to combine XYZ in some proportion to get the colors of choice the XYZ color model says that the three colors are to be added and any color see lambda is expressed as a proportion of a he is the proportion of xB is the proportion of Y and C is the proportion of Z so the proportion of X is a and proportion of Y is B and proportion of that is C and these amounts of a these amounts ABC and ABC actually are to be determined as per the wavelength the color choice that we want so where ABC designates the amounts of standard primaries that are needed to match the color C lambda what we are doing is in fact theoretically we cannot say all the time that okay ABC are some proportions instead we can normalize the amounts so that we can use them because always exact amounts are not possible because we use different different quantities of colors every time in different proportions we require so we generally take normalized amounts of the colors so given the actual amounts how to get the normalized amounts they say for example at X - represent the normalized amount of say yay let Y - represent the normalized amount of B which is B by a plus B plus C that - represent the normalized amount of C which is C by a plus B plus C so so these ratios are always either 0 or 1 so the minimum maximum is 0 and 1 for the normalized amounts as the relation is no valid x - + y - measure - is always equal to 1 because of the normalization step so now or given two colors can you produce the third color given two normalized amount say for example given X Dash and y dash we can compute easily sir dashed because we have the relation so X dashed + y dash is equal to 1 - set - so if you can get Z dashed if you want one - X dashed - why - to get Z dashed so given two normalized amounts you can get the third normalized amount but given the normalized amounts can you get the actual amounts because always we need to find a mapping from normalized amounts to actual amounts because you need to convert these numbers to the actual volumes you have with your actual quantities of colors you have so given normalized amount how to get the actual amounts which is not possible in fact so if you are given X Y Z X dashed where - these are dashed even if you are not if you are given all the three you will not be able to compute ABC for sure okay so what do we do is what do we do is we generally take two normalized amounts and one actual amount so that we can compute the other two actual amounts okay what is that we are doing we are taking two normalized amounts and one actual amount okay for example if you take X dashed and why - you can take one actual amount say B also along with that so that as can be shown as mentioned there say X Dash and y dash and B are known then you can easily compute a and C okay as shown there so the color matching for the positive primaries the imaginary primaries the explicit primaries are all on the positive side so X Y is it as you can see these are the color matching functions the advantage of this color model so as I said in the beginning we are looking at this theoretical color model to understand some concepts okay how the color models the theoretical color model is advantageous for what is called the understanding color gamuts color gamut so identifying complementary colors and identifying dominant colors and identifying saturation of a given color so as can be seen here if you draw a graph for the X Y there is X dashed white as the two normalized amounts or as we talked earlier in the two normalized amounts and one actual amount if you draw a curve it is a 2d graph and the shape is called the tongue shape shape that we see is the tongue shape and on the boundary of the tongue shape we have the colors that are purest form at the center we have got the white which is indicated with the letter C or the white there and an imaginary line that is connecting the violet and the red which is a dotted line as you can see which is not there in fact we are simply connecting it okay we are simply for closing the figure and for understanding purposes we have added but that is not there actually in the graph so the color gamut what what is now the color gamut color gamut is nothing but a range of colors that a color model can successfully produce now let us say color model is nothing but made up of two or three primaries as you can see from here let's see 1 C 2 B the color model okay C 1 and C 2 are two different colors now connect them with a straight line two different colors in the diagram connect them with a straight line okay and what happens if you combine these C 1 and C 2 in various proportions and when you combine these two colors in various proportions what you get are the colors and that exactly fall along the line connecting C 1 and C 2 what is that again let me repeat so C 1 and C 2 color model if we take what do we understand by that is the if we combine C 1 and C 2 in various proportions the colors we get exactly fall on the line connecting C 1 and C 2 okay fall on the line connecting between C 1 and C 2 so we can say the color gamut for C 1 and C 2 are all the colors that fall along the line connecting the two colors C 1 and C 2 similarly take three colors C 3 C 4 and C 5 which form a triangle like so what is the color gamut for the color model C 3 C 4 C 5 are all the colors that fall in the triangle inside the triangle that is formed by these three colors as three vertices okay so it is called C 3 C 4 C 5 color model so that's how we understand so what are complementary colors complimentary colors are colors that when combined produce white it means take any two colors and when you connect them with a straight line if the straight line touches the if the straight line passes through the center white sea is the white color white it touches the white we say those two colors are complementary colors so any two colors when combined if they produce white we call them complementary colors and the purity of a color from the center to the boundary say for example the purity increases so the purity is maximum on the boundary as you know pure colors are on the boundary and as we move towards the center there is no purity it is white so saturation is zero at the center and saturation is full and 100% at the edge so if you want to color if you want to know the saturation of a given how pure it is see how much far away it is from the boundary okay so as can be seen for a color see one the saturation is given by C 1 minus C by C s minus C ok so let us see the first and the foremost color model the RGB color model which is the most used color model and the best example is your monitors your computer monitors or your display devices most of them use RGB color mode they combined RG and B in some proportions to get colors of choice so the RGB color model the 3-dimensional color model we call it is represented within a cubic form Innis in a standard unit cube form okay so that means the cube has edges that are of size 1 it's a standard unit cube the RX is the g axis and the b axis at the center the origin is actually occupied by the b the black and the opposite diagonally opposite vertex is for the white okay the line connecting the black and white of all the grey okay the colors that fall along the line connecting the black and white are the grey all the other vertices are occupied by the what is called by the important colors the red and green when you combine what you get is the yellow vertex green and say blue when you combine you get the cyan vertex blue and red when you combine anybody magenta vertex so as you can see the vertices are also represented there okay the best example is the monitors and display devices so the colors are added to get colors of choice so that is where these are called additive primaries now what is the color gamut for the RGB color model which is a practical color model the color gamut is nothing but all colors that lie within the standard unit cube okay similarly the color model see my is also an important color model that is used in the print media if you take printer say monitors and we got RGB color model they use them and printers if you take they don't use RGB they use instead the cyan magenta and yellow inks to produce colors of choice so now given you you want say some red color you have cyan magenta yellow inks in the printer how do you produce some color of your choice again as you know it is called subtractive color mixing okay cyan absorbs red as cyan and red are opposite so cyan absorbs red blue is blue there is magenta absorbs green because they are opposite colors so so blue and yellow they're opposite colors so what happens actually the color model the see my the cyan magenta and yellow color model is also represented using the same standard unit cube but the difference is that the cyan access the magenta axis and their lo axis at the the origin we've got white earlier in the RGB color model at the origin we've got black now we've got white here and on the opposite vertex we've got black hair so the grey line is the line connecting the diagonally opposite vertices the white and the black okay now at the intermediate vertices we've got blue red and green that means if you combine cyan and yellow you get green if you combined sine and magenta you get blue so but instead of adding here these see my use subtractive color mixing where colors are subtracted the primary colors say the red green and blue are subtracted from the respective cyan magenta and yellow so that we get color of for choice so as you can see here the color gamut for this and magenta yellow color model is slightly closer in size to the RGB color model okay the see my if we given RGB values you can easily get same way by subtracting the RGB values from one and vice-versa the next interesting color model is the y IQ color model so why do we have these many color models what is the fun in having these many color models is that as I said it is not possible that we can use one color model and produce all possible colors in the world that's a limitation of the color model okay not all colors in the world are possible in a color model so that is why for example if you want to produce human skin color the best color model is the HSV color model so some colors are possible in a color model and those colors may not be possible in a different color model but the colors that are not possible in the first color model may be possible in the second color model and so on so the color gamut for each of these color models is differ different the next practical color model is the y IQ color model are y UV it is also called in literature it is also called as y cbcr the Y stands for the luma component the UV stand for the chroma component of the color model okay the y stand for the luma component the inq are u and v are CB z as you can call they form the chroma compound that means the chroma information is sent using two values and the luma information is sent in one value okay the yeq color model where is it popular do you know where this is used or as it is in television broadcast uses the yaq color model are the Y UV color model even the DVD players are the back side of these players you can see that it supports the y UV format it supports y cbcr format so this color model is such like where as what happens in a television broadcast is that at the base station or the source station what do they do is they combined why you and we on one as one value as one single value and they transmit this single value and at the receiving end the values are separated into Y U and V and they are used by the television set or your DVD players or other display devices so that is why it is called composite color model that means all the values are sent across one single cable one single has one single value so these are very useful color models which occupy less bandwidth so they are very much useful as they occupy less bandwidth the next interesting color model is the HSV color model which is the practical color model okay you must observe one thing each of these color models that we are talking about are represented using a shape are using a volume RGB color model we used standard unit cube Y UV color model we used a standard unit cube the HSV color model is represented as a volume and the volume mean has the shape of a cone a hexagon we call it's a hexagonal cone we can call it are called in short it can be it is called as hex cone okay it is a hexagonal shape on top and it is like a cone so that the shape is hex cone now how do we represent the color in this hex cone is say HSV we call it so a color is given with the three values the H value the S value and the V value and the color gamut for HSV color model are all the colors that lie within this hex cone volume okay H is hue yes is saturation V is value H is measured as an angle between 0 to 360 yes is measured as a value between 0 and 1 and V is a value that is intensity you can call it between 0 to 1 imagine a hexagonal cone on top of the hexagonal cone that is the top plane of the hexagonal cone and on the boundary of the hexagonal cone or they lie all pure okay hexagon means there are six vertices starting with red yellow green cyan blue and magenta at each of the vertex we got and on the boundary we've got purest colors in the purest form and the white is at the center and on the top plane and the black is at the vertex of the hex cone okay the line connecting the black and the white is the gray line okay the colors that fall along the line connecting the black and white is the gray line and how do you know find a color so to find a color you need to give the three values the h SN b okay now what is HSV for red I say H value is say zero degrees yes is say one and we say one okay so for all the pure colors on the top plane of the hexagonal cone the V value is 1 so V is fixed yes value on the boundary of the hexagonal cone on the top plane is 1 and as you move towards white we have as we move towards white the saturations saturation reduces to a value 0 so at the center of the what is called the the volume that is at the center at the white guess is zero okay now the axis that connects the black and white is the V axis the value we can call it as value axis the hue is measured like an angle from 0 degrees so are at 0 ello at 60 at every 60 we've got a pure color that is we have got pure colors on the boundary for sure but the important colors the red green blue and this and magenta and yellow are at every 60 degrees okay now if you are to identify a color you need to get all the H and s and V values corresponding so adding a black pigment to a color produces shade of that color we have the important terminology here shades tints and tones a shade we get a shade of a color when we add black pigment to the pure color that means as we add black the U we get a shade of and the shades lie on the on the boundary and towards the bottom so they move towards the bottom all the colors that lay on the outer surface of the hexagonal cone and on the boundary of the hexagonal cone from the top plane to the vertex all the are all the shades so when we add more and more black pigment we get colors close to the vertex okay so shades lay on the surface of the hexagonal cone and things like what are tensed entry when we add white to a pure color we get tint of that color so when we add white so the white is on the top so tints are on the top lane and between the center and towards the boundary all the colors that lie there are the tints okay and the tones are all the colors that lie inside the volume inside the hex cone are all the tones so pure colors lie on the top plane and on the boundary so H is 0 to 360 yes is 1 v is 1 / pure colors gray the central line from black to white 0 to 360 H yes is zero because at the center s is 0 V varies from Center to boundary that is V sorry V varies from bottom to top 0 to 1 okay so for shades as there the outer surface of the hex cone they lie on the boundary and outer surface of the hex code 0 to 30 60s is one because it is the boundary and V value varies from 0 to 1 tints yes is 0 0 to 1 V is equal to 1 because V is equal to 1 is the top plane of the hexagonal cone and tones are the all the colors that lie inside the volume of the hex code so we can perform conversions between RGB and HSV and vice versa sometimes you might require to convert from one colored model to the other color model when you do that it might also happen that the color that is possible in one color model may not be possible in a other in the different in the other color model I can give you a simple example when you I say you can open Photoshop if you are interested in Photoshop you can just see opening an image in one color model and try to convert that into another color model you might see a kind of alert symbol a triangle and an exclamation inside that indicates that when you are trying to convert the image from one color model to the other color model there is a possibility that some of the colors in the original color model may not be possible in the target color model so there can be some out of gamut colors if you say okay what it will do is it will find the closest approximation to that color and it will replace that with that color model okay so you can do simple conversions between HSB and RGB and ycbcr as you can see how do we do a conversion is if you say RGB color cube if you see it is a cubic it is a cube and the shape of the volume for HSV color model he is hexagon when you see it from top it looks like a hexagon for the HSV color model when you see the RGB color cube exactly if your viewing direction is aligned with the diagonal of the cube that is the gray line of the cube connecting black and white you will see three faces of the cube so if you forget the if you just ignore the lines inside so it is also a hexagon the RGB color cube also is a hexagon as you can see when the viewing direction is aligned with the diagonal connecting black and white this is also a hexagon that is also a hexagon you can easily compare these two hexagons and you can do this and the last color model which is a chalice color model which is simply an extension of HSV color model where we are extending the hex cone on the OP on the upper side that is we are inverting the hex cone and putting another hex cone on top so it is called a double hex cone so what is the double hex cone so we are simply extending this color model such that the two hex cones are one inverted above the other there is one above the other and the central line connecting the black and white vert is is the gray line again but the difference between the HS way and HL s color models is that the central that is the central position central plane of this HL s color model is where the pure colors like okay on the top it is white on the bottom it is black and any color is represented with three values H yell and yes H is hue as usual yes is saturation instead of V there we are using it another variable yield only to separate the two for pure colors yel is actually point fare so L is the vertex can L is the axis connecting the vertices black and white so yel is 0.5 for pure colors H is 0 to 360 again the same angle and saturation is 1 so s is 1 l is 0.5 H is 0 to 360 for pure colors and gray is the central line connecting all colors that lie on the central line or the axis connecting the black and white vertices so L is equal to 0 to 1 s is 0 and H is 0 to 360 shades when we add black pigment to a pure color we get shades of that now shade sly in the bottom half of the HL s color model on the boundary okay tints lie on the upper half of the hex double hex cone and on the boundary and tones like the tones are nothing but all the colors that lay on the entire inside of the double hex cone okay so with that we come to the end of these color modal's discussion an important discussion and graphics without color models is like it doesn't sound well and you need to also know that there are lot of applications of color models and I said one important thing this color gamut why do we have these many color models is that the color gamut is different for different color models not all colors in the world are possible in one color model okay so RGB see my y IQ HSV and a chillies are the color models that we have learnt in today's module and today's session so with this we come to the end of the color models discussion thank you 
isuilfFN6mU,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-10T05:49:12Z,Temporal Visualizations (CH-10),https://i.ytimg.com/vi/isuilfFN6mU/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT28M52S,false,11,0,0,0,0,you welcome to e parcel as lecture series and computer finds the subject is about introduction to visualization and we in today's module we are going to discuss about temporal visualization some of the learning objectives of today's module are btrim we try to introduce the concepts of what temporal datas belong to learn the different approaches of temporal data visualization we learn the visualization of representing or presenting temporal data in the form of a graph and we will also look at certain examples in temporal data visualization introduction to temporal data the temporal visualization or time lines are similar to one dimensional linear visualization because time lines are widely used and vital enough for medical records project management and historical presentations and they are considered as a separate data type temporal data is characterized by items that have a start and finish time and items may try to overlap with each other the time line visualization usually include all the events before something or after the inventor occurred or during some time period or a moment some of the examples of temporary measure ization include the time length the gunshots the stream graphs are diagrams and thread arcs clearings concentric circle graphs prime series shops and rafts an alluvial diagrams let us know have a look at the different approaches to visualizing the temporal data countless charts and visualization represent time and especially the same manner usually a horizontal line that is the x axis is divided by the temporal units that progress from the left to right the vertical y-axis has some kind of quantitative measure as such the x axis provides an anchoring point for the independent variable while the y axis is a must for dependent variable that time has a strong independent streak as such for example the outside air temperature can depend considerably on the time of it's measured but the time of date doesn't depend on the weather condition the x-axis is clearly not the end of the line for incorporating the time dimension and graphical representations of data the temporal information can form rich tapestries of patterns that needs to be visualized in various ways and it is to be fully understood and supposed to be appreciated there are many possibilities for representing their times and techniques to make interesting temporal patterns perceptible as always creating the best design involves considerations of cool audiences context the nature of the data and the capabilities and constraints of the system that is being used often it isn't possible or desirable to show all the data there does mean captured in a given span of time so the key is to use transformations and representations of data and that reveals the important but otherwise hidden patterns as Megan laundry and IBM researcher who worked on temporal visualization displays at the University of Maryland notes the pieces of the data that get obstructed or remove should depend on the type of the equations that you are going to be asking different tools are designed to support different types of questions or such so this shows this is an example which shows the power of the line graph which has been done very long before so this is here you can see the x-axis is time line which start from thousand from 100 two thousand seven hundred and eighty years so here we can see how the balance was against and the balance was in favor of England in the late thousand seven hundred million Playfair set the stage for how many of us automatically think about representing the temporal dimension that is the line graph line graphs are ubiquitous because they are a simple precise and powerful way to represent the temporal data all the discipling time as a progression from left to right take a longer horizontal line has become ingrained and many people's thinking there are notable exceptions are such so if we look at the flow of the time diagram here we can see how the time diagram goes right from the left hand side to the right hand side corner within some time period so here we can see the variations in the time period with respect to the data that has been captured so in ask iconic flow map of the Napoleon's catastrophic 1812 invasion of Russia chance may not blends and bends temporal and spatial representation the part a number of outward bound soldiers is represented by an initially ticked and ribbon so there's an initially ticked and urban that represents the part as well as a number of output bound soldiers while the welding number of retreating survivors are represented by a narrowing black band in this visualization the time it took to march into Russia is not very clear the only timestamps shown are for the return trip in processing from right to left in a sense time is meant to advance the impact of visual narrator so if we can see we can have a look of how the invasion has occurred starting from the left hand side to the right hand side as such so this is another one example of a time series dataset which are a preference more multiples and a big store chain data set as such so in this if animated visualizations are highly compressed movies that shows are the showing changes over time and small multiples of sequences of freeze-frame images in which we can design the overall patterns and also focus on individual elements of which the visualization shown the growth patterns in the expansion of the Walmart store chain and us over time so starting from one particular time being unsure the growth we can see the growth of Walmart how it has changed and now at present how it has grown to this extent when compared to the initial starting point so this is the small multiple of a big store chain this is the near real-time data set which mien captured here at October 30 2012 the speed and the average speed of the wind is being clear they can see how the wind speed changes but the respect to each and every region how it has changed and the the wind power all cells being represented in the form of a legend so at any given time we are only able to take in a limited amount of information about the world around us so this is at a specific time say October 30 2012 and at a specific time so generally that views actually narrowly focused on our immediate surroundings from visualization can distill and reveal otherwise hidden patterns of the activity occurring in near-real-time the uses of these displays can also range from defined practical purpose to a more experimental and thought-provoking quality here's an example of the letter which shows ever-changing wind pattern moving across the US in real time the lighter the line from the higher the wind speed so this example of the near real time scenario which is being represented in the form of a man there's a logical order and typical timing for many of our daily activities so it is possible for us to visualize the relationship of events over time beyond the familiar routine there are many other kinds of chronologies that can have an impact on our lives but can be hard to design increasingly we are able to collect and analyze many patterns of actions and events and data that would be otherwise imperceptible ben shneiderman and catherine pleasant weather colleagues the human-computer interaction lab in the university of maryland have been grappling with the challenges of visualizing various kinds of temporal patterns contained within large aggregations of data as such so this head seals team approach to this kind of analysis was to build an application called even flu and then apply this to analyzing the data including the collections of the electronic health record that is the EHRs in order to understand the way their application works there are two key terms to know that is point events of a single time stamp examples online shopping transaction selecting an item or purchasing an item in the case of hospital admittance it is admittance admit to some specific hospital the interval events take place over periods of time durations with starting and ending points so this is an example of the interval time that is the time in an online at that time an online shopper spends on a particular website which has a starting time and an end time similarly the duration of third quarter in a football game which has a starting time and the ending time and we can visualize the events that occurred within this starting and the ending time investigating the patterns and relationship in both point events and interval events over time can quickly become a complex task so this is some kind of visualizing the relationships of events over time here we can see the point events the vaccination precedes the symptom by one week which can be inferred using this figure we can see we have an injection here you have the symptom which means the vaccination precedes and each and every point R represents one week basically starting from June 1st to June 30th so here we can understand that the vaccination precedes the symptom by one week so we have two different symptoms and three or more symptoms try to develop within one week that is an inference that we get from this time lining event similarly the pointing event during an interval event stroke occurs when taking drug a so here we can see yeah within an eight weeks time period you have the stroke the drug a has been started and drug es the end time at which the drug has been ended and in between we can see the stroke occurs which tells that the stroke has occurred within the time that drug has been taken similarly we have multiple interval even that just when the drug is being started and when the drug is ended similarly the time at which drug B has been started and red beans so this task becomes even more demanding if the goal is to compare and investigate similar sequences of events many hundreds of thousands of records is partially shown in the screenshot even in this case with only five of the 215 records that are shown it is difficult to make any kind of meaningful comparison in their time and sequence of events however making these kinds of comparisons can be useful in gaining insights about processes and procedures that happen in the hospital so this is one data set so this shows various data set the starting of the particular drug that has been taken the ending time of a particular drug with various multiple drugs that has been taken so this is a time series data set that has been included in an EHR by creating a graph from the data that is a layer of the table we can also visualize the changes in the graph or the underlying data over time by simply enabling the time on our data there are numerous graph types such as bar line area and scatter plot graphs that can be used for visualizing the temporal data as such the type of graphs that we use depends on the data and how you want to visualize it over time common examples of graphs to animate data through time include some of these attributes are plotted on the y-axis and time on the x-axis or vice versa some examples include a line graph but streamflow on the y-axis on the time plotted on the x-axis or a scatterplot graph as in the example the graph below with water gas and oil production plotted as 3 Series on the y-axis and the time plotted on the x-axis so we have the lost soldier field of production we have the time series the time starting from the left hand side to the right hand side from 1978 to 2006 and we have the water gas and oil which are represented as three individual lines here the attributes are also plotted on the x and y axis that is this includes a bar graph with population and disease on the y-axis and country on the x axis this is the countries represented in the x axis on the population change the population is that person in the form of a bar graph so in the graphic below the state name is plotted on the x-axis and the population is there a presenter on the y-axis since there are repeating features for different times this is a representation on the form of a bar graph when the layer of the table is used to create the graph of oh it has time enabled under specialized over time using the time the same using the time slider the graph will only show one bar per state for each sequential time slice for example in the graphic below the population value for the year 2000 is displayed for each year this is a population for the year 2000 so there will be a time slider by the side if you change the time slider the entire bar graph will change as per the value that is represented in the time slider why to visualize the data through time there are many reasons that you might want to visualize the data through time such as some of the following exploring the historic patterns the data such as population or land use changes tracking the hurricane paths and other meteorological events mapping the progression of a wildfire or a flood examining the change in ozone through some kind of elevation level or visualizing the change of the occurrence of a disease with respect to time so any supported layer or table can be visualized over time by following the steps below enable the time on the data once added in the art map or group or arcs in a layer can be time enabled by setting the time properties of your layer or the time table of the layer properties dialog box and then we can go in for the usage of the time slider where the time slider allows us to step through the time enabled a data set in arcmap or global are seen in the current air traffic control environment the air traffic controllers use several visualization systems namely there are our views timelines electronic strips meteorological views supervisions etc this kind of information displayed intrinsically that is our craft positions that evolve over time conflicts between aircraft at a given time in the earth-based conditions with respect to time each of these visualizations is rich and dynamic it also displays numerous visual entities that move and evolve over time furthermore this considerable volume of information must be understandable but the minimum cognitive work - so as the traffic increases and safety criteria becomes more demanding this air traffic control requires this new kind of visualization that time and visualization Burton was the first to define representation rules that produce a non ambiguous representation the semiology of graphics this semiology is a complete system composed of find the rules which permit the building of a planner maps are diagrams this kind of system is a powerful tool to represent memories understand and communicate the information from a ology also describes and explains the perceptual phenomena and properties underlying the act of reading an abstract Burton also tried to introduce variables that are used to code the information visually namely the position of the data point the size of the data point the orientation of the data point and the color of the data point Burton did not provide special rules for time representation these graphics addressed a major event to show temporal data with a static representation these views are not a simple time series or Timeline views Burton's work was used to characterize the design choices design choices were compared with objective criteria as such finally new visualizations were created to improve the image efficiency one visual design that codes the temporal information that does a radar comment that is being useful there are traffic controllers the radar comet it is very difficult to create a new design without any kind of support nevertheless we identify several different methods when building visual entities and empirical approaches to design based on trial and error methodology yeah historical approaches to design based on the continuity of the previous book with the concern for adaptation for the given context an ecological approach is to design based on the respect of on the respect of both physical and perceptual human factors and the technological approaches to design based on that technological opportunities they'll design proposed to be investigated as error or comment it instances all the mentioned the sources of design and the first design sources are ecological design sirs so this is a Haley's chart of the Tradewinds that was built up in the year 1686 so here we can see in one zooming factor where and you can see some particular portion of the trade winds that are being shown here their direction your comments visual properties they're used for the first time in the early 17th century by Edmund Halley who coded the trade wind direction on the map he also coded the flow with the form of in the form of a stroke so the flow of the wind is represented in the form of a stroke the comet has accurate design properties it displaced the direction of the shape and the tendency the comet is composed of a bigger part its head and a smaller part it's take its hand indicates the comet heading and the tendency indicates the direction of the wind the curvature of the ship indicates whether it is turning right or left and the degree of bearing this design is an ecological design and so far that it stems from our basic understanding of motions and an ecological design is usually easily understandable so these kind of air traffic control visualization there is some benefit of this comet and their design of the foster ad or comet as historical and technical in nature so this is the figure that shows that the shape decreases in intensity over the time on a scoop this is a comet metaphor we're just being shown in the down five so it is not directly based on the Hartley's design but on early radar equipment which I relied on scope persistency older radar scoops reading the previous plot position with the fading of the screen phosphor this kind of design has the same remarkable properties as a highly style comet in that it displays our craft project risk curvature tendencies and show if an arc refers turning and the degree of reading is also being shown in this diagram the audience is the main frencher at our view for the area traffic controllers and its main goal is to display the aircraft position and to help the air traffic controllers to space the aircraft beyond the security minimum Mirada track also a profile flower traffics position speed the name altitude in the speed of text so this is a fringe radar screen which also shows that kind of visualization so this is the earliest coded information meirin the aircraft position is encoded as a visual code in the form of a position the aging of each position is represented as Feist we can see here as the aging increases the phase also decreases the aircraft tendency from left to right as a comet curvature that is represented here similarly the aircraft acceleration that as a regular irregular point spacing shows the aircraft acceleration as such and the aircraft entity is represented with respect to proximity and size basically proximity is the nearness of each and every object that is placed on the screen so the this is called the ODF coded information is transformed into a visual code so for instance the aircraft tenancy data is not needed to draw the comment but the common neverthless code this kind of information the emerging process stems from the embedded time in the radar plot positions and the time can be easily derived into speed in acceleration the common design is an efficient visualization of data time the fact that the underlying data is temporal helps the reader to interpret naturally emergent information such as of pea the tendency and the acceleration view this kind of geo spatial and temporal data simultaneously is actually very difficult it is therefore desirable to do so in order to identify the Geo temporal relationship that might show the movement trends or where a terrorist plot might culminate into some kind of attack so enhancing these kind of geo temporal data visualization involves the intelligence data that is being displayed with multiple views that is overlaid with numerous data points connections and details this data can then overwhelm their display surface of the single monitor maintaining the context within the larger data set is actually challenging because it is mentally demanding to remember what was seen previously where it was on the potential relationship to the current information a gigapixel intelligent analysis navigation tool was invented to implement the solution to these kind of problems use of route linking techniques similar to the type are often employed to represent social networks and the geospatial visualization that plays the notes over top a map in their appropriate position the Geo temporal problem was addressed by mapping activity age to the opacity of the edges between the nodes so this is an interaction with the help of this giant that is a G gigapixel intelligence analysis navigation tool which was implemented to solve some of these problems so this is interaction with a giant for example a phone call that occurred several days ago would be represented by a faintly transparent edge between two nodes whereas an opaque edge indicated the current activity a separate Timeline view was also included but the edge opacity allowed a basic understanding of the even tour during without requiring users to switch their focus to a differently the remaining problems were addressed by using a high-resolution tiled display it all it allowed us to show greater amounts of data at once while still presenting the multiple views there was a sufficient area for the data to avoid traditional information visualization navigation strategies such as panning and me overview in detail focus on context and their associated problem with maintaining the context information by designing to take advantage of the increase pixel count the implementation of many features were not possible with a single monitor solution and was done so this is a Jain social network graph that has been shown here using this they can better understand how to integrate that time on the geospatial data simultaneously in a single view expose an information visualization and hit see if it evaluated different methods of conveying this type of data the rapid prototyping techniques were paired with formal user evaluation to understand the effective ways to analyze or and finding the threatening events and the person these methods were then used to explore the benefits and challenges associated with using high resolution tile day displays for intelligent visualization during system evaluation it was found that combining the geospatial and timeline views offered a more efficient means to search than using isolated views users also located specific note faster with the Timeline view because node names were shown as an index geospatial searching also improved with the location-based an oath because users relied on the familiarity with Namie geography lastly the large ad large tile displace overcame many smaller display shortcomings it still direct by filtering and other methods to reduce the amount of data that are shown on a single window as such so some of the examples of these kind of temporal data visualization or a stream graph which is a technique that is used for displaying large scale time series data based on the data set and can be used to overlay multiple time series data this kind of visual could be used to illustrate changes in sales volume over time for different products because of the thickness and color of each stream it does more compelling way of showing the temporal data and then I started a bar chart so this is an example of a stream graph where we can see how much each and every dataset has been viewed by entire person so this is the kind of data at Facebook here comes Google and Yahoo with respect to time so this is a starting time this is an end time that the steam graph has been they the data has been taken this is another example of the data set which shows the project starting time with what are the tasks that are completed and when it was completed with till the project ending time we can see what are the various subtasks and when those subtasks were being completed or when it wasn't limited with respect to the time series data so this is another rectangular view of the data set a visualization of the temporal clustering of meteorological time-oriented data from the podium observation station this is a meteorological data set that was taken with respect to various time starting from 1960 to 1997 this is another example of the temporal data so here each shape shows how one film did at the box-office asset so starting from June till February for each and every year we can show the height shows actually the weekly box-office revenue of each and every movie and the area of the shape and the color corresponds to the film's total domestic gross so the gross income from that filaments are prevented with respect to the color information and what are the various film the film information is one for given here with the respect to Timeline this is being so in the summary we can say that though we have looked at the introduction to temporal data the various approaches to visualizing the temporal data and how to visualize the relationship of even's with respect to time the temporal data visualization for our traffic control has been taken as a case study and has been dealt with in a detailed manner the Geo temporal data visualization has been studied and some of the examples of temporal data visualization is also being looked at thank you 
ZL7H22jaTvQ,22,Computer Graphics and Visualization as per VTU Syllabus,2020-04-20T09:51:43Z,Module-4:3D Viewing Part-2: Perspective Projection Transformation_ Part-1 by Prof. R. R. Patil,https://i.ytimg.com/vi/ZL7H22jaTvQ/hqdefault.jpg,Ravindra Patil,PT40M17S,false,14,2,0,0,0,we'll come back to computer graphics and visualization subject in last video we are discussed what will for in that model for your disgust 3d waving again in that 3d viewing we are discussing parallel projection today we are going to discuss from the same module today we are going to discuss perspective projection right what we mean by in last video we discussed briefly about perspective projections what is a perspective projection what is a parallel projection other things now today we will start discussing in detail that is the perspective projections right under parallel projection view a person is easy to generate and preserve relate to portions of proportions of objects he does not provide a realistic representation in the last video we have we are with an example I have told that in parallel projection you can maintain the proportional parallel relieve to proportions of objects mean see if one line ends if one line ends in real world ah one is that 10 comma 10 and one line other way and there is of that line is at 20 comma 20 cents you can Milton in your projection great that it means the length length of this that line can be retained there as it is on parallel projection when you are going to display but it doesn't provide a realistic repayment that that doesn't look real a real object because our eye looks in a different way that that that is the reason we are going for perspective projection right to simulate the camera picture to simulate a camera feature we need to consider that reflected light rays from the object in a scene following flow flow for the same flow converging path to the camera film film plate mean in real life whenever you're taking a picture of a new object then that picture of that object is printed on the film which is normally present at the back side of your camera right then how that is presented whatever raise your capture from that of the that rays are coming then they those arrays are converging at some point and your field means those rays are combined coincided at a particular point in your film right any camera that is what real camera does say we can approximate this means if you're taking four lines for example if you are taking a rectangle rectangle then all four lines will come and join it only one point that is called convergence right and I feel normally it will happen in real that kappa right we can approximate this geometric optics effect by collecting then then care that can be implemented in OpenGL house that our real-life camera the same can be implemented in OpenGL or any software we can approach make this geometric optics effect by projecting object objects to the view plane along converging paths to a position called the projection reference point for a center of projection thing we can approximate means whatever I have told means the Rays will come and join somewhere all rays will come for example if you are taking a picture of a particular tree then from all the sides of the tree rays will come in they will converge somewhere in your camera film that is what the convergence point rate that can be approximated in any computer graphics applications right by projecting objects to the view plane view there is a view plane means for example if you want to take here image then by projecting objects to the view plane along converging path to position called the projection reference point or the center of projection in next slide image may be there you can see here for example first one first image there are two lines you want to take those two lines image and Europe you play mean see what the it means major right then in that case what you are done I have taken a raise from that line on my view plane then normally those rays should be corrosive some point that is done projection reference frame that is called projection character sports such two line object images we are taking on our view plane whatever razor your father whatever ways we have possible along with that line they will convert somewhere they will convert somewhere that is a projection that means five then this size of line he is not same as that appear the size of line may not be same as data the original whatever we helpline is that right because your account that line image somewhere in the between that original line and the projection reference point it depending on that this noise will increase or decrease here then one more image article for example if you are taking a house image in perspective projection center of projection is will be worth normally always will come in China tower I think there is a projection of projection then whatever rays are coming from that object with those are projectors then we will plane somewhere in between our objective our eye you will be there will be project like that is means I guess this is what the projection plane you can projection reference point right in the object object is somewhere you plane is somewhere then project reference point is something that projection reference point is means all lines always projectors Jane converse some point normally convert some point that is called projection reference point that again I have given same mistake make one an example in the last class I mean a bandsaw if you stand at one point on a railway track which is straight line which is exactly straight to stand at one place at a railroad track but you see long for longer distance you see for longer distance after some Pistons the light tracks will you will feel the tracks are merging joining that's the projection reference point with that point is none projection reference point or the convergence point there you will feel that the lines even though those parallel reality but you will feel there they are joining somewhere that is the projection reference point that is that center of projection there is one center of projection right then objects are then despair with the foreshortening effect that's why we are told the objects of them just to be displayed with the foreshortening effect depending on where that projection plane is the projection plane lies in between your objective projection reference point projection plane will lie between projection reference point and object in between that is there that's why this the size of objective foreshorten effective thank you yeah projection project up projections of additional power projection of a distant object are that our projections of the distal object so are this smaller than the projector projections of the objects in the near near side that's why the projectors the projection if you project you for project a longer distance object then they will look smaller if a projector with near this if your object is where near fewer i object is wave near to your eye then it will look body bigger if object is very far away from your eye then it will look very small off that is the meaning of this line means thanks then next is perspective projection transformation for next next is perspective direction transformation coordinates means we have to transfer respect to projection to perspective transformation coordinates right that is what normally view coordinates give you coordinates those four words four points having the real coordinates then we have to convert to projection transformation coordinates right means now till that point the points are in 3d after that projection process after this projection we are converting into pudy that we are to write we can sometimes select the projection reference plane the reference point as another moving parameter in a graphics we can sometime sometimes look at the projection reference point as another moving parameter if the graphics projection reference point miss converging point can be treated as another moving parameter in a graphics package but some systems place this convergence point in a fixed position such as the view points by default in some packages you can adjust this one our way in sumter for some system by default the viewing the viewing reference point is by default projection reference point right such as the view point means from where you are moving that automatically will become the projection reference point in some of this stuff in some of the systems you can adjust right that's why the projection part of it special position X Y Z for example if you want to display if you want to take the projection of point P for XP in this image that is the XY chart on projection plane on projection plane right we generate projector projection reference point net x per section reference YY projection of this right here to the right side my right side right it is a xprp wipey wipey fe jump erp that is reference point they're actually their first item is there they are going to converge if there are profiles all points will converge at for that point since we are taking only one point that's why we are drawn only one night if there are many points will be there all will converge means that is nothing but you arrive means always will commit convergent our life unless how many objects you are seeing all object rays projectors will come and converge at all right that is what position of this point here that we are taken there then that is means from that point where is nothing but we have about that point that reference point is nothing but we are viewing from that point that Phi X view that mu Y rule which point we are moving we are giving point a P then we are taking an image on that point at project view claim that is view plane that is a colored we are shown here that is a XP YP z vp means I want that pH to be projected in this plane at a point XP YP chat VP right then these XP YP said we feel are not exactly sit there they may not be exactly same as that of e XYZ but this was the case in parallel plane parallel plane if object is somewhere in real life that object is somewhere here then the projection also same means if object is at XY chart then after taking projection the object remains at X Y since X Y it means in projection plane is a 2d could happen that's why in real life if the object is at some distance in the X in some distance in Y again at this it may be same at projection plane and see because we are taking a parallel projection but in this case it is not parallel here is going some inclination that's why those XY I check the may not be same as XP XP YP j vp may not be same as that of XY check those we have to can put here then what is X P what is why P what is and will be and your projected for particular line then what is those points on my projection plane actually right I know XYZ where is that XY jet but I we don't know what is the X field what is YP what is V P that depends on where your projection reference point you're taken here your object is there depending on that then value of px py PZ and P will vary for example your projection plane is towards the reference point you can move that projection plane anywhere between your object to anywhere between your projection reference point right if your projection plane is towards X X / reference point then those will lose not be XP YP chat we pair a different if your projection plane is towards P then we will use may be different or in between is that the X py pitch every week we may change that's all we have to tell about what is that window with respect to reference file with respect to object then query or take them exactly that projection plane depending on these three parameters the X py feature QP may change right because that because X reference point may be somewhere we may be somewhere you know they're 2 P and X reference point you may made your projection - that's why XP v ye p GP are not always safe that varies depending on the poll relate to positions of these three points right that's what we have to tell put what is that right the projection lines intersect the view plane at the coordinate position the XP YP geography as you know the projector line has intersected the projection plane at the point XP YP JEP right where Jerry P is some selected position for the view plane on which at various means where you want that projection plane from shared from Jeff do you want that projection plane at origin reward that projection from projection plane from original project first wizard and reward that projection plane towards nail to chat right that means that projection plane can be weighted this is off this is Nativity is available in huperzine as I have told other than camera camera he will not adjust this one but you know position you can adjust projection plane where you want to take that image that can put them image F X Italy along with your Texas because are visually looking in negative direction as I told always we are looking objective negligent direction that's why the projection plane can be adjusted the individual viewer and the object that is one of the meaning of that length okay we can write equations describing coordinate positions along this perspective projection line in a parametric form ask means then on this various exactly new points on projection plane make those points instead of taking XP YP j TP here we are taking the expense riders that generally generate instead of taking that XP YP check will be we are taking the X dash y dash judgments yet - why - check - are the poems on projection plane then where exactly they will come like that we hope you can put average because that XY x - y de gender depends on where your projection plane is there where the reference point where the object was if you are changing the projection plane individual this then X - wide range of this may change but those are not parallel they are inclining because if you are going towards the per reference point the object is very small if you are coming towards the object this image will be very bigger that's why the explains why didn't ya - is not always same in the projection plane right that's why those who article put public already - is nothing but X minus ikx minus i get the X minus y X projection reference point into you right then y dash equal to Y minus y minus y projection reference point into your chart is equal to chat - chat - chat projection plane into you where you use with 0 to 1 means you you can vary from 0 to 1 then what is you coordinate position the XY chart we present same equation along the positional coordinate points X dash y dash and ejection that XYZ coordinate points x - y DeGeneres represent any point along the projection line right then when you zero for example when you zero we are at a point P equal to XY Jack means when you use zero you are taking projection plane is towards it's your original point then you zero means you are taking the projection of that object towards the motion original point that is the other end of me like that the other end of the line and use one can use one and we have we have we have the projection reference point for the xprp ypr jump it means then you zero we are taking the projection towards the object then use one we are taking the projection or at the reference point okay this is the main it means you know this when you zero you're taking projection at P you are taking means you are taking near put that P then use one you are taking that projection towards their false find that side we are taking it what's that side right that is from a reference point this is the meaning that is at the reference point but when P is when you use what zero you are taking force it is not that point this is the meaning of this and we have the projection reference fight for that xprp why PRP and Jeff PHP and the view plane normally of the view plane shut the - equal to CH a to be P on the view plane Jenna - equal to VP and we can solve this solve the gentility equation - equation for parameter to you at this position along the projection like means then as I told that you will vary from 0 to 1 yes we're told that you will vary from 0 to 1 then what is U then very exactly have taken that point right in this from object to reference point in this area object is here your reference point area then you can take that projection in the between these four point just by changing the you if you Giroux you are taking this side if you zero you are taking that projection towards this means here near to object you're near to object if you use one you are near to the reference point you are near to the reference point then by HRU varying this you you can press that projection plane anywhere between this object and the reference point right then what is you hope you can put it up you write that you can be calculated the assets a dash equal to VP means you know the chart means a man-shark line where's that plane here it can be placed because you have the v-neck which are direction then we want them check that that claim the exactly ethical to zero article for something towards this side identical to something for that side generally can be known that's why the under equal to GM to VP right by substituting this value in the third line third equation increase this by supporting them - window in this line you can care put very easy vu from this equation that is your - equal to judge - Jeff - Jeff EVP once you know the check - then you calculate for you that we have done here W equal to VP - shirt / check PRP manager right check AFM image F force of protein jet - in that third equation in previous slide you can can put you and you know the you means very exactly you have place with that projection plane whether that projection plane is towards P the projection plane is towards that projection reference point our projection plane is somewhere in between this that will be point five that will be point two five whatever in the point for our point train you will where is it very is that mean that is a you right substituting this value of you are to the equations for X Dash and y dash suddenly subdue this view into the equation X Dash is obtained each other perspective transformation equations ask for example if I substitute those that you will do in expedient education why - then those who expand YP whatever you experiment on they explain why you can calculate that X vehicle go the exhale to check PRP - at VP divided by X PRP my nature thus xprp a picture - BP - check the body x JP a few minor job that is expe experience the projection plane then Y P equal to y el - shall appear female vp by JP r film imager + y PF pinto sure - BP - Chatta way just be a female its emphasis in general appointments those are the points on the projection plane right then perspective projection equation special cases perspective projection equations perceive special cases here we can consider special case of positive perspective position equations what are those special cases right various restrictions are often placed on the parametric parameters for perspective as I born there are various restrictions are often placed on the parameters of perspective really means you can vary that projection plane nearly between your object and be a reference point that can be variable depending on this we have the special cases right depend on the particular graphics package if I'm a particular graphics package tuitions for either the projection of reference point or the view plane may be completely optional right motion for projection reference plane a positions for projection reference point are optionally a completely optional right to simplify the perspective calculations of the projection reference point to simplify the perspective calculations for the projection reference point would be limited in the position along the blue axis right means we'll need to simplify that projection reference point when you limit that projection reference point must be in the general direction there should not be in the X&Y only ristic so that we can very easily calculate the XP YP anytime it then then for example yes PRP YP f equal to 0 x PR p YP ecology means if your projection player is always on the XY plane if your projection player is only on the XY plane then the reference point of XY is our we chill oh right because you're seeing in the future direction negative direction then your projection film is somewhere here if that time X reference point and why reference point is 0 X reference point NY reference point of 0 on which on XY plane right and XY plane yes set Y are 0 these are 0 then x XP equal to X into Delta P R P minus J VP by X where P manager there Y P equal to yr to Geoff therapy - at VP divided by Judge Perry - jack means nothing but when you are at exactly j'n nothing but if you if if your reference point if you were the reference point converging point the converging point is exactly at what is it exactly at origin then this will happen right more if you are you claim or if your view plane exactly at visible right this will happen that takes faker to this this whatever we can put this right then sometimes the projection reference point is fixed at the coordinate and that is what if you are XP YP 0 then next is sometime sometimes the projection preference for it is for point is fixed at coordinate versions of projection reference point is fixed at foreign origin that is not at origin that is not at origin that is at the x and y plane that is the exactly at the X&Y plane judge may may be somewhere that way the first one but second one if your reference point coordinate reference for a front projection reference point at origin at that time all 3 are 0 this is at origin second one is that what is it possible is that the XP r 2i p RP 0 but it may be anywhere just maybe anyway that is the first case then second case if your projection reference point is that exactly origin are three points are zero job means x PR p YP r pj pair pair of 0 0 then you at that time XP equal to x 5 exhale 2 JV p venture YP equal to y2 y u p1 recharge that is what new x and expand YP in second castle in the third case if the view plane is the UV plane and there are no restrictions on the placement of the projector projection reference point then we have means if the view plane is the uv-plane uu plane and there is no restriction on the placement of the projector reference point then we how the movie how that is a bleep equal to 0 judge we p equal to 0 means anywhere in the between view plane is anywhere in between to see you claim then if Jerry P is 0 WP is 0 then e XP equal to EF simple jet PRP my jetpack a miniature minus ax PRP will group chatter by Jeff PRP manager this is what new point when chair to be p 0 then jet will be 0 that this is x squared Y P then one more case with the UV plane as the you plane with the UV plane as the you claim and the projection reference point on the jab you jab you access the perspective equations are with the UV plane as the projection reference point on the cherry exist the perspective equations are nothing but the xprp why PRP that shared EVP equal to zero the X PRP and why PRP then chant we P equal to zero means it is at X P Y P equal to zero Jamshed via that projection is at version projection is exactly or taking at original then exp equal to e x PR here leave my apartment this is a Christmas projection reference point waiver software but you are taking that reference at origin right that this one is the meaning of this then of course we cannot have the projection reference point on the view plane we cannot have the projection reference point on it means you cannot take the projection reference point itself on the view plane right projection reference for it may be somewhere here then projection you can take that projection plane right we both cannot be at same point in that case the entire stream would project to the single point in that case after so you will project with a single point right the plane is used by a page select between a as I approached the you place plane is usually placed between the projection reference point and the same right you play normally placed in the between the real map life object and the projection reference point the input in this view plane may be you can place anywhere right but in general do you play what to be placed anywhere except we expect the next except the projection point except the fragment we have n as I opponent wheel this is the flexibility available in OpenGL view plane may not become behind the projection reference point you can take projection reference point is somewhere here you can take you plane the Sicilians objectives here your projection reference fight is here you can take view plane behind this one after that is also possible but yeah when they are taking behind the projection reference point if you take blue plane except the projection the first point your then your object will be tilted your object will be exactly reverse since if your object is like this about this then projection preference pointer here you're taking projection here at that time if your object is like this then you will get object like this normally in our eye same thing will happen it means the projection for reference point is in your eye then the film means image should be position at that side of that projection reference point if I am standing like this and standing like this my projection will be exactly the reverse you know why this is no what happens that is the meaning of this line right then perspective effects also depend on the distance between the projection reference point and the view plane as a restricted right and as I had told if your object is very near to your projection reference point then object will be very bigger right if your object you may repeat them if you leave your object goes away from your then the object looks very smaller if your projection reference point is very far away from the film then you will get a parallel you will get a parallel projection this is what the meaning of this right then vanishing point for perspective projection what do you mean by vanishing point up for perspective projection will disperse effect when a scene is projected onto a view plane when a scene is projected on the plane using the perspective mapping lines that are parallel to view plane are projected as parent lines and well when the scene is projected onto a view plane using perspective mapping lines that are parallel to you plane are projected as parent lines right but the any parent lines in this scene that are not Bella any parent lines data in the scenes that are not faring to the view plane are projected onto converging lines as projected into colonial if they are not parallel then definitely after some time they will go and join somewhere right that it converge nicely then the point at each septa projected parallel lines the point at which septa projected parallel lines appear to converge is called vanishing point right the point the point at which a septa projected parallel lines appear to converge he is called a vanishing point each septa projected parallel lines that each chapter projected further has a separate finishing points maybe next language right for example here right that is one object execute I want to project I want to project if I take that image actually the edges of that cube are several actually adjust subject cube are parallel but if I extend those if I exchange after projection after taking the projection of projection claim if I extend those parallel lines if I exchange their spiral length definitely after sometime after some time they will join they will merge they will converge there is color finishing point in reality the lines edges are parallel reality edges are parallel but after taking the projection if I extend those lines then those are kind of anything point right that is a single one-point perspective projection there is a one-point perspective position like that to point percept perspective position three-point perspective projections are there next we will see the two-point perspective projection simply if I tilt that to means I want to see the more number of faces I want to see the more number of cases of that cube in that case actually means I want to see side work this side means I want to sit this side I want to sit this side it means I want to project two sides of that cube on my projection plane at that time again the edges of those side you work parallel but if I extend if I extend those I just then again they will merge right if I extend the X phase means which is we face is a tech side which faces a react side if I extend they will were there to that direction they will merge somewhere of some distance in the jab that is the vanishing point right I extended actually this this is the X direction this is Chad this is Chad this is y right actually I am extending the X face but if I extend this one they will merge that chant they will merge AB that that's what judge if Texas vanishing point again at the same time if I expand front face if extra front face James then this this will actually enjoy net Y x axis this will join it xx that's my extra vanishing point that is X which means this is toe point perspective projection there are two vanishing points in this case right like similarly you can form three vanishing points means if you see from top then one more vanishing point you will get that Y Direction one more releasing point you will get that Y like that we have different vanishing points means single point perspective projection two point perspective projection and three point perspective projection right this is vanishing points then perspective projection we will do perspective projection we will you like that oh we are calculate for a parallel projection view value similarly here also we have perspective projection we will you write this is bounding claims claims for the we will do are not parallel because the projection lines are not coming here here in the parallel projection we have parallelepiped parallelepiped means that is a rectangular box where that is a value in this case but it is not parallel all lines are planes are not parallel the bottom top and sides of the view volume are claims through the window through the window edges that are intersect at the projection reference back read the top view prop plane side plane that side plane bottom plane all planes will converge at the center of projection our planes you will converge at the center of that is the meaning of that I mean the bottom top and sides of the view value our planes you wanted our planes through the window edges that are intersect at the projection preference file even though those are planes this is a prop claim side plane you got the plane but they will come and converge at one point that is what center of this force will be value that is here is any infinite infinite rectangular pyramid with its effects at the centre of the projection with figure you can see this is V elements deserve a project address this is a world plane talk plane thence this is side plane then that's again one more side plane this is bottom plane then all planes will merge here at the center of projection our planes will merge here this is called view value this is like a pyramid this is not a parallelepiped right this is like a pyramid right then here by adding near and far clipping like in the family paper in parallel projection we are again we are added for M and here at the end whatever object come that we are taken similarly if you do here also by adding near and far clipping planes that are perpendicular to chair - that are perpendicular - because you're looking in negative direction near em forum that is exactly perpendicular to the jet will judge you exist and parallel to the you plane and parallel to the view plane which shop which offer parts of this infinite perspective projection you will do for me the truncated pyramid that is all first term we will this is called a forum are the usual it means if you have near near clipping plane and far clipping plane then whatever keeping window this is what projection the entire thing is a clipping along means whatever outside comes from outside whatever it outside objects are there those will not be taken there is a clipping means we are taking a clipping here so we are done in two dimensions are there in parallel projection like that here also you are being clipping means whatever both of the top edge talk claim whatever bottom the water below the bottom plane whatever left side whatever outside the right side whatever after far before near whatever objects are there those will be a put whatever object is there in in this frustum that tangle of first term you will the water objectives there in this value will it that will be projected here that you project this is what clipping window right this is called a frustum this is kind of customer clipping window right projection reference point is here right in between this you can take any image this is value right then perspective projection transformation matrix right perspective projection transformation matrix unlike a parallel projection we cannot directly use the coefficients of the x and y coordinates here here the K you cannot use directly x and y coordinates how we use it in probably positive because the denominator of these are function subject because denominations are denominators of these are functions of them but we can use the three Oh genius coordinate to the presentation they express this perspective projection equation in the for homogeneous coordinate system can be used to represent a perspective equation since they for exp country X H by H H is a homogeneous coordinate the XP is X H by H right then YP is why H by H this is the homogeneous coordinate representation we are done input images and sir we are being same in three dimensional so where the homogeneous parameter has the window with the homogeneous parameter as the unit that is the H the H is nothing but jacked PRP my nature then H is nothing for the jet PRP - just the numerator seen in equation 22 if you see the textbook that is 7.30 if we 7.22 the numerator sent it in equation 22 or the same as the equation here is 17 this are with respect to textbook I return here also same equations have a second but I am not only mentioned in equation numbers that's why I am mentioning you have the new represent equation for K 2 are the same as in the equation 17 right then by taking those equations then XH is the x m2 PRP - JV p + CX PR people Jeffrey P - Jeff then Y H is jut the Y into Delta P after may be P plus YP RP into VP - Chad P that if P for what you can see these equations we are talking about these equations like these equations right then here thus we can set up a transformation matrix to convert a special potion to homogeneous coordinate so that the matrix presents only the perspective parameters cannot the coordinate values only these perspective parameters and not coordinate which I who don't want coordinate witness because those are perspective projection right the perspective projection transformation of the moving coordinate position is then accomplished in two steps the perspective projection transformation of a moving coordinate position is then accomplished in two steps in the first step we can put the homogeneous coordinate using perspective transformation matrix first we calculate the homogeneous coordinate using the perspective transformation matrix like this form P H homogeneous product for perspective transformation is pH - yeah first up too ill to pee right a.m. perspective entropy where pH is the column matrix with EHS the polymer matrix representation of the homogeneous point y XX y h JH h here the p is the polymer matrix representation of the coordinate position that the x y chat comma 1 there is a homogeneous representation a 3d point timmy still be point in homogeneous coordinate we will be project with the four values the X Y Z N 1 is homogeneous coordinate then homogeneous coordinate for pH is XH quiet j h for my edge right then after that then second second step the second after other processes have been applied such as the normalization transformation of the clipping routines after normalization then after clipping the homogeneous coordinates are divided by a parameter H homogeneous coordinates are divided by a parameter H to get the actual values of XYZ right to obtain the two transformation coordinate positions to obtain the transformation quadrant questions the following matrix use one possible way to formulate perspective projection there is one possible way to get the perspective projection matrix what is that yeah your perspective equal to just PRP minus vp0 that is a yes oh then why arrow then XY row damage a draw then homogeneous row that is what - well geography here what is the yes judge teacher parameters hazard and teachers are the scaling and translation factors parameters yes yet and digit of the scaling and translation factors for normalizing the projected will use of check for difference in some time you have to scale your means your zoom or zoom zoom in normally we have trade is the size in some means then in some time we may translate that means you projection plane if you are transferring this is what this meaning of this then specific values of the associate and TJ depends on the normalization range we select right specific values for y z and TJ depend on the normalization range we select our matrix convert the description of the seen above matrix what is the description of the same he had to the homogeneous parallel projection coordinates the above matrix convert the description of the scene into homogeneous parallel projection coordinates right this is what perspective projection then since still it is insistent to convert normalization still we are not the normalization of this perspective projection that can be done in which future topics right by program which stop here in the next class will discuss how to normalize again there ever again object for a special perspective projections are there then after discussing them then how to convert how to go to the normalization when we are done in the parallel projection that can be done in pressure perspective project means now we have formed upper first term with respect to first Rama have that object with respect to frustum that object we have covered in this first term but then that has to convert it to normalization for write that normalizing first from that may be in the range between minus 1 minus 1 minus 1 P plus 1 plus 1 plus 1 that is a normalization you another is the first talk then these objects has to be happily how we are done in parallel projection same they can be done in perspective projection that topic will discuss in next video right right this will lead to decision thank you 
9_HoCsoJ1SM,27,"At Graphics-Computing-Visualization-Lab (GVCL) @ IIITB, we work on research and development in the areas of visualization, graphics, and high performance computing. In this video, we will be showing the projects that we are pursuing currently (December 2014). The projects are in the areas of scientific and information visualization, and we are working with data in the domains of GIS, ocean modeling, medicine, and security analytics. We use GPU computing to manage large scale data.""",2014-12-11T04:52:28Z,Visualization Projects @ Graphics-Visualization-Computing Lab,https://i.ytimg.com/vi/9_HoCsoJ1SM/hqdefault.jpg,IIIT Bangalore,PT6M35S,false,334,10,0,0,0,hi I'm Jaya I'm an assistant professor here and my research interests are graphics visualization and high-performance computing which have sort of become the theme for a lab which is a graphics visualization computing lab we pursue active projects in visualization for which we see recurring themes such as time very large-scale data unstructured data dimensionality reduction feature extraction etc so today in this brief video we are going to present to you a description of all the active projects in the lab thank you hello everyone I am bina Kumari third semester msv reserve student we are working on remote visualization of radar point data set the door is a widely used technology to collect and produce dense and precise georeference data collected over large area in a short span of time it is similar to radar except that it used laser purses instead of radio waves the lead on a desert are typically very large in size containing diverse and highly complex object our primary goal is to reduce the point cloud into essential points such that it encodes the local geometrical structure in order to solve this problem we have implemented an existing user assisted heuristic algorithm proposed by carrier to denoise and to extract the structural feature from radar data sets this algorithm is highly computational intensive and contains lots of free parameter therefore we have done the parallel implementation of this algorithm to speed up the pre-processing in this work by carrier principal component analysis method is used to detect the feature point based on the local geometry of the points lower qatar dataset contain knows due to instrumental error and that most fear in which the data has been collected principal component analysis technique does not detect the local characteristic of all the feature very accurately in the presence of noise currently we are working on comparison of various feature detection method in point cloud with the help of visualization technique our colleague avijit who is a research scholar and thus on this project he has been working on enabling remote visualization capabilities to the project using thin link architecture he has also worked on integrating a publicly available visualization tool called paraview into this implementation he has been enabling testing various data sets for the integrated implementation and he is currently exploring using fuzzy clustering for de-noising the point clouds hi this is Cheryl this is amit we are M Tech students working at the graphics visualization and computing lab we are collaborating with the NCAA division to have the security incident response team in visualizing the security related network data we are investigating identifying and implementing effective and intuitive multivariate data visualizations for security analytics this ensures that enterprise security incident response teams can not only consume the security and attract result but also enables in making better informed decisions with regard to its correctness and criticality we are working with high dimensional network data and using D 3gs for developing various visualizations some of the visualizations we have done our parallel coordinates sunburst tree maps we have also modeled hierarchical patterns using the click history I'm kripa a postdoctoral researcher in the lab we are working on visualization of small world networks in order to design a good model for preparing similarity matrices for a multi-dimensional multivariate data it is important to understand the distinction of dimensional variable we are working at a conceptual level on incorporating that neurons in our model to generate a viable model to fit into a matrix visualization of a network this involves understanding spectral analysis of graphs hi this is amit again we are working on developing various strategies for utilizing the algorithm for visual assessment of clustering tendency also known as that for sedation of dissimilarity matrices in small road networks we are working on multi-level clustering that will enable various levels of detail for cluster visualization of the network this involves studying various aggregation strategies for building multiple levels of detail hi I am Shin was my idea third semester impact student working in gvl lab we are working on volume visualization of medical imaging data in medical imaging computed tomography and MRI provide three-dimensional volumetric data set of human body which contains object of interest the data gained from CT and MRI however contain many objects of less or no interest this makes volume rendering without pre-processing often impossible or inaccurate furthermore object of interest are hardly located entirely within a single plane one way to display object of interest like tubular structure of diagnostic purpose is to generate longitudinal cross section in order to show a lump wall surrounding tissues in multiple planes the process is called a multiplanar reconstruction mb are we are developing a volume rendering application in mpr mode using vdk hi I'm Savannah a first semester PhD student working on ocean data visualization ocean observation data collected using various domain specific methods tend to be multivariate data in either scattered or created formats but the data sets are so large that it becomes very important to use a proper visualization tool for better understanding as well as for proper prediction of traumatic nature running off the shelf visualization techniques on such data sets usually do not address the standing challenges we are working on data models as well as algorithms of various visualization techniques to solve these problems our current focus is to visualize algo data from the Indian Ocean using vapor which is a visualization and analysis platform for scientific data since vapor was originally developed for w RF data the study right now deals in exploding its capabilities to visualize agro data which consists of variables like temperature salinity ocean currents etcetera the video being played in the background shows the visualization of sea surface temperature changes obtained using vapor gv's here is one of the participating and founding labs in CD s let's the center for data sciences come visit us at CD s dot reply TB dot a seedot n /g vcl thank you 
FfslYMCqeXo,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-09T05:13:29Z,Basic 2D Transformations (CH-10),https://i.ytimg.com/vi/FfslYMCqeXo/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT38M2S,false,71,1,0,0,0,welcome to the epod Sharla lecture series and computer science for postgraduate students so we are learning the course computer graphics and visualization so we have successfully completed four modules in this course and today in this session we are going to look into the fifth module which talks about the basic 2d transformations so let us have a recap of what we have learnt already so we had some introduction some fundamentals some definitions and so on followed by that we have learnt about the output primitives so we started with the basic line so line drawing algorithms like DDA and dressing him then we proceeded further towards circle drawing algorithm and later now we are in this session where we will be learning here today basic 2d transformations okay so in graphics o we have to understand that every object is represented as a graphic any any shape is a graphic as we understood that from the beginning initial sessions so a transformation here is nothing but a change in any attribute of the shape or the object so a transformation is a change in attribute so here attribute here for an object or a shape here means that for example take a line a line has got attributes like its position its length its color its style and so on and so forth so similarly any other object like say take a triangle a triangle has got attributes like say its position its size its may be orientation and so on so what we mean here by transformation is a change in any of the attributes of the shapes or the graphic objects so let us get into the course we will get into the session in detail so today we are here to learn the concepts of concepts on of translation rotation scaling the three fundamental transformations we call these three the translation the rotation and scaling as fundamental so they are very basic and we also will be learning in this session about usage of a new imaginary coordinate system called homogeneous coordinate system are homogeneous coordinates and we will exploit the advantage of this coordinate system our coordinates for simplifying all our operations or all our transformations so let us they look into the 2d geometric transformations so whenever we say it is 2d that means we'll be using only two dimensions so the same thing will be discussed for three dimensions in 3d transformations so with one more dimension added the Z coordinate added to it so fundamentally here in 2d basic geometric transformations we will be talking about the translation the rotation and scaling so I will explain what each of them mean here so translation rotation and scaling are basic the other transformations like you can see that you can see in the slide the other transformations include a reflection shearing and one more common are most general transformation is transformation between coordinate systems so we will learn all these in detail so let us start with how to actually perform a transformation fundamentally the basic ones okay we call the three transformations the translation rotation scaling is basic because these transformations are the building blocks that means for any other transformations like reflection shear transformation between coordinate systems or whatever could be the kind of other complex transformations they can be represented as a combination of these basic transformations that means you can combine these basic transformations in some form to get other advanced transformations so that is why we call these things as basic so let us start with the first basic transformation translation so translation is one of the important transformations are basic transformations which is nothing but change in position okay you can here assume that a transformation can be both for geometric transformation or it can be an attribute transformation that is as I said if it is geometric transformation we deal with size we deal with position we deal with orientation and so on if it is attribute transformation will be changing the say color will be changing its texture will be changing its style and other attributes so attributes and geometry variables are different so you must be able to appreciate that here will be dealing only with geometric transformations so when we look into the first transformation that is translation translation is change in position so assume a point into a point in the 2d space that is imagine P X comma Y is a position is a point so it has to be moved to a new location say P dash X dash to I dashed now how do we represent this transformation so let t be the transformation and we used T to indicate translation okay so from X to X dashed X s mode to X dashed and Y has more - I - that means take the x coordinate it has more tanu push in x dashed and the y coordinate has moved to a new position move I dashed so if you look at the equations here you can simply represent X dashed as x + TX + y dashed as y plus dy so this T X and T way are nothing but the translational distances one along the X direction the other along the Y direction that means from X - if you travel along the x axis by TX units you will reach the x - x - position and from this position if you travel along the y-axis by T Y units you'll be reaching the y dashed position so X Dash and y dash can be represented as X plus 2 x and y plus dy respectively so these are equations in in their equation form so we can write that in a notation form so let P dash to be the point X - 2 y - representing the point X - 3 - let P be the point representing the position X Y and let T be representing the translational distance as T X and T Y respectively so this notation you should remember that it is actually P plus T and addition so the initial position plus some addition so conveniently we can write these equations in matrix representations so for our convenient understanding and representation because when we do our implementation in a program or in say an algorithm representing these equations in matrix form are more convenient for programmers so every equation that we get in graphics will be converted in this particular topic like 2d transformations will be converted into a matrix equivalent and then we'll be performing operations on matrices so let us see how the matrix representation of translation is given so it is a 2 by 1 matrix X dash y dash is equal to x and y is the P matrix plus the T matrix T X T Y so it is a 2 by 1 2 by 1 matrix for the X - where - it's a 2 by 1 matrix for PYP and 2 by 1 for T so we'll be doing this thing similarly for the other transformations like rotation and scaling so let us look into what what is rotation and how do we perform rotation transformation see as I said a transformation is a change in attributes are in change in some geometric attributes of the shape so as I said as we just understood that translation is change in position and here rotation is the next transformation which is nothing but change in orientation so what is change in orientation orientation is say u-turn you you use tilt you orient yourself with respect to a given fixed position so how do you orient yourself is orientation so let us look into the scenario here let this be the coordinate system XY represented with XY and let P be the position which is P X comma Y is a is the position initial position now this has to be rotated about origin this point P X comma Y has to be rotated about origin so that it has now moved to another position say P dashed X dashed by dashed so our aim is to now find out what are the coordinates X Dash and y dash in terms of X Y and some more other parameters and let us see the other parameters in this scenario connect the origin with the point so we call this with a straight line we call this the radius vector connect the origin with the position P X comma Y we call this the radius vector R you can give the length as R ok so obviously when we are performing rotation R is going to be constant so for whatever be the new position R is going to be constant because it is simply rotation so let the line connecting the origin and the new position P dashed be the same line otherwise the same radius R is exactly of same length R ok this line is actually any line in connecting any point in space any line origin that starts from origin and connects the point in the 2d space is actually called the position vector of that point so any point in space when connected with a straight line from the origin is called the position vector of that point ok so let this line be the position vector the point let Opie so maybe origin and P is the position vector of the point P and the line connecting the origin and the p dashed is called position vector of the point P dashed ok so for our further equations and derivations let us assume that the position vector of the point P makes an angle Phi with x-axis and let the position vector of the point P dashed makes an angle Phi plus theta with x-axis so I am again repeating this let the position vector of the point P make an angle Phi with x-axis and the position vector of the point P dashed makes an angle Phi plus theta with x-axis so our interest is in the angle theta that is theta is the angle of rotation so theta is the angle of rotation from p to p dashed is what we are moving so let us see how the derivation proceeds and for the position vector of the point P dashed and the x-axis so you can take the cosine of the angle Phi so you can take cos of Phi cos of Phi cos Phi is equal to edges inside by hypotenuse so cos Phi is nothing but X by R cos Phi is nothing but x by r for the position vector of the point P so X is equal to R cos Phi similarly take sine of the angle Phi for the position vector of the point P so sine Phi is equal to y by r so y is equal to R sine Phi now we have got these two equations keep them aside now let the position vector the point P so as we understood that the position vector the point P dashed makes an angle Phi plus theta with x-axis so it makes an angle Phi plus theta with x-axis so for the Phi plus theta angle that is for the position with our P dashed take the cosine of the angle so cos of Phi plus theta cos of Phi plus theta is equal to X dashed by R so as we did similarly for the previous position vector so it is Phi plus theta is the angle that's the change so let cos of Phi plus theta is equal to X dashed by R so X dashed is equal to R cos Phi plus theta similarly y dashed is equal to R sine Phi plus theta so if you expand as a cause of a plus B and similarly sine of a plus B so you get the equations expanded like this X dashed is equal to R cos Phi cos theta minus R sine Phi sine theta dy dashed is equal to R cos Phi sine theta plus R sine Phi cos theta so because sine of a plus B sine here cos P plus cos a sine B ok so what is that we are doing is now this R cos Phi in the equation is actually computed previously as X and R sine Phi is computed as Y so replace R cos Phi with X and R sine Phi with Y in the equations so what do you get finally is X dashed is equal to X cos theta minus y sine theta and y dash is equal to X sine theta plus y cos theta these are the two important final equations which you will have to remember so as we as I just mentioned will be representing all equations as matrix equivalents because of programming simplicity or we can use them in programs than to use equations so it will be easier to do matrix operations so let us rewrite these equations in their matrix equivalent form so you can easily like take this conversion from Equation two matrix form X - 2 I dashed is equal to cos theta minus sine theta sine theta cos theta and XY so this matrix cos theta minus sin theta sin theta cos theta is called the rotation matrix and theta is the angle of rotation that's important so theta is the angle of rotation Phi is eliminated in the equations so theta is the important angle of rotation so notation if you write a notation representation for this it gives us P dashed is equal to R of theta into P there is a multiplication that is what you should notice P dashed is equal to R of theta into P in the case of previous transformation that is translation there was addition okay know as we know from conventions that rotation in counter clockwise directions are positive and rotations in clockwise directions are considered negative so whenever you have to perform negative rotation so that is clockwise rotations you change the theta 2 minus theta ok so that's how other conventions are let us move to the third basic transformation the scaling ok as translation is change in position rotation is change in orientation and scaling is change in size okay here scaling change in size here means it can be up scaling or it can be down scaling that means it can be increased in size or it can be decrease in size so scaling is one of the one is a peculiar transformation where it involves both a change in size as well as change in position so you can you will observe that maybe from the equations you'll be able to appreciate that scaling involves inherently two transformations one is change in size the other one is change in position so as you see here in the in the diagram there imagine you have an initial position say P X comma Y okay the blue-colored position a blue circle it's a blue filled circle circle filled in blue and the circle filled in red is the new position okay let this be the initial and this be the new position imagine a shape okay for scaling you cannot just assume a point because point scaling a point is meaningless isn't it for scaling you have to imagine a shape or an area okay so then you can appreciate that okay something is increasing in size that it's size is increasing or decreasing so for that sake we have chosen here a rectangle shape and the position is P X comma Y now imagine this rectangle it has to be scaled now if you look at the equations here it is simply scaling simply is multiplication scaling simply is multiplication that means imagine you are holding a shape okay if if you want to upscale it that that is if you want to increase the size what is that you would do you can stretch the object or the shape along X direction and you can also hold the shape and stretch it along y direction the whole object gets scaled so if you want to squeeze the object that is scaled down the object what is that you do is squeeze it along X direction and squeeze it along y direction so on both directions if you squeeze it the objects become the object or the shape becomes smaller in size so that's the effect of scaling so that means we will be increasing the size along X direction and increasing the size along y direction on a whole the object size increases so it is basically multiplication so as you see here in the equations X dashed is equal to X multiplied with sx y dashed is equal to Y multiplied with s Y where SX and sy are scaling factors along the X and y directions respectively these are constant numbers so the higher the values of SX and sy the higher is the scaling so if the scaling factors are generally it is 1 is the default size or the default scaling factor is if you substitute s X is equal to X Y is equal to 1 what happens is we call that no scaling ok we because X dashed is X Y dashed is why there is no scaling ok if the value of scale factors is beyond one that is maybe higher values or lower values how it leads to a scale up or scale down respectively okay so as you see here this is the initial rectangle when it is scaled up the new rectangle like that is the scaled rectangle has gone to this position it has become bigger in size and and has also moved to a new position that's what you should observe so it has become bigger in size not only it has become bigger in size but also has moved to a new position but when you scale it down what happened is the size has reduced the size of the object is now reduced but and now it has moved to a new position which is towards origin that is what you should observe the scaled up object has moved away from origin the scaled down object has moved close towards origin so that means as you reduce the scaling factors by say lesser than one and say point five point two what happens is when you multiply X with zero and Y with zero so assume scaling factors are zero zero what happens X dashed is equal to zero Y dashed is equal to zero that means the object is not there it is just annul so it is at origin so these equations are represented in their matrix equivalent form as you can see on the matrix equivalent representation X dash y dash is equal to SX 0 0 sy into X Y so the notation you can represent this in notation equivalent because for simplicity for for making this more what is called a representation better representation you can use this notation P dashed is equal to Y s where s is the scaling matrix SX 0 0 s where it's a two-by-two scaling matrix the SX and sy are the nonzero values and P is the point so the scaling matrix is now multiplied with the position so in translation we have got an addition in we have got a multiplication of the rotation matrix with the point and in the scaling transformation we got the scaling matrix multiplied with the point so let us see how the scaling factors affect the shape of the object when SX is equal to X Y is equal to one it is no scaling as I said when the scaling factors are 1 there is no scaling so the object remains as it is when SX is equal to s why it is called uniform scaling as X not equal to X Y non-uniform scaling and when the values of both SX and sy are greater than 1 it leads to a scaled up object or a increased size of the object of a bigger size and SX sy less than 1 it is called down scaling ok let us have a glance at all the three transformations the basic ones and at a glance if you see all the three you would notice that there is M an addition for translation in the notation you can see in the notation there is an addition for translation T's the translation matrix there is a multiplication for the rotation transformation there is a multiplication for the scaling transformation as well in the when you summarize all the three basic or basic transformations so now the important point to observe is all these transformations are the basic ones are assumed to be performed with respect to origin that means origin is is our reference point with respect to which we did everything so for example take a rotation we have performed rotation of some position P with respect to origin and so we have moved to a new position P dashed that means we are rotating about origin ok so imagine if you have to rotate or if you have to perform rotation about some other point in space or some other object in space or some other location in space what would happen to these equations so how the equations are different in that case so for the time being let us assume that if we perform the transformations like rotation and scaling in particular with respect to any other point in space other than origin so again let me repeat that if we have to perform the transformations like scaling rotation now not with respect to origin but with respect to some other fixed point in space are some other pivot point in space what happens actually to this equation sees we will do the derivation later for the time being just assume that we will get an extra matrix so this question mark in the towards the right of the matrices there are two elements there is an addition there is a 2 by 1 matrix whose values are to be whose elements are to be derived so here for the scaling matrix also there is one addition of another matrix of size two by one whose elements are to be derived later so for the time being you assume that an additional matrix will be there when we perform scaling or rotation with respect to some other point in space other than origin so now the notations you can look at the notations P dashed is equal to P plus T is the translation matrix and it is an addition simple addition but for rotation we get an additional matrix let us call that M R M R indicates an additional matrix of size two by one when we perform rotation with respect to any other fixed point any other pivot point similarly for the scaling transformation we get an additional matrix M yes which is a 2 by 1 matrix at two rows and one column whose elements are to be derived and we will when we derive that we will know what the elements are so now we will be converting all the three that is if you look at all the three there is a pattern that we can evolve from all the three basic transformations what is that pattern so let us see this pattern the first translation P dashed is equal to you can write it P plus T as I into P plus T where I is the identity matrix of size two by one so it won't be changing any any values there so we can conveniently put this P as I into P plus T so there is one matrix multiplication and one addition for rotation there is already one rotation matrix R of theta into P and plus mr for scaling P dashed is equal to s into P plus M s so in all the three we have brought all the three into one into one common format or in going to one common form one multiplication and one addition one multiplication and one addition so what is its what is the advantage of representing these in one common notation or form what happens actually is if you do a series of transformations like for example in animations in cartoons in what is called whatever you see in animation movies what actually happens is a series of transformations are performed in succession that means if you if you imagine a Tom & Jerry like cartoon I have imagined maybe they don't all duck maybe the Kung Fu Panda whatever the animation movies that involve lot of changes lot many changes in a short name happen so for example there is a translation the characters like safe take for example the term injury case Tom runs quicker there is a translation take for example the popular animation shows like Tom and Jerry like maybe many other cartoons that you see on television so the animation involves too many changes in a short time that means if you look at Tom and Jerry like in the cartoon what happens is always tom is behind the jury so Tom moves at a faster pace at a quick now it suddenly changes its position it changes its size for example when quickly proceeds to grab the jury the jury suddenly escapes and it hits a big wall like object let us assume and its shape gets deformed and again it's again it retains its shape back in just no time and again it starts running so see imagine so many changes happen in a short time in a quick succession so change in shape change in size change in orientation it turns twists it bends so so many things happen in succession so when more than one transformation is performed on the same object in succession what happens is when we use these representations like say one multiplication one addition one multiplication one addition let us see what happens in the case of an example when you have to perform a translation a rotation a scaling and a translation in succession imagine you have to perform a translation a rotation is scaling and a translation there are four transformations to be performed in succession on the same object so first you perform the translation what happens is you use you will be using the matrix identity into P the P is the initial coordinates you have got one matrix multiplication then store the results somewhere and then add it to the translation matrix so P there is a multiplication and one addition so you did these many things multiplication addition so two matrix operations and then store the results somewhere in the P dashed and then use that as input for the next transformation that is rotation and multiply that with the initial coordinates and add that extra matrix and then store the result so again there is one multiplication one addition as you remember that in the equations that we have seen in the previous slide there is one multiplication one addition and then store the result an intermediate result in some other variable and then use that result again for the next transformation as input and then multiply and add another matrix so if you have to do all this for four transformations like translation rotation failing transformation you will be doing eight matrix operations and over that and above that you will be actually storing the intermediate result also so you will be storing the intermediate result and as well you will be doing eight matrix operations for multiplications and for additions so imagine so much you will have to do so if you have to be more quicker in the operations you cannot you will not be doing this because in general in a typical animation there are too many operations that that are performed in succession so we cannot effort to go with these kinds of equations so we will have to devise a new way to actually reduce the number of matrix operations there by our time and what is called the speed we get more speed and the the the time in which the operations are performed is much more it is it gives a better result in a short time so what actually happens is we will be introducing a we will be introducing a new coordinate system called the homogeneous coordinate system are we can call them as homogeneous coordinates it's an imaginary coordinate system so our general 2d coordinate system is called Cartesian coordinate system so we are now looking for an imaginary three dimensional coordinate system called homogeneous coordinate system and the coordinates are now called as homogeneous coordinates and now all our transformations will be representing them in homogeneous as homogeneous transformation matrices so what is the what is the advantage of using this homogeneous coordinates is we will see that in the next slide but here let us see how do we represent how do we convert between Cartesian coordinate system and homogeneous coordinate system so a Cartesian coordinate system has got two coordinates x and y homogeneous coordinate system is as I said it is an imaginary three dimensional coordinate system which has got coordinates X H Y H and H so where X H is the x score the homogeneous coordinate system why hich y coordinate or the homogeneous coordinate system and H is the homogeneous coordinate now how do we perform conversion between Cartesian and homogeneous and vice-versa so how is that done is so see the equations here X is equal to X in Cartesian is equal to X in homogeneous and divided by the homogeneous coordinate and Y is equal to Y H by H so now when hich is chosen as one when this homogeneous coordinate is chosen as one homogeneous coordinate is something like it is an imaginary dimension as I said it is a number you can choose any number any real number for that sake if we choose H to be one then X is XH Y is y H so X becomes equal to X H Y becomes Y H so if you see this conversion now the x and y of the cartesian coordinate system when they are converted to homogeneous coordinate system they become XY and an additional one ok now what is the advantage of converting cartesian from coordinates from cartesian coordinate system to homogeneous coordinates is the advantages as you can see here in the slide we when we perform when we do the conversions you will know we will appreciate that better so let us see the advantages of homogeneous coordinate system whenever you have a complex problem to solve the general idea is to convert the current data in the car data into some other domain and then perform all our calculations in that domain R in that system and then get back to the original system are the original domain that's the general way two most common way to solve complex problems again let me repeat whenever we have a complex problem to solve we go into a different domain altogether where data is represented in a much simpler manner and operations are also are much simpler so we perform all our operations in that domain and again take a result back into the original domain it is similar to converting data from time domain to frequency domain and frequency domain to time domain and so on so whenever we have to perform complex operations we go for it we go into a different domain which simplifies all the operations okay so the advantage of using homogenous coordinates is these will be evident by when we solve some problems but for the time being you just take this that is given the initial coordinates straight away we get the final chord that means imagine a series of transformations like translation rotation scaling translation are performed in succession so if you give the input coordinates straight away get the final coordinates you don't have to store them store the intermediate result or you don't have to perform multiplication addition and it is just simply multiplication okay that is the first statement a series of transformations can be represented as matrix multiplications so T are s T if you have to perform you just multiply them T into R into s into T so it is as simple as that in homogeneous system and given the initial coordinates get straight away the final coordinates by compositing these series of transformations and finally the number of matrix operations are reduced to just exactly half so it is just multiplication and no additions so storage of intermediate results is also not required so these are the many advantages due to which we represent all our data in homogeneous coordinate system so we will maybe do this in the next session we will try to say how the homogeneous coordinate system helps to simplify our matrix operations and representation of data so from Cartesian to homogeneous how to represent transformations we will take it up in the next session so what we have learnt in this session is the fundamental transformations like geometric transformations I mean so translation rotation and scaling translation is change in position rotation is change in orientation and scaling is change in size and also we have seen a bit and oh how to convert Cartesian coordinates into homogeneous coordinates and what is what are the advantages of this representation ten homogeneous coordinates so thank you 
UfCBJLoMU7I,28,"KIVI Chair - Big Data Science Master Class:  Computer Graphics and Visualization

Introduction by prof.dr. Elmar Eisemann.

We will give insights into methods to efficiently perform image synthesis, exceeding the boundaries of current rendering techniques. Important aspects are the trade-off between performance and visual fidelity, as well as scalability to large-scale data sets. Furthermore, we will  show that a deeper understanding of the human visual system can be crucial in the development of rendering solutions for modern display devices.

https://www.kivi.nl/activiteiten/activiteit/kivi-chair-big-data-science-master-class",2016-09-22T14:22:13Z,Computer Graphics and Visualization,https://i.ytimg.com/vi/UfCBJLoMU7I/hqdefault.jpg,Koninklijk Instituut Van Ingenieurs,PT1M,false,777,2,1,0,0,hello my name is Eliza Minh I hope that you will join us for the Kiwi big data science master classes my background lies in computer graphics which aims at methods to develop very fast and efficient display of large-scale data sets these data sets sets can be varied it originates ranging from point clouds over meshes to even volume representations the representation on the screen in the end can sometimes be informative or realistic depending on the task at hand in this way is important for very different domains such as simulation purposes medical domains architecture Geoscience engine and also interesting is that there are many aspects that come into play there to have a good understanding of human perception or to make the best illustration possible and to also also support tasks such as visual data analysis I hope that I can welcome you to master class very deeply more insights will push your work 
vPHrYKTakbM,22,"Subject: Computer Science
Paper: Computer graphics and visualization",2021-03-30T05:46:54Z,3D Transformations,https://i.ytimg.com/vi/vPHrYKTakbM/hqdefault.jpg,e-PG Pathshala,PT25M54S,false,23,1,0,0,0,[Music] welcome to the e part shella lecture series on computer science this is the 14th module of the course computer graphics and visualization so we have had last 13 sessions in the past in the previous session we have learned how 3d objects are represented and in this session we are going to look at 3d transformations as the topic okay let us proceed uh with the content of the today's module uh these are the people who have contributed to this course and let us look into what we are going to see today in this session our aim our objectives are to understand the 3d transformations which include translations rotation scaling shear and reflection the other transformations like transformation between coordinate systems also will be learnt in this session so let us look at each of these in detail so in this the first and the foremost thing that you should learn is the convention so what are the conventions in computer graphics as far as 3d graphics is concerned so imagine we are in a 3d world so like we need to understand some conventions or fundamentals which are fundamental to understanding how things happen in the 3d world let us take say a coordinate system in 3d world so as we know a coordinate system in 3d world is made up of three coordinate directions or three mutually perpendicular directions which are the x y and z now we know that we have we can imagine the coordinate system at various positions at various in various orientations and so on so for this we need to know some conventions so let us imagine or let us consider our right hand okay so take our right hand open that is the three mutually perpendicular directions and how do we get as convention from the right hand is take the first three fingers of your right hand the thumb the index finger and the middle finger now let the middle finger point towards you the self okay let the index finger point upwards let the thumb point in the right hand direction that is right side because this is the right hand the thumb points the right side the index finger points upwards and the middle finger points the self so these three directions are considered as the positive x y and z directions respectively that is the thumb points the positive x direction the index finger points the positive y direction and the middle finger points the positive z direction so the opposite of this that means it is important that you should understand that we are seeing into the world along the negative z direction an important observation is that because the index the middle finger is pointing towards the self which is the positive z direction and we are looking into the world along the negative z direction so that's the convention that you should remember always we look into the 3d world in the negative direction so if you take your left hand for that sake you can formulate similar coordinate system which is something like this okay so here for our understanding it is enough that we consider one convention which is say the right handed coordinate system so the difference here is that in 2d and 3d in 2d we do not need to consider such conventions but in 3d we need to consider such important conventions so the transformations in 3d are which are fundamentally object transformations which are extensions of transformations in 2d let us start with the first and the foremost transformation in 3d which is translation as we know translation rotation and scaling are three fundamental transformations followed by that we have the other transformations like reflection and shear so let us start with the very first transformation in 3d which is translation translation is simply change in position as we know from the 2d transformations and we have got an extra coordinate direction and an axis extra axis here so we need to add for the matrices an extra row and column so thereby we have we see all the matrices that we see for the transformations are all four by four matrices because of the homogeneous coordinate system inclusion of the homogeneous coordinate system we have four by four matrices for any transformation in 3d okay so if you start with translation translation is change in position of an object so take an object in 3d and move it to another position so it is translation so it is a simple extension of 2d translation with an addition of one more direction which is the z direction so the equations are very much evident as you can see x dashed is given by x plus t x x dash is the new x position y dash is the new y position and z dash to the new z coordinate or the z position and t x t y t z are the translational distances along x direction along y direction and along z direction or how much you move along each of these directions are the t x t y t z so that's where the matrix is also you can easily formulate as you can see there x dash y dash z dash 1 is equal to 1 0 0 t x 0 1 0 t y 0 0 1 t z and the last row happens to be the 0 0 0 1 for the homogeneous coordinates so multiplied with the initial position x y z and 1. so that's a simple extension of a 2d translation but rotation in 3d is much more complex than rotation in 2d if you look at 3d rotation it involves rotations are understood to be done about standard coordinate directions initially so for example say for rotation we would require an axis of rotation okay in 2d if you correlate that with 2d fine try to always like link your thing with 2d whenever we are discussing something about 3d you can link that with 2d as well in 2d for rotation we require a single point of rotation or maybe a position for rotation which is called the pivot point but in 3d we would require an axis of rotation that means an object is considered to be rotating about an axis an axis here is any infinitely extended line for our initial level of understanding the axis that we would consider are the three coordinate directions of the three standard axis the x y and z respectively so a rotation about x axis so rotation about y axis and rotation about z axis so if you see the names given in the technical names for rotation about x axis is pitch rotation about y axis is yaw and rotation about z-axis is a roll now which rotation is considered positive which rotation is considered negative as you can recollect the discussion on 2-d rotation you have a rotation with respect to that is rotation with respect to any point in space and in the anti-clockwise direction is considered positive any rotation which is considered in anticlockwise direction about a pure point in two d is considered as positive but now how do we consider positive rotation in three d okay so for that again there are conventions the conventions again which are shown here ah the conventions are such that when you are standing uh and watching the object getting rotated in anti-clockwise direction about an axis and you are actually looking along the negative direction of that particular axis and that is the positive rotation again let me repeat this you imagine you are standing and you are along a particular axis imagine you are along a particular axis so you are on some axis say x y or z okay if now you imagine that you are standing on the axis and viewing the axis along the negative direction that is your view is along the negative direction of that axis that means if you are standing on x axis you are actually looking at the negative x axis the direction of look view is the negative x-axis and consider an object being rotated about the axis in anti-clockwise order consider the rotation about the axis when you are viewing the negative direction of the axis and in the anti-clockwise direction so that is considered as positive rotation so similarly if you have to consider positive rotation about y axis imagine you are standing on y axis and you are looking at the negative y direction and now the anticlockwise rotation about the axis is considered positive so otherwise the clockwise rotation is obviously the negative rotation so these are the important conventions and the z is just as similar to any other axis first we will understand how the z-axis rotation is done so z-axis rotation is imagine you have an axis passing through origin and is perpendicular to uh the coordinate system so that's what we know as imagine you have a plane like object plane like thing and your z direction is actually the direction that is perpendicular and is passing through the origin of the coordinate system now it is exactly similar to that is the rotation in 2d it is the 3d rotation about z-axis is exactly similar to rotation in 2d with respect to origin now let me relate these two again let me repeat this z-axis rotation in 3d is exactly similar to rotation in 2d about origin how it is now the z-axis rotation is what that is rotation about z-axis now how do we do this that is what is positive rotation there it is nothing but when you are seeing along the negatives or direction that means you can imagine again the three mutually perpendicular directions the x positive x positive y and positive z for the right handed coordinate system and now you are viewing along the negative z direction now imagine this rotation that is an anti-clockwise rotation is considered positive so if you look at the equations there the z coordinate has not undergone any change x dash is equal to x cos theta minus y sin theta same equation for 2d which we saw uh the same equation the same equation exactly and y dashed is equal to x sine theta plus y cos theta and z dash t z now what has happened to z coordinate when rotation about z axis is being performed now the question is what happened to the z coordinate uh when the rotation is being performed about z axis and is positive is that is no change in the z value but the x and the y values have changed so that is whenever we perform rotation about a particular axis say assume now x axis okay when you are rotating about x axis the y and the z will change but the x will remain constant when you are rotating about y axis the x and z will be changing while the y remains constant so these equations now there are three and the corresponding transformation matrix in four by four form is given there which is the homogeneous transformation matrix cos theta minus sine theta 0 0 sine theta cos theta 0 0 and 0 0 1 0 and 0 0 0 1 is the matrix ok so it is shown there i think in a diagram as you can see there in a diagram which shows what is positive so when you are viewing along the negative z direction the anticlockwise rotation about that axis is positive which is indicated with the matrix which is indicated with the notation r rotation z z axis theta is the angle of rotation now to get to derive matrices are equations for rotations about other two directions like other two axis say x and y you don't have to really derive equations but rather with a thumb rule you can simply formulate the matrices or the rotation transformation matrices for rotations about the remaining two axis the x and the y how can we do that is with a simple thumb rule as you can see there x 2 y y to z and z to x so this thumb rule you remember x to y y to z z to x that means you take the first set of equations for rotation about z-axis okay and in those equations you replace x with y y with z and z with x in the equation set of equations you will automatically obtain rotations about the other axis how that is is you can watch this here and x dash is equal to x cos theta minus y sin theta y dashed is equal to x sine theta plus y cos theta and z dashed is equal to z so these three equations are what are rotation about z axis now how do we get the rotations about x axis and y axis is simply wherever there is x in this equation of first set of equations take the uh replace them with y y with z and z with x so now first equation becomes y dash is equal to y cos theta minus z sin theta which is there in the second equation the second diagram z dash is equal to y sine theta plus z cos theta which is the replacing y with z with x x with y that's the thumb rule and finally for z dash is equal to z z to be replaced with x so x dash is equal to x so when x dash is equal to x that means there is no change in the x values it is understood that the rotation is performed about x axis so for that you can easily formulate a matrix when you write x y and z that is x dash y dash and z dashed in that order now rotations about y axis similarly can be formulated can be ah transformation matrix can be easily obtained by rewriting these equations for x axis rotation and using the thumb rule that is replace x with y y with z z with x and so that's how you get the third set of equations which is which are rotations about y axis now the two matrices are given they are easily like you can formulate and write the equations in the order x dash y dash and z dashed so that you can formulate the homogeneous transformation matrices observe the notation used r suffix x of theta okay is the x axis rotation r suffix y of theta gives the y axis rotation and the diagrams are self explanatory you can just have a look at them you will understand better so if we require to perform an a rotation in 3d what is that we assumed is we require an axis of rotation and an angle of rotation now the axis of rotation here if we imagine that to be any general line or direction in space we can imagine okay any line in space can be an axis for rotation so that need not be the coordinate directions x y and z it can be any imaginary direction in space so let us assume a scenario where we need to perform rotation about say an axis which is parallel to x-axis as shown in the first diagram there okay that you're seeing rotation about an axis which is parallel to x-axis now what is the extra step required so what is that how the matrix transformation matrix would be again that would be a composite matrix as we as you can remember from the discussions in 2d transformations we had composite transformations now similarly what is that we are going to do here is we are going to take the rotation axis that is imagine any directions here our axis of rotation is a line parallel to x axis now what is the first step our aim is to actually bring this axis on to any of the unknown directions and apply the rotations with respect to those known directions and then put the axis back at their original position that's the usual procedure so let us translate the axis which is the rotation axis onto either of the known axis like x y z for convenience we can simply translate that axis to onto x axis so that it coincides with x axis now perform a rotation with respect to x axis and now translate the axis back to its original position so that is a composite transformation and you can see the equations p dashed is equal to i can come in the reverse order always a translation a rotation about x axis and a translation inverse so that completes translation here so you can read the steps here so in general if you have to perform rotation about any general direction in space so now we have gone to a more complex scenario that is the rotation axis is no more a coordinate axis or is neither aligned parallel to the coordinate axis it is some randomly oriented line in space now how do we perform rotation of objects about that kind of axis so we need to perform uh so many steps as you can see from here what is that we are doing is imagine an axis of rotation is given there shown in the red dotted line and that is a randomly oriented axis now about which we need to know rotate objects so now what would be the rotation matrix for such a kind of complex scenario now in this scenario imagine two points on this randomly oriented axis in space which are say p one p two so p one p two are two points identified on the line now perform a translation such that p one is brought on to the origin so that means we are basically translating the line such that the line now passes through origin that is the rotation axis that is randomly oriented initially now passes through origin what is the next step the next step is perform a rotation about x axis first again let me repeat this first you do a translation so that the line now passes through origin line passing through origin does mean that a point on the line that we have considered is to be translated so that the line automatically passes through the origin ah now that becomes now p one dash p two dash are the two points now perform a rotation of this ah randomly random axis about x axis till the time that the line now lie now is in the plane x z so that means you do a rotation of this line about x axis till the point it is uh a part of our it falls into the x z plane okay so that is the important step here so by what angle you should rotate is again a lot of mathematical derivation that goes there so imagine for the time being you need to rotate that first about x axis so that the line now falls into the x z plane now perform a rotation about y axis now such that the line in the x z plane is now rotated till the point that it aligns with the z direction always our aim is to align anything any randomly oriented line with the z direction okay now the second rotation is with respect to y axis and you align that with the z direction by some angle by if you rotate by some angle so the next step is to perform rotation about z axis the standard rotation about z axis which is r z of theta the standard rotation matrix is x dash is equal to x cos theta minus y sin theta y dash is equal to x sin theta plus y cos theta and z dashed is equal to z are the set of equations that you can consider the matrix for that you can assume now after this rotation is done simply go in the reverse order so first do a rotation about y axis in the ah reverse ah by the reverse angle that is the opposite angle for the angle that you rotated next do a rotation about x axis in the opposite angle and do a translation so the steps are complete so the matrix the final composite matrix for the rotation about any general arbitrarily oriented line are randomly oriented line in space is the matrix t inverse r x inverse r y inverse r z r y r x and t when you combine all these what you get is the composite matrix the 3d scaling involves just an extension of 2d scaling an additional third coordinate or third scaling factor along the z direction which is s z and the rest is all the similar thing and reflection in 3d is exactly similar to the reflection n2d but here what is happening is a reflection in 2d was being performed with respect to lines now in 3d reflection will be performed with respect to planes reflection in 2d was being performed with respect to lines and reflection in 3d will be performed with respect to planes so reflection with respect to x z plane reflection with respect to x y plane the reflection with respect to y z plane and so on so now ah the matrix that you can see for reflection with respect to x y plane what is happening imagine an object here and this is the x y plane ok imagine an object here and this is the xy plane ok this is the xy plane and this is the negative side of the plane that is the negative direction now this object has to be reflected and so that it is here now okay this is the plane this is the object and this object is now here after reflection so what is happening to the object is its x coordinate is not getting changed its y coordinate is not getting changed its z coordinate is getting it's in the negative side now so that is why the matrix has got a minus 1 in the third row and the third column a position where it is it is called z is equal to z x y is equal to zero is nothing but this is z is equal to zero plane we call the xy plane as the z is equal to zero plane okay so the z coordinates alone become negative so shear in three d is an extension of shear in two d where we have got the coefficients a and b as extra coefficients and that this is the extension of 2d where b is the additional coefficient and it is shear with respect to the z is equal to 0 plane r here we consider not axis but the planes here for shear so with this we come to the end of this module here the summary is that that is what we have learnt here is that what are the conventions for a coordinate system in 3d the right handed chord convention right handed coordinate system you can imagine rotations in 3d are the complex things then and the other rest of the transformations are exactly extensions of that in 2d so this is what we have learnt here and reflection and shear are other transformations which are simple extensions of 2d transformations instead we consider that is called planes then access for reflection and shear the source for this book is the hanon baker computer graphics with opengl is the source for the book for the module okay thank you for being with the session 
XyMsUCMkB7g,22,Computer Graphics and Visualization as VTU Syllabus,2020-04-18T15:49:13Z,Module-4:3D Viewing Part-1: Parallel Projection Transformations by Prof.R.R.Patil,https://i.ytimg.com/vi/XyMsUCMkB7g/hqdefault.jpg,Ravindra Patil,PT45M57S,false,20,1,0,0,0,welcome back to computer graphics and visualization subject today I will discuss module 4 in the last class we have discussed a model for that is 3d waving right today also I will continue with this model that is 3d viewing in last class we are discussing how to prepare how to set our camera means frame using coordinate frame we are set in last class last photo that is Ministry of Saturday all the camera properties we have said to the camera then that is P viewing position then afterwards we have set the viewing direction that is the normal the viewing direction that is you plane normal then view up Vector then from that we have derived right hand coordinate system that is cross product of n then we we got X that way means we have set all camera equations that's now we are in after doing that operation now we're in word coordinate right means we have modern coordinate toward coordinate we are transferred in last video that means we are giving you basically we are given input in word model coordinate then our model coordinates we applied to we are given input to world coordinate system then word coordinate system has given you coordinates in one coordinate now in today we are discussing now already we have points in word coordinate those points we have to convert to in coordinates transformation from word quartet to viewing coordinate we have to do that concept we are discussing today's write in the three dimensional viewing pipeline the first step of racine has been constructed means in previously we have constructed the scene thank to your concept at the scene we have assumed be the point viewing point then surface normal we walk direction then the X all those things then write and write in for the system we have derived in previous lick thing after constructing a scene used to transfer object description to the viewing coordinate reference frame now we have to convert here even Quadrant reference but now we have to convert the word coordinator to you in Quadrant reference plane this conversion of object description is equivalent to the sequence of transformations that superimpose the moving reference frame into the world it means nothing but what we in coordinate is somewhere here one quadrant is somewhere normally word X what coordinate X is different what coordinate Y what coordinate are different then our moving coordinate X Direction moving coordinate y direction moving quadrant direction may be different type technique normally in dream developments we may rotate a camera like anything then we K we may capture images that's why we encode normally we in coordinate reference frame and Wolcott interruptus frame not similar definitely was they are different now what our intention is to map our viewing coordinate reference beam toward quadrat reference frame means viewing coordinate x axis has to align with what coordinate x axis being pertinent y axis has to align with your coordinate y axis then being coordinates and XS has to align with what coordinate axis that is our intention we have to do here right there is word frame we can accomplish this conversion using the methods for transformation between coordinate system then we can accomplish this there is a method accomplish this transformation from between coordinate systems let who will do normally right first step in this is translate the viewing coordinate origin to the origin of the world coordinate system means whatever P we have derived in the last video whatever P we have mentioned that is a camera that III position our camera eye position our camera that took P we have to translate in such a way that it must align with the word coordinate origin word coordinate or image translate that P P naught P naught whatever we are in in last slide we do we are taken P naught P naught in such a way that that must align or quad netizen right then apply rotation to align the x view why you judge you in such a way that he X view must align with exw word coordinate Y you must with YW y coordinate jadoo you must along with a double jerkwater the XS respectively that we have seen in this image right originally that XV y we said we are somewhere here then the XW YW jet the blue regime is different and that we accorded tourism is different that what we are done that we are translated such a way that that origin of X V Y we said we has aligned with the XW YW w region that has aligned then afterwards we have rotated the X we in such a way that x-ray astronomy takes W then afterwards I rotated to Y V such in such a way that Y we are aligned with Y W then afterwards I rotated said to be such a way that I be a stopper I'm flying which article right that we are written in right side right our X rotation of our X rotation of our Y rotation our project in a such a way that on 3ds viewing coordinate system must align with world coordinate system that is what means general matrix means in general word coordinate to viewing coordinate or coordinate yeah Michael toward coordinate to view coordinate ly equal to translate in coordinate origin in such way that what it must align with the world project we origin then rotate about our z RX that is a not object the effectual that is our x then rotate about our Y then rotate about our jet after doing this one definitely were viewing coordinate system being coordinate reference frame will align with our coordinate reference frame this is what happens right then how to do this right the viewing coordinate origin is at word position as a Sao as well as in previous videos it is at P not normal equal to X naught Y naught the set not right the viewing coordinate origin is at a world position means here toward question somewhere here let's somewhere here that origin of that we have taken is P not equal to X naught Y naught Z naught then that you have to translate this translation matrix in homogeneous coordinate system means minus X naught in X Direction minus y naught in y direction - yet not even a directional material comes and align is toward coordinate ocean right this is the topless in matrix then for the rotation transformation we can use the unit vectors like in previous slide are you crazy - how I used you need to oppress I can use because I know that you use nothing but you use anything but up vector U is nothing but after after he can take X axis V is nothing but ax means the name whatever you want means if you t if you are taking user factor then V is X then Y n is normal surface normal any surface normal from the composite rotation matrix that superimposes the viewing access into the word free means to rotate we have instead of taking angle we were taking a vectors we're taking a curves by taking those vectors then the rotation matrix is Nativity x UI user then V X V Y V J means you use the x axis V is y axis n is JD axis right this is what we have taken in previous video like that we are here we are taken then where the elements of matrix R are the components of the en u ax vectors in previously in crius video we have derived this one right then the coordinate transformation matrix is then obtained as the product of the preceding translation and rotation matrix then if you multiply translation rotation matrix then you will get this has the matrix that is VX v r UI UJ minus u dot product P not minus V dot product P not minus m dot product penetrate this is what translation factor in this matrix are calculated as translation factor in this matrix of Calcutta there the vector dot product of each of the U V and the N unit vectors with P not you know to appreciably not that P not how you derive P not which represents a vector from the word origin to the wave origin means P not has a vector from word origin to the viewing origin that we have derived in last class that is a unique reference translation unit vectors for Calcutta that is multiplying all UV and en dot products you take UV and dot product with the P naught which is a unit vector it is from direction is from origin to the you are waving origin that we are there means minus u dot product P not hawea what that is minus X naught to X plus y not you you you I minus J dot you guys that is it means direction of the P notice what origin - you are doing volition that we are do that that is the word derivation right then after that projection transformation now now after doing this one your coordinates are moving coordinates right leaving coordinates means you have converted word coordinate to view coordinate right now you have to see that means Allah comes into being coordinate now that means here what you are seeing that object now we from camera I'm seeing that object now that whatever object I have seen that I have to project in my film that I mean if whenever you focus in your camera and that means all came together with reference to what what egg me see everything view coordinate and world co-director and I know now here seeing that one month that is in front of your camera now we have to project that only your film that is projection right here projection transformation that is the next step is projection transformation if you see the pipeline there is a projection transformation convert the viewing coordinate description of the scene to coordinate portions of the projection means nothing but now everything is in front of my camera then I am capturing whatever I will capture that I have to project in my film right now plane viewing 3d objects on a to dish this two-dimensional display requires a mapping from 3d to 2d as I told now we have to convert actually that object in your viewing quadrant is in 3d object moving coordinate is 3 being that I am projecting on 2d means that a film or monitor whatever you are taking if you take a film in your camera that film is in a 2d but if you are displaying it to the monitor mortars also in 2d means I have to convert that 3d coordinate system to 2d coordinate system that we are paying it in projection transformation right know what is projection projection can be defined as mapping of a point P XY jet for example you want to map one point P that in 3d 3d world that is in 3d word once it is in 3d work then that is X Y Z X s it has that point I have to map right on to its image on the projection plane I want to map that on my projection plane right the mapping is defined by projectors that passes through P and intersects the view plane example you see I want to map that P please XYZ I want a projective projection plane that would be a plane right then I pass a one-way reach it is intersecting annoying projection plane that I will draw that point on my projection plane comes there that is P X - why - you're the sexual agenda should be not there on the projection plane because this is projection preemies a two-dimensional but we will preserve that for future use right normally P XY said P XY Z will becomes P dash X dash y dash there is a motion component on our projection plane prefers projection plane is only pro dimension there is a project or is nothing but you cast a one ray through that point then where it intersects exactly and your projection plane there you draw that P exit XY chart instead of P XY Z we just to draw we - equal to X dash y dash there is no charge capacitor on projection plane there is no jet right this is what we have to do in projection plane I'm projection okay demographics package is generally support two types of projections normally graphics package will support basically pro types of projections one is parallel projection second one is project perspective projection like graphics package will support pro type of projection that is one is parallel projection next one is perspective projection first we'll discuss parallel projection now we will discuss briefly both then approach will go individually one by one right parallel projection transfers object positions to the view plane along parallel lines means whatever object are there that object to transfer along parallel lines for example this for example you want to project this you want to project this on your monitor this is it feasible you want to transfer this on your monitor then transfer firmly line should transfer parallely right then wherever those lines are will strike on your monitor there is a projection plane then you draw that there is that is what parallel projection in this example we have taken like that is p1 p2 line I want to project on my view plane then I have parallel lines I have possible through those P not P 1 and P 2 then p1 s on my project p1 has entered p1 - then PP has entered at p2 - then I will draw that length that is what parallel project means whatever object you want to just pass the parent lines into your projection plane that is what parallel projection the parallel projection preserves relate to portions of object proportions of particular normally parallel projection will preserve red to proposition syrup object for example that original depth line is 2 inch then I never wanna transfer you'll get that line is 2 inch that means it will propose it will preserve the proportions of the objects and you see this is the method used in computer-aided drafting and design of trying to produce a scale a scale drawing up three dimension objects means this application of this is computer-aided computer-aided design then in architectures architecture will prefer this one right then there are pool general methods for obtaining a parallel projection we open up again in parallel position again we have two types of parallel projections one is orthographic projection one is object projection again in parallel projection again we have two types of projection the one is orthography one is oblique projection what we mean of orthographic projection if the lines the projectors if projectors are exactly perpendicular to your projection plane projectors are exactly perpendicular to your projection plane then that is called orthographic projection it's called orthographic projection if your projectors are not perpendicular if they have made some Mangan with your projection plane like this some inclination some inclination if they are made some ink relation instead of coming parallel if there comes some information that is called oblique projection right you can see that is the projection plane will be there if your projectors are exactly perpendicular to the projection plane then that is called orthographic projection if projectors are not exactly perpendicular they have made some angle with your projection plane then that is the projection right autographic parallel projection projections are done by projecting points in India since we have taken a point that's why I am discussing with the point you can can project any object you can projecting it is not only four points you can project any object right as I told this as I told this means if you project is it divisible if you project on pattern lines parallely like this then this is if this is orthography projection but if you project from this side on projection plane in some size for example like this you are projecting like this some information that is of oblique projection right autographic parallel projections are done by projecting points along parallel lines that are that are perpendicular to the projection plane right that is called orthographic projection oblique projections are obtained by projecting along parallel lines that are not to perpendicular to the projection Kunia so I prove me if you can see there from my right side my right side image if you see then that projector is not exactly perpendicular that is some in relation this is what object projection right here you can see right october pic parallel projection if you take the orthographic parallel projection then you can see side elevation view front elevation view then play the view from top side right those are parallel means you go the ecoan stands for your side then you take parallel projectors right you come to you stand in front then you will take parallel projection keep going at top any project parallel this is what orthographic parallel projection you know blip parent projection the lines are not perpendicular to the projection plane there are some inclination they have made some installation with the projection plane there is what object projection right then for a perspective projection then next is the perspective projection right parallel projection in short we are discussed in next in a next slide I'm not it will come to deck right for perspective projection object positions are transform projection coordinate along lines that converge to a point behind the view play okay for perspective projection object positions or transport for projection coordinates along the lines that converge to a point behind the view plane right you can see an image like p1 p2 9 I want to project on my view plane but how we are drawn I have drawn p1 and p2 in such a way that there is one convergent convergent convergence point then in that convergence point I have taken my present view plane on that view plane wherever those lines it is a touching there I'll draw p1 and equal to write an example of perspective projection for a straight line segment defined with the end points coordinates p1 and p2 is this like this means best example I have q1 perspective projection when you stand on the straight to railway track understand the straight we go back if you observe if you obviously your naked eye if you observe for a longer distance on that straight straight rail attack then you will feel that this very low tracer some ways they are joint that is called convergence point that's called convergence point then depending on here we will take the projection depending on from your point means various to be restored from that point to that convergence point here you take the image depending on portion of that image then the size of the that image will change size of the image will change right if you are taken towards the convergence point then size of the image is very short if you are taken the image towards you then size up image and be bigger size up invasion because normally our eye looks in a perspective projection in a perspective way right but perspective use a person are more realistic because distant objects in the projected display are additional sizes at all that's what I have told example if you are take a projection towards the convergence point means long for longer distance at that time the object will be smaller if they are taken same projection towards you then you will feel object is bigger right this is what projection normally our eye looks like this then our real camera also like this right this is regarding interpret parallel projection and perspective projection then we will go one by one first one is parallel projection that is color coconut rejection right orthogonal projection the transformation of object description to a view plane along the lines that are all parallel to view plane normal vector n is called orthogonal projection are you currently in some text book they may go orthographic projection right parallel projection orthogonal projection orthographic projection Odyssey thank our own projection a transformation of object description to a view plane along lines that are all parallel to your view plane on the insert parallel to your view plane right that no that is normal vector in n is called orthogonal orthogonal projection or equivalently is called orthographic projection this produces a parallel projection transformation on which the projection lines are perpendicular to the plane as I told if you are taking projection somewhere here if you are taking projection of this for example if you are taking projection of this then all it just can you see this one are we just will go parallel or they just will go parallel me right this is what parallel projection then if you take parallelism only one side your visible it disperses optimally projections are most often used to produce front side and top use of an object as I do lateral projection normally will use the architects will use whenever they want to construct front view front view that time they will is front view then if they want to the side view the in comments takes I do then if they want they can take your top use right this will be preferred by the computer aided design and architects right front side and rear orthogonal projection projections are of projections of an object are called elevations front side and rear orthogonal projections of an object outcome elevations and talk orthogonal projection is called plain view right this is one yeah Absalom a trick and isometric orthogonal projections of Zulu metric and isometric of new positions here if you go a tunnel if you go our Tawana previous from afterburning projections only one side is visible even though this is a 3d object this is a voxel 3d object but if you project parallely if you project parallely only one side at a time you can you see right if you if you want to see the front side only front is reachable no other sides are even if you if you stand side then there side if you go top on the top side is even this if you go orthogonal projections but sometimes what happens I want more sides up an object to be see more more sides of that object to be seen means I want to see this side I want to this see this I want to see this I want to see this right in that case we can also form orthogonal projections that displays more than one face - object right if you go orthogonal projection as I have told only one side at a time if you stand top when you're talking you can see if you stand in front you can see front side if you go side you can see side if you go back side you can see Lea face right but in some of the case what happens I want to see more number of faces by using orthogonal projection that time such views are called geometric orthogonal projections such views are count also never take atomic projections they have to cast up this go to perspective the most commonly used absolute projection is the isometric projection most common with documented production is isometric projection which is generated by aligning the projection plane which is generated by aligning the projection plane or the object so that the plane intersects each quadratic just means the plane has to intersect each coordinate axis in which the object is defined can't the principal axis the same distance from the origin means you won't like this like this in c4 like this this is a big derailment you can't see this type one minute I'll take this I exist right if this is object right if you see like this for example if if you see this is Arthur W projection this is orthogonal for only one side you can see if I would like this eighty-five old like this only one side you can see but when you want to see more number of phase what I will do I hold like this wait I would like this like this now how many phases you are seeing how mean if you are seeing you are seeing this face one meant you're seeing I don't wait you are seeing this face you are seeing this face then you are seeing this face then you are seeing this face right if I get if I saw I like to see if I would like this this face this this face then this face then then one more face this face this more number of cases you are seeing if I see if I would like this right that is what Observatory projection right then this pressure and in that case what happens your finish my Nexus will start intersecting a projection plane right I again one more method of constructing this we can obtain the isometric projection shown in Hindi in in this figure by aligning this view plane normal vector along these diamonds if if the vector normal means if you want to take this one if you have two normal is exactly now the diagonal of this cube create means you want to take a projection here or you want to take a projection here at that time if your normal normally is exactly the agonal to this this object then that time also you can take isometric projection right this is how to take isometric projection then next the orthogonal projection quadrant north on that is means only when you want to take when you want to display more number of faces up in any object by using parallel projection that time only will go isometric projection otherwise it the Parthenon then you go for atomic projection which the projectors are arranged parallel to your projection plane always parallel to the projection plane thank with the projection description parallel to the Chadwicks with the projection projection direction parallel to the sub you always have to arrange we are looking into parallel Christian Texas I mean whenever we are seeing we are seeing in the parentage a Texas right the transformation equation for the orthogonal projection are clear very simple right what is there for any point XY shared in viewing coordinates normally in 3d point is XY shot in a real word the point is in XYZ right the projector projection coordinates exp equal to X Y P cut away as I told in this you can see I have taken one XYZ XYZ at the point then we have projected on projection plane as I found X Y IJ will become only X&Y because J Texas I cannot retain some projection projection plane is only 2d or screen our screen is only today are you are film photo film is in only predict that time if there is no chance of representing charge there that's why XY jet will become X Y if you are taking parallel or orthogonal projection right a tonal projection then the chart coordinate will go for for the projection transformation is preserved for future which means if you want to can preserve the gen coordinate value for PA feature is for determination of procedures right this is what our tony cornett then clipping with the autumn projection we will you know I have taken my object Auto means I want this object I want this object then after on a projection I have taken my or display it on my projection means it is available in my projection plane it is available in my film then now what is happens whether whatever our total projection you have taken on your projection plane do you want to see the entire image do you want to see in their image are only I are interested in only part of the image that we have to decide yeah that is what clipping window clipping window after one projection view right here in camera in cam rhinology the type of lens is one factor that determines how much of the seal is transferred to the faith means lens depend lens will tell whether in class in lab I have taken lens in lab every time I will give an example elephant right if you want to see the elephant then you adjust the lens in your camera see in a such a way that it has to cover entire elephant but there is again one more if you don't produce the entire limit only if you want to see the tail then you are just your camera for the tail that means where you are actually interested each part of the object you are interested that you have to decide here that will be decided in our camera by adjusting a lens normally in a physical camera we will do this by adjusting event that's why a wide-angle lens takes more of the same then the regular lens if your lens has a wide angle then definitely that will cover more image in your camera if it is a angle up your lens is very small then it will come very less images from the real word break that normally our cameras then same has to be done here in our in our OpenGL right in computer graphics for computer work of your patience we use the rectangle clipped rectangular clipping window for this purpose that's why we were told in lab favorite Emma in lab I or discussed clipping window means each part of that image whatever image you have projected by projection each part of that image you want to see it in your monitor that we have to decide right that is what clipping window right here in OpenGL we set up a clipping window for three-dimensional you just as we did the fourth dimension doing again who we are dead for puh dimension doing same way here in three dimension moving also we set up by choosing two dimensional coordinate positions for its lower left and the upper right for us means lower left corner X minimum Y minimum X maximum Y maximum you set the clipping window you set the clipping window right then up towards absolute after setting right then next for field image living the clipping window is positioned on the view plane with you'd see edges parallel to X view and why we axis Sage's are parallel to X minimum X Window minimum is parallel to X then Y window minimum is parallel to Y it means those means those whatever edges yourself those are parallel to X view then why view right window means the X I X edge is parallel to X view then Y edges parallel to Y you write this is what the meaning of that line then afterwards he is right and then afterwards then X Y limits are used to form the top bottom and two sides of clipping region called the orthogonal projection we will you know in in X left X left X right y bottom Y top will form the earth or on project to the volume it will form the earth over on project we will you write in 2d also we have done the same thing in 3d also you are doing same thing right because projection lines are perpendicular to the always projection lines are perpendicular to the view volume means x left will decide how much minimum x you want to display the X right you will decide how much X Maxime you want to display from that projection Y bottom will display what Y minimum you are you have to consider Y top will display what do I make them you want to consider this is what we will do and then next here we can limit but what happens in 3d what happens in 3d this is what do you a live means since your projector projectors are will be exactly perpendicular to your projection plane then they may go infinitely inside means the length length up your projects are infinite infinite optimum projection we will means you only have taken left right bottom top means that's why when your projectors are going infinitely the length up your projection may be infinite length of your projection may be infinite right this can be limited this can be limited right we can limit to the extension extent of the orthogonal view will do in the chart view direction means we are not restricted checked we will do we are not restricted to juggle only were restricted the X we are restricted Y right we are restricted why we are not restricted Jud right that's why I do direction by selecting position for one or two additional boundary planes that are parallel to the view plane they that are parallel to the view plane means now in this case by doing this nothing but what we are paying to restrict chatter so depth that is kind of depth to restrict gender so these two planes are called near far near for clipping these two prints occur near and far clipping plane prints right are the front back clipping planes of the front and back rip means we have decided left right bottom top means yes we have decided why we have decided we are not decided yet means how much depth you want to see in that object that we are not decided that we decide here right that is what the meaning of second point right with the viewing direction along the judge negative cut as I don't we always you are looking even dictature direction because if you take the right hand quadrant system check this positive towards you right jet is negative in this side not when we are looking in this direction that's why I mean you are looking negative Direction negative jet direction right Texas we usually have judge the for less than certain ear correct check the far actually far is away from my my viewpoint then near is towards me but what conditions is judge the far is less than Sheldon here because you are looking net which a direction you have looking link to adaption when you go from oh is it till origin this is first two till origin this is positive up to origin contains a negative a provision that is negative right towards from origin towards you Genting supposed to that's why jetta for comes this side jetwash comes this side means 0 - 1 - 2 - 3 - 4 like this it goes towards the negative that's why judge the 4 is less shut the nearest towards first your side that is 0 1 2 or 3 means that's why the meaning of this is chapter 4 he is less than Chad thank understood chapter 4 is less than Jeff dear why because chapter 4 is like towards this side from origin it goes Jetta for original words toward this side negative Jeb is a negative minus 1 minus 2 minus 3 minus 4 that's why Jade for Jade forest Wars - right it said nearest towards first with X Y chapter 4 is less than Chad near so that they fall so that the far plane is further out along the negative z axis this is the meaning of that then next here then when the near and far planes are specified we obtain a finite orthogonal view value that is rectangle parallel pipe clipper parallelepiped right this is what if you said already accept yes I'll give yourself Y now if you set journeyer and Jennifer then that will be looks like this that is far clipping plane up near clipping finem then already right left bottom top our idea that is what clipping value this is what clipping William then whatever objects are there in this value that you have to display on clipping window whatever objects are there in this volume that object you have to display on a view plane on this view plane I have to display whatever object is there here in this video that I have to display here yeah yeah this is a clipping window this is X Y is yet but whenever I am displaying X Y Z whatever object is there from this near to for that I have to consider right this is viewing coordinate system this is giving value right graphics packages provide varying degrees of flexibility in the position of the near-end for clipping planes means you cannot just this near and far clipping plane can be adjusted right in some time we can take means in some time clipping window may be come within mirror and means really between near and far planes that is the flexibilities they do as I told there is a flexibility for adjusting clipping window clipping window may come in between far clipping plane and near clipping plane data can be done right it is not compressive that always those must be front of you plane that is effective but it'll be there in clipping in OpenGL right that's why if you take parallel only if you take two-dimensional this object looks like this if you are taking pooled emission if this subject it looks like this if you are taken 3-dimensional means left right bottom top then near them far if you are just near and far like this whatever objects are there they will look in this whatever objects outside they will go away right that it would do that this is what difference between these two prisms right then normalization no optimist then this is we are decided in word coordinate everything is in more coordinate right means it is in word for it means that is clipping william is different means those clipping values normally with respect to monitor or something right then that I have to transport the normal coordinate system normal coordinate system that is OpenGL normal coordinate system we have to transfer that is normalizing transformation for an orthogonal projection once we establish the limits for the viewing William now we're establishing limits for viewing really means some near X I have taken some far why I have taken far exile means near chat I have taken some nails yet they are taken some far Jade I have taken some minimum X I have taken a exhume X I have taken minimum Y makes me I have taken decided this way we have created some William then whatever object comes in that value that I have to display that I have to display my monitor but this will do has to be transferred to normal value which is available in package that's the normal value right normal will do in OpenGL start see as I both always minus 1 to plus 1 in the X minus 1 to plus 1 in Y same as minus 1 to plus 1 in Z direction right that is a normal Hey but our normal whatever welding we were decided those videos may be different that's why coordinate descriptions inside this rectangular parallel paper are the projection coordinates and they can be mapped onto a normalized to be value without any for the projection processing now these really these points we have to map to normal value which is the range in next comes the range of those normal-weight we will miss some graphics packages use unity tube for this normalized value value some graphics packages normalized we may be unity cube that is 0 to 1 x and y that is 0 to 1 or in some other normalization transformation approach this is symmetric cube with coordinates in the range from minus 1 to plus 1 as in our last example we have taken minus 1 to plus 1 means origin at Center in left side - on right side plus 1 then bottom minus 1 top plus 1 we have taken away a question there is a normal way volume right then that whatever we welcome we are derived near for excellent X rate Y bottom Wyckoff that medium we have to make up with this we have to me up to this right that maybe we have to be here ok because screen coordinates because screen coordinates are often specified in the left handed reference frame but normally screen coordinates are a left handed reference frame means normally pashtu ADIZ within this screen first widget is reading the screen then whatever check is coming out of the screen that is a negative yet whatever jump coming out of the screen that is an integer there is in left hand coordinate system in question radial coordinate system positive jab is towards us towards to our button left hand coordinate system negative which every stores you are right that is one normalization coordinate also are often specified in the left hand standard system this allows then how to do this one this allows positive distance in the viewing direction to be directly interpreted as distance from this screen means PHA stood this allows positive distance in the viewing direction to be directly interpreted as distance from the screen of the viewing plane distance from the screen means whatever distance from the screen is there that is positive direction there is positive direction right this is what with an example we are saying right this is scream scream then this is we jettison again check this is a jump this is why then check this positive towards this side jab is positive more this side then whatever positive distance whatever be it this was directly to the dist interpreted as the interpreted as the distance from this screen distance from the screen that is positive distance distance from the screen here object will come this side means up to that I will take this one then up towards we will mention this one that is viewport then this will put I mentioned the pyramid right then afterwards then this we have to normalize by carburization orthogonal projection right here what happens for example this is our V William this is our V William we are defined over volume XW minimum YW minimum jardiniere then XW maximum YW maximum which had the far by defining this one we are defined or we will do in viewing coordinate system we will define this really mean viewing coordinate system then this has to be a put this box this has to map here so what this is X minimum is minus 1 X maximum is minus XY Y minimum is minus 1 chutney R is minus 1 then X makes me is 1 y max is 1/4 is 1 this whatever we have here those has to map dia how to me up XW mean YW mean jet near I will map to minus 1 minus 1 minus 1 then this one will me up to this means these values whatever point if it is somewhere here then it is the same ratio that point has to come here that point has to come here right if that point if you are feeling that point is at centre of this V value then here also it has to come exactly at centre up this way this is normalized to be value that this is orthogonal projection we will do that you have to normalize then how to do this how to do this right this will put them like how we are done in 2 dimensional if those who don't know you can refer is this window to you poor transformation window to you poor transformation we have done it in two dimensional same push here will apply here instead in two dimension window to be poor transformation where you only were take any X Y in this case we are considering yet in this case we are considering yet only there is a difference otherwise again same method we use window to a poor transformation if I apply that if I simplify then this is yamato-kun 'martha means view a loom to normalize any value M we will implement them and I'll get in this question I get to buy FCW max minus XW mean then again there is a derivation whatever derivation we are done in two dimensions same derivation then after that I will get transformation this is transformation this is scale factor this is cam this is transformation then now by doing this one I get this this matrix this is what orthogonal we will live to not mention transformation right this the complete transformation from word coordinate the complete transformation from word coordinate to normalize orthogonal projection coordinate is obtained when M more say m double to equal to M into M word inter means world coordinate to not much important we have done basically it was at one coordinate from one coordinate to normalization coordinate we have converted this right at this stage of the viewing pipeline all dimension dependent coordinate transformations are completed and can be concatenated into single composite matrix then all the coordinate matrix means we world coordinate will coordinate projection coordinate everything can be concrete in a concatenated in multiplayer then only can be formed only one composite matrix one composite matrix if you take that values of the composite matrix nothing but indirectly or directly converted from world coordinate to normal coordinate system this is what how to convert one coordinate to normalization means in this video we were discussing how to align how to convert one coordinate to even coordinate then we will coordinate two projection coordinate then up to projection coordinate how to clip how to clip then up to clipping in that clipping value then that clipping William cook normalization coordinate system that we have converted right since your pipeline last but one stage then this is device coordinates then after ownership becomes a device code name then is this normalization coordinate just to apply the device coordinate it will display it on device coordinate means these two just has to occur in graphic spectrum if this is what this parallel projection only in this we will discuss the parallel position take in this 
OdL5n90GIQk,27,"Subject: Computer Science
Paper: Computer gaphics and visualization",2015-10-21T06:41:51Z,Computer Graphics and Visualization: Introduction,https://i.ytimg.com/vi/OdL5n90GIQk/hqdefault.jpg,Vidya-mitra,PT44M1S,false,1491,13,0,0,2,"welcome to the e part cela lecture series and computer science for postgraduate students in this session we are going to learn computer graphics and visualization so the basics of this subject will be introduced to you in this session so we are going to start with the basics in the module one and and some more basics as part of module 2 and this session gives you the brief introduction to this subject and and further we will discuss more details in this subject so to start with we have the basic terminology we have to understand this as part of the course then we need to look into the graphic types we have to also learn about the coordinate systems and other basics in this so the keywords that are meant for this our resolution refresh rate color depth scan conversion graphic standards and many more so in fact this subject gives you a brief introduction to this graphics and the visualization we are going to start with the basic terminology then the important definitions and we will look into what a display processor is and what is its functionality so what is a raster and vector graphic or what are the graphics types and coordinate systems that are very much important to graphics and the graphics standards here in this we have the basic terminology and as you can see terminology is listed here there which is which are pixel dimensions resolution aspect ratio refresh rate scanning modes you have dot page color depth viewing angle scan conversion and the other terminology includes graphic systems graphics types and graphics software standards and coordinate systems so we are going to understand what a graphic is or why the subject is so important as far as far as part of computer science is concerned so without anything that we see on the monitor more anything that we see on the monitor on a display device is actually a graph isn't it so we cannot live without it and every day starts with seeing something on a display device either it is a mobile phone or it is any laptop or an iPad or whatever we see actually a graphic so anything that we see on a display device is a picture or a graphic as the definition goes so this subject of computer graphics and visualization actually is all about learning the storage representation display and manipulation of pictorial information so we call it pictorial information because it is about picture so storage is one important thing representation is one another important thing and display so how do we render pictorial information on screen is another important thing and finally how do you manipulate a process pictorial information also takes importance so the definition of graphic is actually anything that we see on a display device even a dot even just a dot on the monitor or a screen on the screen is actually a graphic ok so with the basic terminology as introduced to you earlier so we have so many definitions without which we cannot go further so the definitions include say the first definition which we have to understand is pixel dimensions a pixel is a picture element we call it picture element in short form it is called as pixel so if you see your monitor is actually a collection of pixels your monitor is a rectangular array of pixels your monitor has got say for example generally your monitors are set to pixels likes a 640 480 resolution said to 320 240 resolution set to 1024 768 resolution and so on and so forth so you might have seen on your display devices that these are some of the standard display settings I think you would change it on your monitor you would you would you would often require to change these things on your monitor depending on the requirements of the application so here the number of pixels along the width and the number of pixels along the height make the pixel dimensions so it is important that you understand that this number here on the Left 640 480 say are 320 240 the 320 indicates the number of pixels along the width and 240 indicates the number of pixels along the height so always this is important that for a rectangular display like generally the left number on the left side will be more and the number on the right side will be less so indicating that it is a rectangular display so we have some display standards as you are aware of vga is one of the standards long back it is video graphics array so it is basically a standard that talks about the number of pixels to be there on the horizontal side and the number of pixels on the vertical side so it is 640 into 480 so SVGA is super video graphics array so it is another standard so it is 800 x 600 so xga extended graphics array 1024 x 768 and HDTV nowadays we say we have HD TV at home so HD supporting video at our on our laptop on our display device on our say all our display devices like television and everything comes now with HD support so we call that standard as HDTV and it is 1920 x 1080 so there are so many pixels in HDTV on HD standard so another standard for HD itself there are two standards one is 1920 1080 the other standard is 1280 by 720 and we call it progressive so we will learn more about what is actually progressive and other details later so here as we have learnt pixel dimensions now it is the number of pixels along the way the number of pixels along the height now you should try to understand the difference between resolution and pixel dimensions both are not the same as we take it the same most often but they are not the same or resolution is the number of pixels per inch is actually the term number of pixels per inch are dots per inch is resolution so when we say resolution actually we mean to say that how many pixels are there in an inch space as you can see here a high resolution display has got many pixels packed within an in space so so many pixels with an in space while ello resolution display device has got few pixels packed with nan in space so that means we can pack more information in a high resolution display but we cannot pack more information within the same in space in a low resolution display so that is where the difference is and the standard resolutions some resolutions are given here like 76 pixels per inch and 80 pixels per inch and so on and generally your printers also have got resolutions like say a deep a which is measured in DPI which is dots per inch your printer resolutions are far far larger for for higher values than the monitor resolutions for example your printer resolutions are 2,000 dots per inch and even higher resolutions are available for printers whereas for display devices your resolutions are generally like 1020 like 76 PPI a TPP I and so on so that is 80 pixels per inch so it means now you should be able to compare resolution and pixel dimensions which are so important generally we say that resolution is 76 pixels per inch and say pixel dimensions are 1024 x 768 that means that you have so many pixels packed in an in space like resolution 76 pixels in an in space and you have 1024 x 768 that means the quality of a picture is not determined by the number of pixels but actually determined by the resolution an important quality feature of a pics of an image is actually resolution ok so of a display device the quality feature is actually the solution so the more information the higher the resolution the more the information you will be able to see on the display device so in fact you can ask for a high-resolution monitor or a display device when you go and buy and then to ask for a high pixel dimension monitor so let us understand the next definition which is aspect ratio aspect ratio is the ratio of width to height and generally you might have noticed that the aspect ratios are standard aspect ratios of 4 is 2 3 16 is 29 and these settings you have it on your television set on your display device you can change these settings so aspect ratio gives us the ratio of width to height of a display device then the next important definition that we have to understand a depth is the refresh rate or the frame rate so refresh rate is the number of frames or screens scanned in a second so every display device has got this parameter which is called the frame rate other refresh rate so whenever your device or your display device has to throw something on screen it actually displays the image our scans the screen image on the screen 60 times a second so it displays the same image 60 times a second it redraws the image 70 times a second 75 times a second and so on and so forth your monitors have got these settings you can change these settings like your monitor can be changed to 60 heads monitor our 65 heads 70 heads 75 heads because the refresh rate is measured in heads so as you see here the diagram here shows that when you the monitor is scanned like this this is a horizontal line this is called a scan line so the monitor starts scanning the picture from the top left corner and then it proceeds towards it proceeds towards the right and this is a horizontal scanline and as we it retraces there is a dotted line that you could see there there is a retrace there is this called a horizontal retrace and then again the next line is scanned again there is a horizontal retrace during the retrace process it does not draw anything so it just waits for the next scanline to be redrawn so it keeps doing this and when it comes to the last scan line here it does what is called a vertical retrace this vertical retrace again is the electron gun or what is called the pixels that are actually not draw nothing happens on the screen when there is a vertical retrace simply it is rearranging the position of the electron guns inside so that the screen is again redrawn from the top left corner this is how there is a horizontal scanning and at the end of the frame it is vertical scanning again the position of the cursor starts from here so that is the screen is redrawn again from the top left corner so that is how we saw a skein screen gets redrawn this is called refresh it so this the screen gets redrawn 70 x 60 x or 70 x or 75 times in a second is a standard refresh rate for your monitor you can do this do even change the setting because even at six th if you have an olden day CRT monitor for example if you're using a CRT monitor of the olden days now they are being replaced by all the flat devices are flat panel flat screen devices so if you have a CRT like device you can better adjust your refresh rates to 75 heads 70 to 75 heads because even at 60 heads our eyes are able to detect the flicker of the screen so we tend to feel a lot of strain on the eyes even at 60 heads so please you can change the setting to 70 or 75 heads if you have an old and a CRT monitor like device display device ok so next important thing as far as these are these are important to understand here that is refresh rate is actually the number of screens are frame scanned in one second measured in heads and here these scanning mods if you look at there are two ways in which a screen can be redrawn a screen can be actually the image on the screen can be reproduced so which is interlaced scanning and interlaced scanning is one where we have a screen the same screen is actually is actually drawn in two passes that is as you would notice here it is a technique used to increase refresh rate that is we do this so as to increase the refresh rates because as we know that our human eyes are so sensitive even to small changes and flicker on the screen so we want higher refresh rates so our aim is to increase the refresh rate so we go for this mode which is called interlaced scanning so in interlaced scanning in the first pass all the order lines are scanned and in the second pass all the even lines are scanned so in two passes the whole of the screen gets redrawn so that means it is actually an interlaced monitor so how do we know that is if you happen to buy a HD display device for example a HDTV for your home you may be the when you go and buy the specification says like this say for example 1920 x 1080 is one standard as we know the 1920 indicates the number of pixels along the width and 1080 indicates number of pixels along the height and there is one important characters down by the side of 1080 which is I the I indicates interlaced that means if you go and ask for HDTV they might show you like say we have 1920 1080 I display device so that means this I indicates interlaced and that means the display device uses interlacing technique to actually refresh the screen as many times as per the refresh frequency so here the other kind of scanning mode for a display device is progressive scanning so in progressive scanning the image is actually not scanned as unlike your standard interlaced scanning here the picture the course details of the picture are displayed first and final details are only displayed later here course details here means the important details that make up the image are displayed first and the final details appear later so with passage of time that is slowly the image before you gets clearer and clearer that is what is called a progressive scan so here if you see in the example here the HD 1920 1080 p indicates that generally it is colored red to indicate that the standards when you go and buy AC in a shop like say 1080p they say 1080p is our display device 1080i is the television we have so 1080p indicates that p stands for progressive and the scanning mode that it uses the television uses is progressive scan so how these two are different now which of these scanning mode is better so if you look at this the progressive scan and the interlaced scan if you could closely if you identify if you look at these things at close these two images are closed you would see that the progressive scanned image is much more better and superior in quality to the interlaced scanned image or picture so that means if you go to a television shop you better look for a display device or a monitor or a television that offers you progressive scan okay but these are obviously a little costlier than the interlaced scan models so the progressive scan is much more superior in quality so the next terminology is that we are going to learn is dot pitch the next definition dot which is the distance between centers of two successive dots or pixels and measured in mm so millimeters so if you see here the dot pitch is the distance between the centers here so a pixel is indicated or its position in the shape of a triangle and here you have the red dot the green dot and the blue dot so these three are positioned like a triangle in the shape of a triangle and the center's between two successive dots is called the dot pitch so the smaller the dot pitch the better the resolution the lesser the dot pitch the better the resolution so the higher the dot pitch the poor of the resolution so that is a straightforward relationship between the two next a definition is about color depth color depth is the number of pixels that we the number of colors that a display device can reproduce I think some of the olden day display devices could produce only say 256 colors later with improvement in technology they were able to produce like say 10,000 colors and 16 million colors and later and later even beyond that now if we say the number of colors that can be produced by a display device is called the color depth and the number of bits that we assign per every pixel so it depends on how many number of bits we assign per pixel so we can assign 24 bits we can assign 32 bits so it depends on how many vibrant colors how many variety of colors that we want for our display device so 24 bits per pixel indicate that it is to power 24 colors are possible on the display device and if you see where is 24 bits per pixel it is red eight bits blue eight bits and green eight bits so all the three are given eight bits each so that thought will put together it is 24 bits per pixel so for 32 bits per pixel you can still distribute the number of bits among the three colored dots here so that makes the color depth and now we are able to see so many colors on the display device because of the higher color depths so the next definition is about viewing angle so viewing angle is now some of the LCD is a flat panel display devices the LEDs and so on all the flat devices if you see they have a specification called as viewing angle that is if you see only striped perpendicular 90 degrees orthogonal if you see the device only from 90 degrees or perpendicular direction so we will be able to see that at the best possible viewing experience you will have so but if you try to see it from an inclined angle so you will have a different color setting and all the things appear differently than what when you notice when you observe when you are exactly the sitting stride so when you deviate yourself from the display device automatically the colors the everything appears differently so that is where the viewing experience is lost so for acceptable viewing there is a limit to the viewing angle so that viewing angle is an important criteria so that that comes with a speck of a display device another important point is the display processor actually this is the hard hardware element of your machine so graphics card we call it our we call it the display processor you can call it you might have heard of these names like Nvidia graphics processor the these devices actually are made to enhance your graphics capabilities for the display device and if you see that here the display device there is a graphics processor actually what it does is it takes all the pictorial picture information from the program or in the form of a program say for example a picture is to be displayed and the pictures information is actually stored as part of a program are is in the form of a representation this representation is given as input to the display processor what the display processor does is it converts the pictorial information that is given there into equivalent pixel intensity values so this process of converting the information of a picture which is not in the form of pixels into some pixels or a rectangular array of pixels is called scan conversion and that is what this display processor does so if you see the architecture of this processor of display processor it is there is a system bus there is a display processor and it has got the display processor has got its memory is dedicated memory display processor memory and there is a frame buffer the frame buffer here stores the information that is to be actually thrown other pixels intensity pixel intensity values are actually stored here in the frame buffer while some other image is to be shown the display processor already calculates the amount of the intensity values required and that is again stored in the frame buffer which is then fed to the video controller and then again finally it is fed to the monitor so the display processor does an important job called scan conversion so as you see this in the definition here it is the process of converting are digitizing a picture definition given in an application program into a set of pixel intensity values so that is where your scan conversion process takes place and that is your that is done by the display processor let us understand the types of graphics systems based on how a picture is displayed so if you look into this there are two ways in which a graphic system can be a picture can be displayed on a device and it display device one is the raster type and the other one is random type in raster type a frame is scanned completely starting from the left top left corner and ending at the bottom right corner so in raster graphic system what happens actually is the screen is drawn starting from the top left corner and the picture gets redrawn till the bottom right corner without bothering about whether there is some picture to be drawn in between or not it just starts scanning right from the start top left corner till the bottom right corner whereas in the case of random type only the part of the frame that contains the picture definition is scanned so you can now understand and the difference here in raster scanning a picture is drawn straight from the top left corner of the monitor to the bottom right corner even without bothering about whether there is the full screen has some picture or maybe a part of the screen has got some picture so it keeps scanning while the random type of scanning is it just scans where the exact picture is to be plotted our is to be drawn next important thing which is to be understood is the graphic types so based on how a picture is represented so we we most of us have experienced so we do not generally find a difference between the graphic types we just take it for granted actually a picture can be either a raster graphic or a vector graphic so if you see something on your screen a picture or an image on your screen it is made up of either a raster graphic or maybe a vector graphic so a raster graphic how it is different let us try to understand the difference here if you see the difference between the two hear a raster is basically a rectangular array of pixels so which is a matrix of pixels that is how they are a raster is represented and it is resolution dependent so let us look into the raster attributes of the raster graphic so it is resolution dependent to understand what is this resolution dependency we have to look at an image that is displayed okay say for example if you stretch an image what actually happens if you stretch an image if you shrink an image what happens is if it is a raster graphic if you stretch an image the quality is lost the image gets pix elated or maybe the image looks blurred are and many modes so the pixels actually get expanded and now it leads to loss of information so what we mean to say by that is raster graphic is resolution dependent that means if an image is created for say 640 480 pixels that make up an image and if you see it in a 640 480 resolution display device so then what happens is the image exactly appears as it was done but if you stretch the image beyond that it gets distorted are we call it pixelation so so that is why it is resolution dependent so then the next attribute is the next properties file size so file size is huge for raster graphic because it is resolution dependent if you create high quality images obviously the file size is larger and they are easy to edit and manipulate as you know there are many software so much of software is there to so many software tools are available proprietary software open source software are available to edit a raster graphic for example to name one proprietary software you have the most popular the adobe photoshop one of the one of the popular image editing tools which is meant for raster graphic editing and to name one vector graphic editing we will come to that later but so too it is easy to edit and the open source equivalent of photoshop you can take one of the open source software as the jump the jump is an open source image editing software meant for editing raster graphic and here we have the example raster graphic types which are the BMP and jpg are some of the formats and one of the popular standards of raster graphic is OpenGL OpenGL is one of the open graphics library it is one of the popular standards for raster graphics there are many other standards which are not mentioned here let us come to the vector graphic type and how it is different from raster graphic any picture is represented as a set of mathematical equations so a picture definition is stored inside as a set of mathematical equations so how a picture is stored is for example a picture is basically made up of many points so you can also imagine a picture to be made up of many mathematical equations like squares like circles like wreck angles like many other standard shapes so a combination of all these for each of these we have mathematical equations so when you combine them to form shapes so we have various pictures so you can you can you can break up a picture as a combination of various mathematical objects so any picture is represented as a set of mathematical equations so one of the important difference that you would notice between raster graphic and vector graphic is it is resolution independent that means even if you scale it up as much as you want even if you enlarge the image even if you stretch the image image as much as you can but still there's quality of the image the display quality does not get disturbed does not get deteriorated but it but the quality is again and again it is much more better and superior with with change in size there is no change in quality so that is where it is resolution independent so and another important difference that you can notice is it is the file size is much more smaller but due to this difference due to this very feature of vector graphic raster graphic is actually much more popular because of this very reason a vector graphics are difficult to edit and manipulate so for example you can take a vector graphic editor software like coral draw and you can also you might have heard about flash flash is one of the most popular vector graphic software tools so you have one of the important standards that define that are that gives the vector graphic that supports petrographic is the SVG stands for scalable vector graphics this is where we have to understand how a picture is made up of and how the raster and vector graphic are different so let us look at these graphics software standards a software standard is actually a set of algorithms defined for drawing graphics so whenever we say a standard actually it does mean that how a picture is to be read have a picture definition is to be represented how a picture is to be drawn or what are the various of what is called standards so a set of software standards is basically a set of algorithms a set of some pseudocode is always available and what you can do is as if s take a standard and you can integrate that with one of the programming languages are popular languages so there are many standards available for example gks is graphics colonel system so you have figs programmers hierarchical in fact if graphics standard you have CGI computer graphics interactive you have vrml virtual reality markup language you have OpenGL open graphics library you have SVG the scalable vector graphics you have direct x by microsoft so these are many of the graphic standards so what do you mean to say by graphic standard is they contain representations of images how and images to be drawn how a line is to be drawn have a circle is to be drawn how the basic shapes are to be drawn how to create the attributes how to actually combine them to form various pictorial elements so is all defined in the standard and our job is to actually use a programming language to actually implement the algorithms in the standard so the algorithms have been implemented and you can now find a lot of libraries which you can use straight away in your programming language and you can call these functions and within the programming language and now you can run and execute so the beauty of these standards is that they are they have a language binding so what is the language binding language binding is that suppose if you are good at Java I suppose if you're good at sea as supposed to be a good at C++ what is that you can do is you can download the required libraries corresponding to the standard and you can actually integrate that with your programming language of your interest for example take OpenGL OpenGL has got language binding with C OpenGL has got language binding with C++ OpenGL has got language binding with Java and so on so if you're good at see what is that you can do is download the OpenGL libraries the DLLs the header files for OpenGL with c plus with C and then integrate that that is in the environment you integrate them you add it in the header you add these libraries in the header and then while you write you a C program you can embed the OpenGL statements in between so that is called the language binding and every standard here most of the standards here have got a language binding with the standard so graphics programming you can use OpenGL one of the graphics programming environments you can use direct x these are meant for 3d the OpenGL direct x are meant for 3d so CG graphics for see the vrml popular markup language for the for graphics on the web for 3d graphics particularly a virtual reality markup language the fran functional reactive animation processing processing is one of the recently emerging languages and allies java so Java is well-known open source platform for 2d as well as for 3d so Java 2d and Java 3d there are many methods and libraries available as part of the java 2d and 3d packages so you can call these libraries while within the java program so at the last we can come to the coordinate systems which forms the most important part of graphics study so that is every standard or every program that you write in graphics actually deals with a lot of coordinate system transformations so if you take for example 3d graphics it starts first with modeling the objects so what is that first you do in a in 3d graphics a for example if you have tools like 3d studio max if you take tools like Maya what is that first you do is first you open the interface of 3d studio max amaya then you have various views of the 3d objects that is you drag and drop some standard objects that are available on the interface you will be throwing them on the screen and then you will be actually repositioning them wherever you want and then later you would give them kind of shades you would give them a lot of textures you would give them lot of what is called some reflection and other properties you would later find a suitable viewing position and then capture that as part of your 3d now animation are a 3d image or whatever you wish so the final step is what is rendering so in a typical graphics program what actually happens is as lot of conversion of coordinates from one coordinate system to the other so we need to understand what a coordinate system is first first we need to get a have a feel for what a coordinate system is as we know as we have learnt that a coordinate system is nothing but two perpendicular straight lines and we call it Cartesian coordinate system and basically to have a better understanding a coordinate system is actually a reference position in space what is the reference position a reference position is something but a position that you have chosen in the space and with respect to which you measure the world are with respect to which you locate a position other position in the world so it is basically a reference point are to be more precise it is basically a reference frame in space so a coordinate system fundamentally is a reference position a reference frame that is in space so if you see here we start with the modeling coordinates so that is imagine an object is first draw opt and dragged and dropped on screen imagine there is a 3d object what is the first step that we do is drag and drop an in-built object place it on the screen and the next step is to extend it or maybe you can stretch it or you can maybe scale it or you can orient it rotate it or whatever you do okay when you are doing all that what you are actually doing is you are doing all that with reference to one of the coordinate systems which is called the local coordinate system are also called the modeling coordinate system okay what is the local coordinate system or a modeling coordinate system it is actually the coordinate system that has got its origin which is at the center of the object and with respect to which we are actually we are actually deriving three mutually perpendicular directions with respect to the center and that forms the coordinate system for that object and when we stretch our increase its size are may be reoriented everything is done with respect to that coordinate system and we call it as actually the modeling coordinate system are the local coordinate system that means if you have a different object like say here cylinder is one of the objects it has got its own local coordinate system and square a cube is another 3d object which has got its own local coordinate system and also when we say it is local coordinate system every object has got its own separate coordinate system and when we place all these objects in the three-dimensional world that is imagine a reference position imagine a reference position as shown here which we call it as world coordinate system and we will and when we place all such objects in this coordinate system we call it actually the world coordinate system now all these objects assume world coordinates initially they were all the objects were assuming local coordinates which also called modeling coordinates and when we have put them in with respect to another reference position which we call it as world coordinate system now all these objects assume world coordinates and the next step is to convert the world coordinates to viewing coordinates what is actually viewing coordinates is again imagine that you are going on a nice picnic you have gone to a are to a nice a place or a hill station you are on a hilltop from where you wanted to actually take a snap of the world so what is that you do first is you position yourself isn't it you used you standard a nice vantage point and you position your camera that is you orient your camera you turn it you bend you rotated you oriented so to have a perfect picture of the natural scenery there so that is where the viewing coordinates comes into picture that means when we have placed all the objects in the world the next step is to imagine a viewing coordinate system which is actually a position in space and then a reference position in reference frame from there you are actually capturing the world so that is your viewing coordinate system and once you choose the viewing coordinate system the next step is to convert the world coordinates to viewing coordinates and followed by that is later convert the viewing coordinates to projection coordinates as you can see here it is viewing coordinates and then later it is projection coordinates and finally we convert them into normalized coordinates and which are finally given to the device for display so these are the series of steps that take place in creating a right from creating and modeling and object till it is actually shown are displayed on a display device these many conversions take place for each of the conversion a lot of matrices are used for conversion from one coordinate system together so from modeling coordinates the world coordinates world coordinates to viewing ordinates viewing coordinates to projection coordinates projection coordinates to normalized coordinates and finally to the device coordinates at the end that you see here finally the device coordinates are assumed by the objects so basically when it is finally shown up on the display device we actually see the device coordinates so that is where the graphics pipeline goes that is how the graphics pipeline goes we call this pipeline because so many series of operations take place right from modeling till it is displayed on the final device so with this we come to the the summary of this what we have learned let us take a recap of what we have learned today in this session so we have talked about some of the basic terminology very important as part of as far as graphics is concerned so we have learnt about definitions like pixel resolution pixel dimensions resolution we have learnt about say coordinate systems we have learnt about the graphics types and raster and vector graphic types the coordinate systems at the end so this understanding of these definitions is very important I want you to actually have a relook into all these definitions because we require this as the background for the next discussions for our further discussions in this course thank you "
NxhyePegSq8,27,"Resource person in this video: Dr. Josephine., Dept of CSE, CiTech, Bengaluru.",2020-04-15T14:15:30Z,Cohen Sutherland | Module 3 | CSE VI COMPUTER GRAPHICS AND VISUALIZATION | VTU Syllabus | CiTech,https://i.ytimg.com/vi/NxhyePegSq8/hqdefault.jpg,Dept of CSE- Cambridge Inst of Tech,PT1H2M13S,false,158,6,0,0,0,thing is the process of eliminate one second clipping is the process of eliminating parts of objects or primitives that cannot appear on the display because they lie outside the clique volume or using okay we want we are seeing through a camera of we will not be able to see the entire view we will be able to see only a part of the view okay so what keeping does is it eliminates the parts of the objects which cannot be seen then we saw two point sorry two dimensional point clipping that is a point XY will be visible or will be seen in the window only if it satisfies these four inequalities that is X W min X W min is less than or equal to X is less than or equal to X W Max and YW - less than or equal to Y is less than or equal to Y W max okay this is what we have seen next we were seeing what is like if the line p1 p2 needs to be clipped how it looks if both the end points are inside the window the entire line will be see if the two end points if the entire line is outside the window then nothing will be visible and if a part of the line like your lying piece a p5 p6 p7 p8 if it is partly inside then only that part of the language is inside will be visible the other part will be not visible so the invisible part has to be tipped as it is shown in this dad and we said that the major goal for any line clipping algorithm is to minimize the calculation of the intersection points because this is the only time consuming process and we want to minimize that each any algorithm tries to minimize this and we have two main algorithms one is : line clipping a university like getting along in your syllabus you have only four hands to the line line clipping that is what we are going to see today now this algorithm is one of the earlier cell organs to be developed for line clipping and the processing time is reduced by performing more tests before proceeding to the intersection calculations yeah we'll see these in detail now what this algorithm does is you have to say this is our clipping window now this is defined by four boundaries this is the lower boundary this is the upper boundary this is the left boundary and this is the right boundary ok now go into the key and I'll Gordon he extends these boundaries infinitely what do we achieve we divide the entire space into nine regions okay this region which is inside which is bounded by the clipping window is inside okay that is the part which will be visible now the remaining eight regions which are outside are not visible and whatever object falls on those eight regions they are to be clipped okay now for each of these regions region code is given okay it is called as either out code it is called ask out code or it is called as region okay so for each region a code is given now how is this code given this code consists of four bits B 4 B 4 B 3 B 2 and B 1 ok so before it corresponds to the top boundary line you have this as the clipping window okay before bit corresponds to the top of the line B 3 bit corresponds to the bottom boundary line B to the first ones to the rights boundary lines and be one bit corresponds to that left ok be one for the left boundary be two for the right boundary B 3 for the bottom boundaries and B 4 for the boundary ok now what does each of these bits mean it means you have two values 0 and 1 okay if the line or if the point is to the left of the left boundary then that  will be Co so we have we have this a settling window we have four bits b4 b3 b2 b1 this bit stands for left okay now if a point is this is our left boundary if a point falls on the this left side region then the bit will be set to one okay four points which are to the right that is this side this lit will be set to zero okay so bit one else whether the point is to the left of the left boundary or to the right of the left model okay now this two is set to one if the point is to the right of the right boundary okay you have the right boundary if it is to the right of the right boundary this will be set to one okay and bit three will be set to one yeah just stop for them right and left okay so this bit three will be set to one if the point is below the bottom boundary okay that is for this region and before will be set to one if the point is above the top boundary okay we'll see an example so okay now we have divided it two to nine regions now the bits are given by the bit one is what is on the left each one is what is on the left the two is four the right bit three is four the bottom and bit 4 is for the top so now if you take the clipping window the points inside the clipping window okay they are not to the left of the left boundary okay so the bit one will be said to zero okay now these points are not to the right of the right boundary so that bit is also set to zero okay now these points are not below the bottom boundary so it is zero these points are not above the top boundary so that bit is also C okay so the out code for the points inside the clipping window is zero zero zero zero is this clear yeah I think some people have not understood I'll just explain it once again what Cohen Sutherland algorithm does this you this is our clipping below we divide the entire region the entire space into nine different regions by extending the boundaries okay now he gives out code or region code to each of these regions to the nine regions the out code consists of four bits bit 1 bit 2 bit 3 and bit forth ok now big bit one stance bit four stands for the top boundary bit three for the bottom boundary bit to further write boundary and which one for the left now if the point is to the left of the left boundary b1 will be set to 1 if the point is to the right of the left boundary or it is not to the left of the left boundary then it is set to 0 ok now a bit too will be set to 1 if the point is to the right of the right boundary if the point is not to the right of the right boundary it will be set to 0 and so on ok we will give the codes for each of the regions then it will be careful now when you come to the fifth now to say this region that you have this region ok now what is the code that you have the point is we're first we check their left boundary okay this point is to the left of the left modem this is the left boundary the point is left of the left boundary so that it is said to work okay now when you come to be two it checks for the right boundary now the points in this region are not to the right of the right boundary so that bit is set to zero now these points are coming to the third bit now these points are not below the bottom boundary so again it is set to zero now these points are above the top boundary this is set of boundary they are about the top boundary and so this data set to one so region code for this space this region is one zero zero one is this clear yeah now what about this region that we have this video the sphere yeah now for this region the point is not to the right of not to the left of the left boundary okay and so that bit is zero now the second bit when you take these points are not to the right of the right boundary and so it is zero okay now these points are not below the bottom boundary so it is zero but these points are above the top boundary and so is this one so the region code for this region is one zero zero zero is this clear yeah what about the code for this region that we have yeah you can give me the answers in the chat box yeah one zero one zero is correct what about for this region this is one zero one zero so this region is zero zero zero once this we are written as zero zero zero zero what about this region yeah so for this region it is zero zero one zero for this region it is zero one zero one for this it is 0 1 0 0 and for this it is 0 1 1 0 is this clear yeah good I find ya always correct answers so this is how the region codes are okay now when you write a program okay here in the example that we have taken the way we have taken the clipping window we are able to see the clipping window and we are able to give the region codes okay but in a program where you have this we will not be having okay what we will be given as we will be given the clipping window with any rectangular region is identified by the bottom left point and the top right point okay this would be X W min Y W min this is XW max Y W max okay now given this and the coordinates of a point x comma y how will you know this region go one way is you compare the value of X with respect to X W min okay if X is less than X W min then your bit one will be set to what otherwise it will be said to zero I have this as my keeping window this is XW min YW min that is this point this point is X W max Y W max so my bit one is set to one if my X is less than X W min that means if the point lies on this side of the left on this side of the left boundary then the bit is set to 1 otherwise it is 0 okay similarly big 2 is set if X is greater than X mu max that is if you fall on this region big 3 is set to 1 if y is less than y w means that is this region and bit 4 is set to 1 if y is greater than that y w max it is the same thing whatever we have described now it is the form of a equation is this clear yes some people are asking me to repeat I'll just a beta okay now when you are given and when you are asked to prove them okay in our case our clipping window was a small one we have just taken a clipping in a small slipping window so we are able to see the figure and we are able to give the region codes correctly okay now suppose you have a huge tipping window which you are not able to see okay you are only defining X W min Y W min X W max Y W max that is a clipping window okay now how do you set the four bits how do you set the four bits bit four big three big - and bit one okay this first we have already seen this corresponds to the top boundary bottom boundary the right boundary and the left boundary okay so here what is left boundary all the points that lie to the left of the left boundary yes that is this is is going to be set to 1 4 bit 1 ok so what is left of left border how do you define this this is this line is the line y equal to X W min okay so all the points to the left of this line will have X less than X W me okay so for a given point X comma Y for a given point X comma Y if the x-coordinate is less than X W min then bit 1 is set to 1 okay otherwise it will be set to 0 okay it is the same thing translation of whatever we have described in words in two equations now wind is bit to set to 1 if the point is to the right of the right boundary ok that means this is our right boundary if the point lies in this region then bit 2 is set to 1 ok when is a point to the right of the right border what is the equation to the right boundary equation to the right boundary is given by Y sorry it's equal to XW max okay so 4 points to the right of the right boundary X would be greater than X mu max okay and so if X is greater than X mu max big 2 will be set to 1 okay similarly big 3 that is 4 points below the bottom boundary ok so the equation to the bottom boundary is given by y equal to Y W min so if the point XY has y less than y w min then B 3 is set to 1 and with 4 is set to 1 if Y is greater than Y W Max is this clear yes ok another way of expressing the same thing instead of taking as inequality in a program comparing signs is much easier ok so the same thing we give it in another form you have we have this as the tipping window ok we have the points X comma Y vinous bit 161 if X is less than X the movement okay then what is X means X is less than X Union or XW means is greater than X or X W means minus X is greater than 0 greater than 0 means what it is positive ok so this bit will be set to 1 if the sine of X W min minus X is positive okay that is if you calculate the value of x W min minus X if it is equal to 1 then sorry if the value is positive then the bit is set to 1 okay if the value is negative then the bit is set to 0 this is another way of expressing the same inequality okay we have a if X is less than X W min then we are setting it to 1 okay or you the value of x WM n - X if the sign is positive you set to 1 if the sign is negative you set to 0 is this here okay same way bit 2 is set to 1 if X is greater than X W max okay or the sine of X minus XW max if it is positive we take it as 1 if it is negative we take it as 0 saying they forbid 3 we take the sine of Y W min minus y okay if it is positive we take us 1 if it is negative it is 0 same way bit for if the sine of Y minus y w max is positive we take us 1 otherwise we take it as 0 you go ahead sorry yeah oh now this is the first diagram that we had seen okay if the line P 1 P 2 we are taking ok what is the region code for P 1 since it is the only thing is I have superimposed with the region codes that we have just calculated okay so if the what is the region code for P 1 since it is within the clipping window it will have 0 0 0 all points inside this clipping window will have the code s 0 0 0 0 okay now what is the code for p2 p2 also has a code 0 0 0 0 okay so if for the line to be visible if both the end codes are 0 0 0 0 then the line is completely visible and in our output window the entire line would be visible that is we have to draw p1 p2 completely is this clear so for for a given line if the outcodes we first calculate down codes if the out codes are zero zero zero zero for both the end points then the line is completely visible and we will draw the line now we take P 3 P 4 okay therefore P 3 is falling in this region so it's code is zero zero zero one now P 4 is also falling in the same region you have zero zero zero one since both are not zero zero zero zero that means P 3 is falling outside the clipping window P 4 is also falling outside the clipping window okay now you take this line P 5 P 6 okay what is the code 4 P 5 since it is falling in this region the code would be zero zero zero one okay for P 6 since it is falling within the clipping window this region the code is zero zero zero zero okay that means since the cold is zero zero zero zero P 6 is falling inside the clipping window and for p5 since the code is not zero zero zero zero it falls outside that means some point of intersection is there with one of the boundaries okay we have to calculate that now when you take P 7 P 8 P seventh code is 0 1 0 0 p 8 score is zero zero 1 zero okay this P 7 scored is also not 0 0 0 0 ph or is also not zero zero zero zero that means we will not be able to decide the line mail is intersecting some of the boundaries of the clipping window okay so we have to find the points of intersection and then decide ok same a few take p9 p10 also this ones p9 score is 1 0 0 1 p10 score is 0 0 1 0 ok again we will not be able to decide whether it is inside or outside it depends on where it is intersecting ok so we have to find the points of intersection and find out ok now all that we know is all that we are trying to understand is if the point is inside the clipping window it out codes for both the end points are going to be 0 0 0 0 ok if they are not inside then you will have a different value other than all zeroes is this clear yeah we will be repeating this thing one person has not understood ok I will just repeat it once once so if you take P 1 P 2 the out code for P 1 is going to be 0 0 0 0 since it is within the window ok for this entire region the code is going to be 0 0 0 0 so for P 1 the code is 0 0 0 0 4 P 2 also the code is 0 0 0 if the codes for the two end points are 0 0 0 0 then the entire line is visible and in the clipping window we have to draw the entire line okay now when you take any other life like P 3 P 4 if you take the both the end points are not all zeroes so we don't know whether a point the part of the line is inside or outside we will not be able to decide we have to calculate points of intersection and then decide now if you take P 5 P 6 okay for p6 the code is 0 0 0 0 whereas for P Phi it is 0 0 0 1 okay so one point is 0 0 0 0 then that means the point is the line is partially inside ok so we have to calculate the point of intersection and from the point of intersection to this point P 6 that the loan will be drawn that is the line from here to here alone will be drawn okay now if you take p7 p8 the outputs are not all zeroes okay for both the end points that is for P 7 and P 8 and so again you need some more calculations that is you have to calculate the intersections etcetera and then decide how we are going to decide is what coincident algorithm is going to teach us okay now so if the to end out codes for the two end points are all zeros then the line is visible and the entire line will be shown in the tip image okay that is what we understand from this discussion now another point is you take this line p3 p4 okay for both the points the codes are zero zero zero one zero zero zero one okay you see that bits one is one for both the endpoints okay if that is the case that means the line is falling towards one side of the boundary and that is outside the clipping window okay now you take another line say from here to here we take the line from here now what is the end code for this point this is 0 1 0 1 what is the end code for this point it is 1 0 0 what okay what we find is this bit which be 1 is 1 for both the end points ok what is bit one corresponding to that corresponds to the left boundary if the point is to the left of the left boundary then this bit is going to be set to 1 ok and so that means the entire line is falling to the left of the left window and so that can be totally rejected that means in the output we will not be showing that line at all ok if the same bit is set for both the end points then that light will not be shown in the output diagram ok you take another example say we are T in this life ok then this code is 1 0 0 0 the code for this point is 1 0 1 0 okay so we see that this bit bit 4 is set us 1 for both the end codes okay the out codes for both the end points the big four is set ok bit four stands for that pub boundary ok the before is set to 1 if the point is above the top boundary ok that means since bit 4 is set for both the end points the entire line lies above the top boundary and so this line will not be shown in the output window is this clear yes there is a note if we decide if both the out codes are all zeros then the point lies within the clipping window and it will be shown in output okay if it is not all zeros then some points of intersection will be calculated okay that we will just see okay so right now if the end codes for the two end points are all zeros then the point is inside and it is visible otherwise we have to make some calculations okay yeah we will see what calculations are Tomita yeah we take this example we have the clipping window we have the light p1 p2 okay what is the out curve for the point p1 okay you send in your answers all code for p1 most are right answers but there are a few wrong answers I will repeat how we calculate the code for p1 okay we have four bits corresponding to top bottom right bit one is set if the point is below them but is to the left of the left boundary okay now this is this is my right boundary the left boundary is already sure yeah so now for this point p1 it is this is my left this is my left boundary okay and this p1 is not to the left of the left boundary so the code is zero okay now this point this is my right boundary p1 is not to the right of the right boundary so that bit is also zero now p1 is below the bottom boundary so the third bit is set to one now p1 is not above the top boundary so it is set to zero okay so now our code for p1 is 0 1 0 0 yes now calculate the code for p2 yes most of the codes are right yeah it is one it is the point P two is to the left of the left boundary so the biggest one the point P two is not to the right of the right boundary so it is zero the point P two is about the top sorry is not below the bottom boundary so it is zero and it is above the top boundary so it is one the code is 1 0 0 1 1 0 0 1 is this clear it is 1 0 0 1 ok yeah next what do we do we see that both the end codes are not all zeros ok so we have to do some more calculations ok what is the kind of calculation that we do ok we take in any order in our case say we take in the order of we take first the left boundary then we take the right boundary then we take the bottom boundary and then we take the top boundary okay so first we check if the left boundary makes us it okay if we are going by this order the order can be anything okay if we are going in this order we first check if the left boundary bits of it sit okay now for p1 when you take the left boundary bit is 0 okay whereas for p2 the left boundary bit is 1 so that means p2 is lying to the left of the left boundary okay we have to truncate this line okay or we have to click this line to the left boundary okay we are not bothered about points lying outside the boundary okay so we will push this point p2 to the left boundary okay say this feels to - how do you get this so we have to calculate this point of intersection okay so we will click this line p1 p2 to p1 p2 - okay what is p2 - the point of intersection with the left boundary why are we taking the left boundary because we are checking that's a bit one the left boundary bit is set to one okay so we are taking the point of intersection with respect to the left boundary we will truncate this line which is outside the boundary and we will consider the line only from p1 to p2 - Anna so we are finding the point of intersection p2 - and then we will consider the line only from p1 - we do - is this clear okay fine some people have not understood some of understood yeah I will repeat it now bill I am taking the two outcodes the out code of P 1 is 0 1 is 0 0 the out core of P 2 is 1 0 0 1 ok now I am going in the order the left boundary right boundary the bottom boundary and the top of it ok so first I am considering the left boundary ok now this left boundary bet is picked one and for P 1 it is 0 ok there are four feet to eat this one that is this okay so what I do is I find the point of intersection for the line with respect to the left boundary ok since the biggest one that means this point is lying to the left of the left boundary so I might truncate this line up to the left boundary so I find the point of intersection with the left boundary say that point is P 2 dash ok so now I will consider the line from P 1 to P 2 dash only okay so P 2 dash I have fun and I will truncate the line up to P 2 dash okay so I will clip out this line my line will be from P 1 to P 2 dash only is this clear yes okay now I find out since I have removed this fact now I need to find out the out code for P 2 dash what is the out code for P 2 - okay now P 2 dash if I consider it is not to the left of the left boundary it is on the left boundary it is not to the left of the left boundary and so the bit will be set to 0 okay now bit oneness it is not to the right of the right boundary so again it is 0 okay now this point is not below the bottom boundary so it is zero this point is above the top boundary so it is 1 so the out code for p2 dash is one zero zero zero is this clear yes okay I said we are following this order left boundary right boundary bottom boundary and then the top boundary okay now so left boundary we have finished next we checked with the right bundle okay right boundary bit this this the second bit okay you find that for P 1 into 0 for P 2 also it is 0 that means both the endpoints are not lying to the right of the right boundary they are within the boundary limits okay so we don't do anything next we check the third bit okay that is for the bottom boundary okay now here for P 1 it is 1 for P 1 it is 1 whereas for P 2 it is 0 that means P 1 is lying below the bottom boundary whereas P 2 is not lying below the bottom okay what do we do we clip this to the bottom boundary that means we find the point of intersection between for this line P 1 to P 2 dash and the bottom boundary that is this point we find out okay say that is P 1 dash okay and we remove out this from the line that is we consider the line only from P 1 dash 2 P 2 dash is this clear now what is the code for p1 - code for p1 - yeah it is all zeroes in considering the clipping okay we are considering the left boundary right boundary bottom boundary and the top okay we have taken the left boundary we have clipped it what right boundary we saw that both are zeros now we are considering the bottom boundary okay now since this p1 is below the bottom boundary we have clipped it to p1 - okay and now we have the line from p1 - - we do - yeah now again we find the code for p1 - it is all zeros ok now again so our consideration is we are seeing first the left boundary we have checked right boundary we have checked then bottom boundary we have checked now we have to consider the top boundary okay now the code for the top boundary is bit four and that is zero whereas for p2 - this one that means P 1 dash is not above the top boundary whereas P 2 dashes above the top boundary ok so what do we do now we have to find the point of intersection between p1 - p2 - and the top boundary okay that is this point we find out say it is p2 they just feed to double - we find out that point and we will consider the we will clip out from p2 Double Dash to p1 - p2 - we will consider the line only from p1 - to - Debbie - okay now what is the code for P - double - yeah P - double - it is again all zeros okay so now we see that the out codes for P 1 Double Dash is 0 0 0 0 and for P 2 Double Dash is also all zeros they already see that if it is if both a and out codes of both the end points are 0 0 0 0 then the line is visible so in the output we draw this line from P 1 - 2 P 2 Double Dash is this clear what we have done okay yeah we'll see another example so what we did was p1 p1 p1 p2 was our original points that was given ok we found out coats ok then we found that we both are not all zeros so that means a part of the line is inside a part of the line is outside okay now the means they have to do some calculations what we did was we found we started in the order left boundary right boundary bottom boundary and then the top boundary okay the left boundary when we checked p1 is yeah p1 is not to the left of the left boundary whereas p2 is to the left of the left boundary by this one okay so be clipped P you've got a p2 to p2 - so we considered the line only from p2 - to p1 okay it's this line then what we found was we trade against the right boundary ok both the endpoints were inside the right boundary so nothing to be done then we checked with respect to the bottom boundary p1 is below the bottom boundary so we clipped it to p1 - so now we considered the line from p1 - two three - - then again we checked with respect to the top boundary we found that p1 - is not above the top boundary whereas p2 - was above the top boundary and so again we clipped it to p2 double dash that is we considered the line from p1 - p2 Double Dash the entire line is visible and we are doing it now the next example we see is this p3 p4 okay what are the core for p3 and p4 ok calculate the outcodes for p3 and p4 yeah you can calculate the outputs for p3 and p4 and send in the shot yes 4p3 it is 0 1 0 1 4 p 4 it is 0 1 0 0 okay again we take the same order we are first considering the left boundary right boundary the bottom boundary and the top okay so when we see the left boundary okay this is P 4 is 0 whereas P 3 the bit is 1 okay so we clip P 3 to this point P 3 - and this we find the point of intersection with the left boundary okay now what is the code for P 3 - 0 1 0 0 right and we will keep out this part we will have only from P 3 P 3 - 2 P 4 ok we have P 3 - the code is this ok now again we check we have checked the left boundary right boundary when we see it is all zeroes so no problem next we see the right boundary ok that is the third vector third bit is 1 for both the cases V 3 and P 4 that means the entire both the points are falling below the bottom boundary ok so the entire line will not be visible and our output will be like this that is the entire line will not be see okay is this clear yes so this will be down but nothing will be see yeah next what we have to do is how do we determine the boundary intersection for a line segment that is you have this line X naught y naught and this is x and y and you have this as the left boundary okay or in general I will take this as the the equation to this line as y equal to y equal to MX plus C how do I find the point of intersection between this line y equal to MX plus C and this line whose endpoints are given by X naught y naught x and y n okay I substitute X naught Y naught into this equation y equal to MX plus C what do I get Y not equal to M X naught plus C okay or C equal to Y naught minus M X naught okay I substitute this in the first equation so I get y equal to MX plus y naught minus M X naught or this is equal to Y naught plus M into X minus X naught I am taking em common here so I get y equal to Y naught plus M into X minus X naught is this clear yes yes what is the value of M M is the slope of the line okay so em em em would be given by Y n minus y naught divided by X n minus X naught okay now I substitute this value in the previous equation M equal to Y and minus y naught by X and minus X naught now if I substitute this value here then I will get X equal to X naught plus y minus y naught by M right yes [Music] I have y equal to y naught plus M into X minus X naught okay or y equal to Y naught plus y and minus y naught divided by X and minus X naught once again I have y equal to y naught plus M into X minus X naught okay M into X minus X not equal to Y minus y naught M X equal to Y minus y naught plus n into X naught I am taking this minus M X naught that side okay or X is equal to X naught plus y minus y naught divided by m MX not I am taking first divided by M plus y minus y naught by M okay is this clear yes ma'am sorry for interrupting - time up yeah yeah I'm just finishing this okay so these will be the equations y equal to y naught plus M just note down these two equations y equal to Y naught plus M into X minus X naught and X is equal to X naught plus y minus y naught by okay these are the equations that we will use for the calculation of the intersection points 
GNCDrUbunqY,22,,2020-03-22T15:46:54Z,Lecture video 17CS62 Module 3 Polygon clipping SharonRoji,https://i.ytimg.com/vi/GNCDrUbunqY/hqdefault.jpg,Sairam CS Video,PT24M31S,false,140,3,0,0,0,hi everyone today we'll discuss the topic polygon clipping first let's see what is clipping clipping is a procedure that identifies the portion of an image is either inside or outside the first specified region this specified region will say as clipping window we could design our clipping window in any size any shape and in any orientation right the portion of the image that is inside the clipping window will be seen in your output now we know the feature of one of the feature of a polygon is it should have a closed loop it should have a closed loop now we'll be using Sutherland hutchman clipping algorithm to clip a polygon if we take this algorithm the in this algorithm we have to send a pair of vertices through a series of clippers the clip for clippers will be having left clipper right bottom and top this Clippers is nothing but left people means left side of my are left boundary of my clipping window right clipper is right boundary of my clipping window bottom clipper is bottom boundary of my clipping window and tapas top boundary of my clipping window right and in this algorithm we have four cases case 1 right this is my clipping window right the edge of the as I said this algorithm sends a pair of vertices through a series of clippers so I have a pair of vertices right and the starting vertex is outside the clipping window and ending vertex is inside the clipping window in this case my output list vertices will have the intersection point and the end point right now I have to name this intersection point how to name this intersection point starting vertex name - starting vertex name - so say v1 - B - in case one so what is case 1 starting vertex is outside the clipping window and ending vertex is inside the clipping window in this case I have to save my intersection point and the end vertex say v1 - can be - how to name the intersection point starting vertex name - starting vertex name is v1 so it should be we want - now case - I have a clipping window both the vertices are inside my clipping window in this case say the N vertex alone in vertex s v2 now case 3 clipping window right starting vertex is inside the clipping window and ending vertex is outside the clipping window in this case I have to save the intersection point alone that is save so how to name the intersection point it is starting vertex name - so it should be b1 - next case for case for both the vertices or outside the clipping window in this case say nothing right no now we have studied this for cases will use these cases to solve a given problem so I have a polygon and have a polygon this polygon I have to keep I have to clip this polygon right as you know this polygon it should pass through four Clippers right so first I take my left keeper left keeper is nothing but my left boundary clipping right so first tape edge first edge V 1 V 2 right so we 1 V 2 so consider the left boundary alone consider the left boundary alone right and you have to check whether the both the vertices is inside to left boundary or outside so when you take when you consider the left boundary take this but this vertex one vertex oneness inside left boundary how I can sail inside left boundary extend this left boundary right so B 1 is inside left boundary so we do this outside right so which is my case inside inside outside that is nothing but K is 3 in case 3 what should I do I have to say D in the section point alone I have to say the intersection point so how to name this intersection point vertex 1 - right so save intersection point now you know this vertex 1 is the very first vertex of this given polygon so I cannot miss this very first vertex so I save the first vertex right so I have to say b1 b1 - next year yet p2 p3 right now we are dealing with left boundary clipping right so b3 is inside left boundary and v2 is how to say they left the boundary in this Y H V 2 V 3 which is the starting vertex V 2 is the starting vertex V 3 is the ending vertex and if you see this starting vertex is outside and ending vertex is inside starting vertex outside ending vertex inside belongs to case 1 in case 1 what I have to do I have to find the intersection point right and I have to see the intersection point and the end point so now how to name this intersection point starting vertex - here this for this yet starting vertex is v2 so it should be v2 - v3 so it is v2 - v3 now the next year just v3 v4 h v3 v4 consider this left boundary to this left boundary both the vertex v3 and v4 are inside right v3 and we said or inside - left boundary so both are in sides both are inside in this case I have to save the N n vertex are known so which is the N vertex say V for next edge yet before we file v4 v5 again both the vertexes are inside to my left boundary so I have to say say we find next step yeah we fight we once we fight we won again both the vertex are inside to my left boundary so I have to save the endpoint so endpoint us we won right now I got considered all the cases all the edges now seeing this seeing this I have to draw my output for left boundary clipping so we won we won - we won we won - next is b2 - v3 v4 v5 v 1 right this is the output for my left boundary clipping now keeping this polygon I have to do right boundary right boundary clipping right boundary clipping right now here which is this first edge V 1 V 1 - eh V 1 V 1 - we won't be one - now we are doing right boundary clipping right now I have to check whether both the vertex right on inside to my right boundary or outside to my right boundary right so when I extend this right be oneness inside to my right boundary and V 1 dash is also inside to my right boundary actually this belongs to case - right case - I have to save my in vertex among this yet which is the N vertex V 1 - but this V 1 is the very first vertex I cannot miss it so I'll be saving V 1 also right next edge to be sb1 - me too - we won - me too - I have to consider this edge we won - we took - right - consider this right boundary consider this right boundary - this right boundary right both this add a vertex B one - and we toda spot inside right so which one I have to say I have to say the N vertex which is Vito - next up eh v3 v4 right V 3 V 4 V 1 V 1 dash V 1 dash V 2 - sorry it is V 2 - me too - b3 b2 - v3 right so again in this case both the vertex are inside - my right boundary so I have to save my end vertex which is b3 right next edges yet v4 v5 right V 4 V 2 - V 3 V 3 V 4 again V 3 V 4 both the vertex are inside - my right boundary so I have to save my in vertex n vertex is V 4 so I say we for next next year just before be fine yet before we fight right before we fight again both the vertex are inside - my right boundary so I have to save my in vertex which is we fine next it is yet be fine V 1 V 5 V 1 again both the vertex are inside my right boundary so I have to save my end vertex which is b1 right now keeping this I have to draw the output right for my right boundary clipping so take first vertex it should be v1 we won - we won we won - next it is veto - v3 before we fight b1 right and now this polygon will be the input for my bottom boundary clipping right bottom boundary clipping boundary clipping to this bottom boundary clipping I have to consider this polygon so what will be my first th of v1 v1 - so yeah V 1 V 1 dash V 1 V 1 - now this is my clipper bottom boundary and now check whether both the edges are inside - my bottom boundary or outside of my bottom boundary right both the edges are outside of my bottom boundary so what I have to do you both the vertex are outside of my bottom boundary I should not say anything so here it is safe nothing I said once again now we are doing bottom boundary clipping right I have taken the first yet v1 v1 - what I have to do I have to check whether both the vertices are inside - my bottom boundary or outside - my bottom border this area is inside - my bottom boundary this is outside of my bottom boundary so both the vertices are outside of my bottom boundary so what should I do I should not say anything right what is the next eh v1 - me too - right yet we won - me too - we won - we do thus again if you check b1 dashes outside bottom boundary and B two dashes inside bottom boundary so he belongs to which case outside outside and inside right starting vertex is outside and ending vertex is inside in this case what should I do I have to find the intersection point I have to find the intersection point I have to save the intersection point and the end point now I have to name this intersection point how will I name this intersection point starting vertex - and which is my starting vertex v1 - we won - is my starting vertex so to name this intersection point it is starting vertex - so it becomes double dashed now I have to say V 1 Double Dash v2 - say V 1 Double Dash v2 - right now the next edges b2 - right v3 v2 - eh v2 - v3 right B - - with it now both this vertex are inside - my bottom boundary or inside - my bottom boundary right so I have to save the endpoint end vertex that is safe v3 next it is next year just yet b3 v4 h v3 v4 h v3 v4 again both this vertices are inside - my bottom boundary right this is my bottom boundary both are inside - my bottom boundary if both are inside - my bottom boundary I have to say the N vertex so say before next it is next year just before we fight yet before we fight again here also both the word take start inside to my bottom boundary so I have to save the N vertex which is we fight next next edges we fight we won yet we fight we won right so again here this starting vertex for this edge starting vertex is V Phi and ending vertex is V 1 starting vertex is inside and ending vertex is outside starting vertex inside ending vertex outside so what I have to say I have to save this intersection point right now I have to find the intersection point if this is my intersection point now how to name this intersection point starting vertex - so it is save b5 - now seeing this I have to draw the output for my bottom boundary clipping I have drawn first it is b1 double dash V 1 Double Dash be - right next V 3 V 4 V 5 V Phi - now keeping this as my output I have to do top boundary clipping right top boundary top boundary clipping so in top boundary clipping what should be my first edge V 1 Double Dash we do - eh we want double dash V 2 - now coming to this V 1 Double Dash we - - this is my top boundary this region is outside of my top boundary and this region is inside of my top boundary right now both the vertexes are inside of my top boundary so if both the vertices are in two of my top border what should I do I have to save the end vertex right I have to save the end vertex say which is my end vertex B - wait - - but here this V 1 Double Dash is the very first vertex right very first vertex so I cannot miss that so I should say that also right and the next were Texas B 2 - b 3 right sorry next eh V 2 dashed b3 b2 - V 3 now you know this region is inside of my top boundary in this region is outside of my top boundary again both of it Isis are inside of my top boundary so what should I do I have to save my invert X save my n vertex right so Enver Texas save B 3 right next edges V 3 V 4 eh eh V 3 V 4 right V 3 V 4 again if you see this this vertex is inside of my top boundary this is outside of my top boundary right so inside outside right if it is inside outside I have to find this intersection point right so how to name this intersection point in this Y H which is the starting vertex V 3 so V 3 - always intersection point is starting vertex - and here starting vertex is inside and ending vertex is outside so I have to say the intersection point alone Thanks so save me 3 - right next adjust v4 v5 h v4 v5 v 4v files weight to be 4 V 5 again here starting vertex is outside ending where Texas inside starting vertex is outside ending vertex is inside outside inside what should I say see if the intersection point and end point right so here I have to calculate the intersection point so in this state which is the starting vertex V for so intersection point will be me for - what should I say me for - we fight right save B for - b5 right and what is the last hitch we fight we fight - right eh-eh be fight we fight - right we fight we fight - again both the vertices are inside - my top boundary but inside - my top boundary so what should I say I should save the end vertex a lot so save me if I - right now the last edge is V Phi dash V 1 Double Dash yet we fight - V 1 Double Dash coming to this two vertices right both the vertices are inside - my top boundary this region is inside top boundary this is outside of my top bond again so both this vertices are inside of my top boundary so what should I say save the N vertex a lot save b1 double - now keeping these vertices I have to draw my output right V 1 Double Dash P 2 dash V 3 V 3 - next is v4 - we fight next is V Phi Dash and V 1 Double now this is my clipped polygon right thank you 
d_oZ3ec9a-o,27,"This is the 4th  Online CSE class conducted on May 8th, 2020 on Computer Graphics and Visualization which is Module 3 from the CSE 6th Semester. The content is part of the VTU Computer Science Syllabus. The  CSE class was conducted by our Professor Priyadarshini. The Class captured the detailed explanation on 3D Rotation and also solved the respective calculation .

Module 3 | CSE 6th SEM |Computer Graphics | VTU Syllabus | CiTech",2020-05-14T15:23:12Z,"General 3D Rotation - Rotation around an arbitrary axis, CSE Online Classes by CIT",https://i.ytimg.com/vi/d_oZ3ec9a-o/hqdefault.jpg,Dept of CSE- Cambridge Inst of Tech,PT52M7S,false,30,2,0,0,0,[Music] good morning everybody this is priyadarshini from cambridge instead of technology uh today i'm dealing with the topic general 3d rotation which comes in a module 3 of video syllabus in a previous video we have just learned the first scenario of general 3d rotation um that's nothing but a rotation about around an axis parallel to x-axis so we have an arbitrary axis or a rotation axis which we are seeing in a diagram uh that is this a dotted uh red color line which is parallel to any one of this coordinate axis so the things are very easy as i have described in the last class but today's topic is rotation about an arbitrary axis what happens with respect to the arbitrary axis so what do you mean by arbitrary axis arbitrary axis is we have a rotation axis or i call it as the arbitrary axis which is not parallel to any one of the axis like so we have a three axis like this we are taking the right hand rule from your end if you see the z-axis is towards you it is which is a right hand coordinate system uh the green color is your x-axis and blue color is your y-axis the arbitrary axis will not be parallel to any of these three axis it will not be parallel to any of these three axis if when there is no parallel then what is the scenario what are the steps we take up so my next steps talks about the below figure shows the five we will see a five different steps of transformation obtaining a composite matrix for rotation about an arbitrary axis with the rotation axis projected on these z axis so this axis as an arbitrary axis i have an object around this an arbitrage axis which has to be rotated but i don't have a matrix for this arbitrary axis either i need to bring this upper axis onto the x-axis or onto the y-axis or onto the z-axis on any one axis as i should bring it so that is what we have we will see so currently here we are seeing that for our convenient way we will bring our axis i mean rotation axis we will consider that we will rotate around the z axis because it is our convenient way just you can take this or this by default any rotation will happen with respect to z axis that's why we have taken this and our 2d also happens with respect to that making sun as 0 in the 2d so what are the five steps we will take up the first step is actually uh we have an arbitrary axis which is actually um not parallel this is my first initial position which is not parallel you can see that the red dotted is an arbitrary axis which is not parallel to any of the uh coordinate axis now what is misstep one says please when you have this uh arbitrary axis my black color pen is an arbitrary axis please because my rotation any kind of a rotation matrix which i have it is with respect to the origin the rotation matrix operates with respect to the origin so it is my duty to see to that all arbitrary axis should be pulled back to the origin that is my first step i'm doing so when i'm pulling back what i'm doing i'm translating i'm just pulling my down point if i consider this point is p2 and this down point is p1 then as shown in the figure i am just pulling it was like this now i'm pulling like this my p1 to the origin that's my step one step two says please rotate once if it is in the origin c to that you bring this axis onto the z axis fine to bring on to the z axis in one step i can't bring it i have two more steps here to bring on to the z-axis i have two more steps here okay let me assume we bought to the z-axis because i am rotating with respect to the z-axis next step 3 says once you bring back to the z-axis what we are doing we are rotating with respect to the the object is rotating with respect to the z-axis because i am placing my arbitrary axis on the z-axis it is on the z-axis now i start rotating once the rotation is done my job is done i have rotated the object so my job is go back to your previous position that i have that's nothing but my rotation inverse once you're here translate back to your original position with the object so i'm done with my rotation with respect to the arbitrary axis so what i'm doing translate rotate so that it lies onto the z axis then rotate inverse translate inverse is it clear so now in this step which is a step in the step two rotation onto the z axis i have two steps to be followed which are the two steps step number one that is a i'll say you need to rotate with respect to the x-axis that's my first step b rotate with respect to the y-axis okay rotate with respect to the x-axis then i will come to the z-axis then i will achieve after these two steps i will achieve my this step or i will achieve my this step where i could see my arbitrary axis is lying on the z-axis how we will do that so this is an arbitrary axis right when you're rotating as we have already seen in our previous video it is like this your thumb like this and this rotation is goes like this and this rotation goes like this so if my arbitrary axis is like this my x-axis will rotate like this okay so now i am rotating with respect to x axis not completely one-fourth so that this arbitrary axis lies on the plane of x and z plane you are seeing now on the plane of x and sat play once it is on the x and z plane i am rotating this with respect to the y axis around the y axis and bringing back this arbitrary axis sorry bringing back this arbitrary axis onto the z axis so this is my two rotation to bring this uh arbitrary axis onto the z axis now we will see what happens in our derivation part fine so this is all so hope you have understood this all right so we will go to the next point we have a step 5 steps as we already have understood the five step translate rotate perform in actual rotation this is with respect to z axis we'll rotate with respect to z axis and i'll take an inverse of both so our convenient way of rota for rotation is z-axis we'll choose a z-axis rotation so now uh before uh starting let me take a definition for a vector fine so what is that vector we assume she what was our vector this is my set x y so our vector position was this all right so this is our vector position where the point here is p2 and the other point is p one neither i can define my vector based on the one point or i can define with respect to the two parts okay with the help of the concept direction science so here let me explain the vector with respect to the two points so i have taken with respect to the two point here what is a vector before we start what is a vector which has both magnitude and direction direction we have already given counter clockwise direction it takes and this is my direction it's given what can be the magnitude magnitude is nothing but the distance between these two point end points is talks about the magnitude right so so let us give a basic definitions for a vector here so vector v if i say p 2 minus p 1 so direction i really can't give any calculation or explanation so magnitude is p to minus direction we have already assumed uh magnitude is p2 minus p1 i will get the actual distance what will be the p2 each and every point of p2 gives me that distance with respect to each coordinate right distance with respect to x distance with respect to z distance with respect to y so each point will have x y z distances so i need to take a difference with respect to each and every coordinate so my actual vector will become x 2 minus x 1 i can define like this y two minus y one and z two minus seven five i'll make now one more assumption that sorry before that i'll make an one more assumption saying that uh i'll consider this vector as a unit vector fine the unit rotation axis unit rotation axis vector okay what vector it is rotation axis because we assume this xyz is also our vectors so in order to avoid the confusion we are telling rotation axis vector i specified that as a u okay the vector name i specified as a u so how will i define that now how will i define u is equal to v divided by magnitude of v this is my unit vector definition fine which i can also say it as an abc what is your abc your abc is your direction cosines i call it as direction cosines so abc is our direction cosine what do you mean by direction cosine direction or a distance between each and every coordinate axis x axis direction cosine is a y b uh y axis direction cosine is b z axis direction cosine is c so that means this unit vector has moved how long with respect to x axis with respect to y axis and with respect to z axis right which i call it as the direction cosines now let me define okay that's overlapped let me just define um a direction cosines the formula for the direction cosines okay the formula for the direction cosines are a is equal to x2 minus x 1 divided by vector v if i talk it as a unit vector obviously my magnitude v will become as 1 right but let's write like this b is equal to so that means the distance between the distance in the this is x 1 the distance in the x axis is nothing but your a b is equal to y 2 minus y 1 set to minus z1 so actually our magnitude v is nothing but r it is one so finally my definition will be only this much but we'll write because as it is a unit vector will become one so a is equal to the distance with respect to x axis b is equal to distance with respect to y axis c is equal to distance with respect to z axis how much it has moved which i call it as a direction cosines so hope you have understood this i'll move to the next one while rotating about an arbitrary axis what is the first step you will take it the first step is nothing but a translation matrix so what will be my translation matrix then translation matrix will be i am actually moving my point which is my arbitrary as this right i am moving this x one point where okay x one or here wherever it is you will move this point where here this remains as it is so which point you will translate your oh sorry point one this is point one which will have x one y one z one okay point one so that's why i am moving only my point one x one y one i said one ah next we formulate the transformation that will put the rotation axis onto the z axis so what is my next calculation the rotation axis which will put on to the z axis so we already see that how do we coordinate my rotation axis onto the z axis by having a two steps rotate around i have a two step so that is nothing but rotate around a z axis sorry x axis and rotation around the y axis so i have so now i have renamed my vector point as u okay now this is my u here okay this is p2 and this was p1 i renamed that vector as u you but these two rotations are illustrated in the below figure for one possible orientation of vector u see now here now this is a rotation with respect to x axis the first step this is rotation with respect to y axis fine to bring to the z axis we need two rotation this two steps so this is step one and this is step two which i have told here okay so you can see here now i'll assume now i think it is clear this was my u is my initial distance between the plane x and y plane now the u axis i will bring back to the x and z plane so it will bring to the x and z plane i will rename the uh angle as alpha my angle i have renamed here as alpha so i need to consider the angle alpha i need to calculate the angle alpha here once this angle is on the exact plane now i need to move this vector onto the z axis now see here this is what my moment you can see this is what what is the rotation what i named it as beta so in while rotating with respect to y axis i need to calculate the angle beta if these two if i get it then obviously my rotation is done so this is what my goal now so now we will go to the first step i'll write a diagram here okay now i have taken for the convenient way i have take taken x this is why i've just rotated the axis is that if that axis goes up then y axis will come to the right and zx x axis will come towards you you can use your right hand rule and then start rotating the same three direction rotate your z axis on top and see which one will come towards you that is that will x axis will come towards you so i've taken this axis now for this axis i will draw the vector this vector we have already renamed it as u for the line op op is a vector u now okay this is how it is correction cosines for op we have renamed it as a b c a traversing with respect to x axis b traversing with respect to y axis c traversing i mean traversing not a traversing a distance between a distance in the z axis how much distance it has moved on the z axis okay so this is my direction cosines what is abc it is a direction cosines fine now let me plot now i will plot this completely on the y z axis to get my my main goal is to get what alpha angle alpha fine let me take this now let me take this and first let me project on to the this so what actually i did is op i projected on the xyz plane right opi this diagonal what you can see here this is actually a op which i placed on the xy place but actually my goal is to place on the wiser in the same way okay i think now you can able to see properly now op i have projected on the yz plane okay the y z plane now here i will write an angle this is my alpha angle which i need to get op when i project on to the yz plane before that let me mention all the uh abc with respect to the op op how much it has moved towards op a will be this b will be which one see your y-axis where is your y-axis which is parallel to the y-axis this is a parallel to the y-axis see your z-axis which point is actually parallel to the z-axis this is c i will write in the same color this is a this is b and this is c okay that is my direction cosines with respect to op with respect to ob now if i project op on to the y set plane if i project op onto the y z plane so my which is that that is a d this dotted line i'll mix with black this dotted line which i rename it as o dash which i rename it as o dash so then let me as i have assumed this as a vector let me take a direction cosines what will be the direction cosine for this b or u dash check the direction cosine for the u dash what will be the direction cosine for the u dash u dash is not lying on the x it will never come on the x because it is a completely on the y z plane which is completely not on the x plane so x will become zero direction cosines of dye x will become 0 and then and in the other way if i tell this op is actually trying to rotate with respect to x axis obviously x axis will become constant so i will not have any kind of a moment with respect to x axis so x axis is equal to 0 and what is y axis is b what is z axis it is c the direction cosines with respect to u dash on u dash is o sorry 0 this is 0 please note it is not o it is 0 okay 0 b c for d so what is b then i have named the d as the distance of or the length of the u dash i've just taken d just for the length of the u dash because a vector gives a direction and magnitude i need a magnitude which is a which i need the length of the u dash now here which is that angle i need to calculate the angle what i need to calculate is alpha here okay hope you have understood this alpha how is this alpha if i take the alpha then if i get the alpha then op if i use with respect to alpha angle then op will come on the exact plane where is my exact plane my exit plane is here it will come on this plane it will come on this plane fine so now you understood about the alpha alpha calculation so now directly start uh calculating the alpha so now what did i say now o p is my vector u op is my vector u which i have to rotate about that axis on the on the axis z axis fine so for that i needed two rotations right so now what is my now first rotation i will do with respect to the x axis this is what my calculating the alpha for calculating the alpha we have to determine what is the alpha angle what is alpha angle now this we have done project the unit vector u along o p into the y z plane we have projected so now we have already seen bc as a direction cosines now considering the right angle triangle so what will be the angle now so let me write it here i have taken only this part now i'll take only this part which part angle triangle that's nothing but this i've written it as o p which is my sorry sorry it is not o p it is d okay it is d uh which is nothing but your u dash this is b uh c c c actually if it projects parallely here c was here okay so this parallely will become c now i'm not calculating so this is a right angle triangle my angle is alpha here considering this what i will calculate cos alpha and sine alpha because i need a rotation i rotation axis matrix transformation matrix i need with respect to the x axis so for that what i need cos alpha sine alpha fine will start here calculating is assume this is a right angle this is alpha this is b this is c and this is b i need to calculate what because before uh calculating cos alpha actually i need to calculate cos alpha sine alpha before that let me calculate the right angle triangle formula which is nothing but a d square is equal to b square plus c square so i have calculate the value for b because i need for the future use which is a square root of b square plus c square why have calculated d because d is uh magnitude i need the value of d no magnitude of u double dash now here i can take this as u double dash vector u so now i need to calculate what angle for calculating the angle what i need to do we establish a transformation matrix for rotation around the x-axis by determining the values of sine and cosine of the rotation angle necessary to get op on to the exit plane my major your role is to place onto the x plane right so now what is a cos alpha cos alpha what okay let me calculate here itself what is a cos alpha cos alpha is adjacent by hypotenuse which is your adjacent c divided by hypotenuses d sine alpha is opposite by hypotenuse what is opposite opposite is b divided by d so c by d and b by d is my cos alpha and sine alpha hope you have understood so what is a cos alpha cos alpha is equal to c by d and sine alpha is equal to and sine alpha is equal to b by d if we want an alpha d we have already calculated right where d is equal to square root of d square plus c square we have already got that d if we want we can also calculate alpha but calculating like this is not my a perfect one we need to use both b square plus c square [Music] i have elaborated the d so we can calculate alpha like this also but if you want to get a perfect angle we have to use both costs and sign both to detect angle it has a different methods in mathematics so now that we determine the values of cos alpha and sine alpha in terms of components of vector mu right we can set up the matrix elements of rotation of this vector about the x axis and into the exit plane now what i need i need a rotation transformation matrix with respect to the x-axis with respect to the x-axis that's my main motto with respect to the x-axis now what will be my rotation with respect to please go back and check your rotation with respect to the x-axis what is the formula this is a rotation with respect to x axis later i want rotation with respect to y axis please note down somewhere on your note so wherever i have cos theta i am replacing the formula of cos alpha whenever i have sine theta i am replacing the sine alpha is it clear these two you please note down i am replacing the formula of cos alpha sine alpha here i will just write here rotation with respect to x axis is and just write right here rotation with respect to x axis 1 0 0 0 0 c by d minus b by d 0 0 b by d c by d 0 0 0 0 1 so oh sorry this is nothing but your cos theta minus sine theta sine theta cos theta this is with respect to x axis now for alpha for alpha you just replace it one zero zero zero zero what is cos alpha c by d right cos theta c by d so in this place i'll write c by d sine alpha is b by d it is minus sine so minus b by d next 0 0 sine theta b by d cos theta c by d 0 0 0 0 1 this is with respect to x axis find the same way now it has come to the second step that it has come to the uh on to it has to now we i have got my rotation here right this is my rotation if i apply this rotation then the op will come on the yeah here the op now will come on the exact plane because i have got alpha i've got the rotation matrix also now i need rotation with respect to the y axis fine now let us see y axis rotation now so that it will come on the z-axis so now i will just write the direction again so this i will write y z x so where the u u dash i've just i'm sorry here it is u dash this is u this will become u dash this will become u double dash i just got confused with the meaning it's a clear op is u d is u dash now a new which is on the x plane i call it as a u double dash hope it's clear for you here i by mistake have written u double dash so now it is for me u double dash that will be here so that is u double dash what is the direction cosine of u double dash x axis now it will become x axis moment because it will ah it will um rotate around y axis right this is x axis okay this will be a this will be a i assume this as b why will i assume this as d because i can't take a old b and c because the moment or the values changes when i rotate with respect to the y axis now i'm rotating with respect to the y axis but here why we are assuming it as d so that means my z axis distance so here y will not come into the picture what will be my direction cosines a y is 0 y is 0 0 i'm writing like this and on this z i'm taking direction cosine as d why i'm taking sd because this u double dash is actually placing on the z axis now when one point the u double dash will actually after [Music] after placing after rotating where the u double dash will come it will come here i have written down it here so that means it is nothing but my distance of that view of that u double dash which always remains it sd i have already calculated in the previous scenario that d is equal to a value the magnitude of b i have already calculated that remains as it is because the vector is same so the vector places on to the z axis i will have the same distance there right same distance x that's why my z direction cosine i will name it as d now which one i have to calculate actually i need to calculate which one this one right this is my angle that i need to calculate but to calculate this it's little difficult theoretically so which one i will calculate i will calculate this fine i will calculate beta and then i will make this as what minus beta then i will get the other angle it is inverse reverse of positive beta is nothing but other angles 360 minus beta is my reverse of that i will get minus beta if as so what i will calculate calculating beta is very easy for me then minus beta the other angle green angle green dot at the angle so what i will do i will calculate the orange color beta first and then the same thing i will make it as a negative it will be easy for me so now we know what is my main goal to calculate beta so let me directly calculate here itself so this is all the theoretical that i have done a u dash and all those things you can read and then start comparing so now which one i will calculate directly here only i will calculate it is like this okay i'll take in black what is an angle now this this and this where this is beta this is u double dash uh what is i'll keep it as u double dash hypothermics a and d okay now which what i have to calculate now i have to calculate cos beta now i'm rotating with respect to y axis while i'm rotating cos beta i sine beta i have to calculate it okay okay this is my explanation here rotation above by beta about y axis now similar to the step of alpha we will calculate beta that is nothing but cosine i sine so let me re rewrite it here it is like this it is not actually right angle this is u double dash this is b this is a okay so what will be my cosine cos cos beta is equal to what is cos beta adjacent by hypotenuse what is that to say d divided by what is hypotenuse u double dash what is u double dash because it is a vector right length of unit vector we have already told it is a unit vector cos beta i can may make it as d divided by u dash is what you you already i have we have may named it as v divided by magnitude of v that is a unit vector this is u so that means that is cos beta is equal to d right i got what is cos beta but we are calculating what we are negating i don't want cos beta i want the other one which is minus beta what is cos minus beta it is positive only cos theta only that is nothing but cos beta which is equals to d only there is no change here now let me go to sine beta sine beta is equal to opposite by hypotenuse that is a divided by u double dash again a divided by length of unit vector that is nothing but a sine beta is a so that is sine minus beta is equal to minus sine beta which is equal to minus a please note it i have got now sine and cos so now sine and cos i got so my transformation matrix transformation matrix for rotation of u double dash about y axis is r y of beta is equal to i have got what is rotation with respect to y how it is and just write it as cos theta 0 minus sine theta okay i'll write here y of beta what is r y of theta it is cos theta 0 minus sine theta 0 0 1 0 0 sine theta 0 0 cos theta 0 0 0 0 1 and this is minus minus sin theta 0 cos theta so here it is plus now let us replace so what is cos theta cos theta is d okay cos theta is d zero sine theta is what minus a 0 next 0 1 0 0 minus sine theta minus a becomes plus a 0 d 0 0 0 0 1 so now we have done with respect to x axis y axis but now we need what is what is next now it has come on to the z axis rotation right now it has placed what is placed our unit vector is placed on the z axis now now once it is placed on a z axis now i have to do the actual rotation right so that is nothing but r z of theta that is nothing but cos theta minus sine theta 0 0 sine theta cos theta 0 0 0 0 1 0 0 0 0 1 this is our actual rotation once the vector u comes and plays on the z axis place all the z axis fine now the last part the last part is what will be our composite matrix what will be our composite matrix because i have this translation rotation inverse all these i have what will be my final rotation matrix how will i start i will start from right to left always which one i did first i did first translation right because now i need to bring back what is my final now i did the rotation here that's all it came onto the z axis i did the rotation after doing rotation what i should do i should bring back everything to the actual back to the position so what is my final rotation i should do translate first after translate what did we do rotation with respect to x axis that is with respect to alpha right multiplied by rotation with respect to y axis with respect to angle beta right x y after x y what did we do this part that is with actual rotation with respect to theta how much you will be asked theta will be or user defined whatever the user wants then what i should do now now i have to go back i have to do inverse of this inverse of this inverse of this to go back to the position so what i will do rotation inverse of y beta inverse i will take rotation inverse of x alpha we will take then i will do translation inverse this is my actual matrix final composite matrix you 
Q4rzG_PhULw,22,"Subject: Computer Science
Paper: Computer graphics and visualization",2021-03-30T11:02:19Z,Composite 2D transformations CS,https://i.ytimg.com/vi/Q4rzG_PhULw/hqdefault.jpg,e-PG Pathshala,PT31M34S,false,2,0,0,0,0,a welcome to the e part sharla lecture series on computer science for postgraduate students ah this is the sixth edition of in the lecture series on computer graphics and visualization so today let us recollect what we have already learnt in this subject and in the last session we talked about transformations the basic transformations the translation rotation and scaling and let us continue the lecture series with the today's session on composite 2d transformations to start with composition is something like you are actually merging up a series of transformations composition is an important aspect of computer graphics so in this composition what we do is we take a series of transformations and we combine them into what is called a composite ok the advantage of having a composite is to ah multiply the initial coordinates get the final coordinates straight away at one stroke so ah having a composite matrix is so advantageous it reduces the number of matrix operations if you recollect we talked about homogeneous transformations and homogeneous coordinates and coordinate system in homogeneous coordinate system any transformation matrix is represented as a three by three matrix so if you recollect the translation matrix the rotation matrix and scaling matrix represented in homogeneous coordinates it has got three coordinates and it is go it is a three by three transformation each is a three by three transformation matrix so what ah we are going to do here is in the real world scenario uh we have more than one transformation that is applied on an object in succession so at a at very high speeds more than one transformation is applied on objects for example if you take the tom and jerry like cartoons if you take say animation movies the famous animation movies so many transformations happen in succession for example a translation happens a rotation happens a kind of shape change happens ah a kind of say reflection happens a kind of what is called a scaling happens so many of the transformations are applied in a succession in succession on the same object so let us see the advantages of these composite transformations so like the fundamental advantage is it reduces the number of matrix operations and another major advantage is ah it avoids intermediate storage so whenever you have to say for example whenever you have ah whenever you make whenever you perform a transformation you store the result in an intermediate storage say for example in a memory storage and again use that for the next transformation and store it store the intermediate result somewhere so till you finally finish all your transformations so then doing so ins instead of doing that here what we are doing is we will be performing a composition of all these transformations and then will be multiply getting a composite matrix multiply the initial coordinates get this final coordinates straight away that is the fundamental advantage so let us look at the first example that talks about a composite transformation the example is about two successive translations assume that you have to perform two successive translations that is a translation and again a translation so let t one be the first translation with the components t x one t y one let t two be the next translation t y t x two and t y two so now a point p is ah there on which these two translations are applied in succession so now what will be the end result or what will be the n coordinates for that what we do is ah you can see here as the solution starts with first t one is applied on p as t one t x one t y one multiplied with the point p so we know that in homogeneous coordinate system a point p is represented as x comma y comma one ok so ah the translation matrix t one whose components are t x one and t y one multiplied with the matrix p ah with the point p which is a matrix gives another three by one matrix ok so what we did is ah we what we wanted to do now is we have to apply t two again on the result so that is see this curly braces here in the second step p dashed is equal to the final coordinates are ah t 2 t x 2 t y 2 multiplied with t 1 t x 1 t y 1 multiplied with p please focus on the curly braces the red ones the red ones indicate that first t one is applied on p and on the result so which is a three by one matrix we are applying t two and the final result is stored in p dashed now if you see this ah step here ah that is we are writing the same equation but with just the braces ah alternatively placed you see this curly braces here the red ones particularly in the previous slide we have the red curly braces for the t one into p for t one into p and now we have just altered the curly braces so that p is independent and kept aside and t 2 and t 1 are multiplied and the resultant is what we what is called the composite matrix and first do this multiplication then multiply the resultant with p straight away get the p dashed so the essence of this is to perform a series of transformations basically here translations and the resultant is actually a composite transformation matrix and that is multiplied with the p to get p dashed so if you see the ah matrix equivalents for this notation p dash t is x dash y dash one in homogeneous coordinates is equal to one zero t x two one zero one t y two and zero zero one multiplied with another matrix t one one zero t x one zero one t y one and zero zero one multiplied with the point x y one keep the point x y one aside just multiply these two transformation matrices what you get the what you get is the composite matrix the composite matrix is just exactly looking similar to that of a translation matrix now with the third column having two terms which are the addition of the two x components and addition of two y components so basically ah applying two translations in succession is equivalent to shifting the object twice that is applying t t1 first and then t2 next so the object is at a new position so two successive translations are additive so that is the conclusion so coming to two successive rotations ah imagine you are performing a rotation on an object first and then applying another rotation on the resultant object so that is first it is rotated and then again it is rotated by some other angle let theta one be the rotation angle for the first rotation let theta two be the rotation angle for the consecutive second rotation so assuming all these rotations are positive that is counter clockwise rotations as we know very well that counter clockwise rotations are positive clockwise rotations are negative so if you remember the standard rotation matrix so we have converted this notation into equivalent matrix x dash y dash 1 is equal to r two theta two ah cos theta twos minus sin theta two sin theta two cos theta two zero zero one and zero zero one and similarly cos theta one minus sin theta one sin theta one cos theta one zero zero one and zero zero one when we multiply these two the resultant is a composite rotation matrix and if you observe this carefully ah the angles are actually added up here theta two plus theta one theta two plus theta one and so on so the ah resultant composite matrix is actually additive so we can conclude that two successive rotations are actually additive so in the previous case we did two successive translations they are also additive and two successive rotations are also additive and one important thing is that you should observe this reversal of transformations that are applied first it is r one then it is r two when you are writing them in an order it is r two into r one into p so please understand that ah because we are performing first r 1 on p and then r 2 on p so r 2 into r 1 into p so that is the sequence so similarly that if we look at two successive scaling operations if we want to perform that means you are scaling an object first and on the resultant scaled object you are performing again another scaling say s two so s two and s one so ah this should be actually s two this is s one sorry this is again this has come as s two can correct this as s one so ah let s one s x one s y one be the scaling matrix first applied on p and on the resultant we are applying s two so this can be written as s two into s one into p so i can make the correction here this is s one ok so s x two zero zero zero s y two zero zero zero one s x one zero zero zero s by one zero zero zero one into x y one ah just keep this aside the point aside multiply the two transformation matrices what you get is a composite but unlike the previous cases the composite transformation matrix for two successive scaling scaling operations is actually multiplicative that means the two scaling factors actually get multiplied so the resultant is a scaling matrix whose coefficients are whose values are multiplicative scaling values are multiplicating so that is about basic scaling of basic operations that we have performed two successive translations two successive rotations and two successive scaling operations we have performed but in the in the real scenario we generally do a series of transformations and there are they are generally more in number ok so let us take a scenario which we call this as a complex transformation let us take the example of general pivot point rotation ah we can ah understand this as a complex transformation because we know translation we know rotation and we know scaling these are basic ones and anything other than that is a complex transformation we can call that as complex and later we can break that up into a series of simple transformations and then we can combine them as composite ah and the composite matrix represents actually the complex transformations so that is what is the ah is the sequence ah in which we go to solve these problems so let us look at the example general pivot point rotation so we understood from general rotation that rotation is performed about origin ah by an angle by some angle so now let us assume that there is some other point in space or some other position in space about which we are going to rotate our object so how do we do that is if you look at this ah sequence of steps that we are going to perform imagine ah there is a there is an object like a triangle and a pivot point position other than origin is chosen here for rotation so let x r comma y r be the pivot point position which is any position other than origin now our aim is to rotate the object of interest about this point so for this what do we do is we first translate the pivot point so that it coincides with origin so the first step is a translation step so we are physically moving the point a pivot point so that it coincides with origin and then we are performing rotation with respect to origin so because we are aware that a rotation with respect to origin has got the standard matrix cos theta minus sin theta sin theta cos theta zero zero one and zero zero one so we know that ah general rotation that is the origin rotation with respect to origin so we can simply use that matrix for rotation here and in the third step we are actually putting this pivot point back at its original position so in the first step we are translating the pure point one translation step one rotation with respect to origin and then one re translation that is put it back at its original position so if we convert these three steps into equivalent matrices what we get are three different matrices and when we multiply them together we get what is called a composite matrix and that composite matrix represents the complex transformation of general pivot point rotation so let us take the notations and the first transformation is represented as translation t of minus x r and minus y r so that means we are actually going making it that is shifting the point so that it coincides with origin and rotation theta so always we assume that rotations are positive unless and otherwise explicitly mentioned like they are clockwise rotations so all rotations are understood to be positive ok ah rotation with respect to origin is then performed by an angle theta so that is r of theta and by the desired angle and again put it back at its original position which is translation x r comma y r so if these three are written in notation form now you see this equation here the new ah position or the point after performing a rotation for an object about a general point in space is given by the equation translation x r y r multiplied with rotation by an angle theta multiplied with translation minus x r y r you must observe that when the steps are written in the previous order like one two three but here they are written just in the reverse order you should ah note that carefully they are to be written in the reverse order first it is this from the right hand to the left hand you should be writing the ah notation so t of minus x r y r into r of theta into t of x r y r ah the red curly brace for the for the set of matrices multiplied with the point p the initial point or the ah point that we wanted to rotate or the object that we wanted to rotate here as p so when you multiply these three matrices see this here one zero x r zero one y r zero zero one cos theta minus sin theta sin theta cos theta zero zero one and zero zero one one zero minus x r zero one minus y r and zero zero one so when you multiply these three what you get is a composite matrix and whose elements are given here as cos theta minus sin theta sin theta cos theta and the third column has got elements which are some nonzero values x r into one minus cos theta plus y r sin theta y r into one minus cos theta minus x r sin theta these non zero elements actually ah the if you look at the first four elements of this matrix they are exactly the same if you as the original rotation matrix that is rotation about origin but if we are performing rotation about any general point in space we get two additional elements in the third column generally elements in the third column correspond to translation that means the point not only the objects not only get rotated about the pivot point but also get translated by the amount proportional to these two elements that is one element corresponds to the x direction the other element corresponds to the y direction so that is there is a shift not only there is a rotation there is also a shift so ah let us look at another case of general fixed point scaling so just like we did general pivot point rotation we have general fixed point scaling that means imagine any point in space and perform scaling with respect to that point it is something like you fix that point you hold that point with your hand and let the object be pulled with respect to let the object be resized in all directions like say we have only two directions in two d so stretch the object along x direction and stretch the object along y direction but now with respect to another point any general point in space other than origin so you can take an example of say a triangle ah whose centroid is the fixed point let us say its centroid is the fixed point then when you perform scaling what happens is with respect to the centroid will be pulling the object on all sides so the object becomes bigger but while the centroid remains the same so for the bigger object is it is the or the centroid still is at the same place but if you uh if you recollect the scaling that we did the basic scaling with respect to origin the upscaled object move moves away from origin while the down scaled object moves close to its origin but in this case the object remains there it becomes bigger in size so the effect is ah what is called a general point general fixed point scaling let us call this as a complex transformation let us break this up into a series of simple transformations and then let us make a composite of it and the composite represents the general fixed point scaling so if you look at these scaling diagrams here ah general scaling imagine the fixed point is x f and y f with respect to which we would like to scale this triangle and the first step is to ah is to translate the fixed point such that it coincides with origin so it is a translation simple translation then with respect to the origin we are actually scaling it that means you can up scale or you can down scale here in this example it is down scaled and the third step put it back at the original position put the ah fixed point at its original position so a translation as scaling and then again retranslation so put it back at its original position so if you write equations there is notation representation for this the first step is t minus x r minus y r second step scaling s s x s y the third step ah x r y r so there is r x f y f or x r y r both both mean the same here just ah its a notation so you can correct this as x f and y f here and x f and y f just for a change from rotation so ah the final equation for general fixed point scaling is given by p dash is equal to t x f y f into multiplied with scaling s s x s y multiplied with translation minus x f minus y f so c always the red curly brace the whatever is in the braces is ah a set of transformations which are to be composited so when we multiply all the three what we get is a scaling matrix s x zero zero s y and two more non zero elements in the third column x f one minus s x and y of one minus s y so that is how we get ah the composite matrix so this composite matrix represents ah the general fixed point scaling that means you can perform scaling with respect to any general point in space so ah here ah if you take origin as your fixed point for example so x f and y f become zero and zero so now the elements in the third column become zero and zero so that is how this is a more generic matrix for scaling so let us take another example here for composite transformations ah general scaling directions so far scaling is being performed ah one along the x direction the other along the y direction so we have two scaling factors s x and s y all the time so that means whatever object is of interest ah we have with us so we will be scaling it along x direction and you will be scaling it along y direction as well so here ah we can also imagine scaling to be ah being done or can be done along other directions also so let us take two mutually perpendicular directions as shown here in this slide s 1 and s 2 which are actually mutually perpendicular but not along x and y directions not along the standard coordinate directions so now there is a square square is an object on which we are applying a scaling transformation and the scaling is not done now along x and y but instead along two other mutually perpendicular directions s one and s two so that means along diagonal so ah see the scaling factors here s one is one and s two is two so that means s one is one means along s one direction there is no scaling so the size should remain the same along s two direction the size is double so because it is scaling factor is two that means it is something like you are holding the ah two or diagonal edges two edges of the square that is zero zero edge and the vertex and the one one vertex and then scaling it like this so that ah the length of the ah edge along the diagonal is now more than the original length so the steps are shown here ah how do we go with it let us call this a complex transformation so our aim has always been to take a complex transformation break that up into a series of simple transformations and then take a composite of that and then multiply the original coordinates get the final coordinates so the first step is to rotate the two scaling directions such that they align with coordinate directions so the first step is to rotate s one and s two directions they are already mutually perpendicular so rotate them such that s one coincides with x and s two coincides with y so this rotation is intentionally taken as positive because it is counter clockwise rotation so by what angle you should rotate so the angle is evident here the angle is theta so s one direction makes an angle theta with x axis so s two direction obviously makes an angle ninety minus theta with x axis ah so ah let us rotate this is the second first step is to rotate the two scaling direction such that they align with the coordinate directions ah that is s one aligns with x and s two aligns with y the second step is to perform ordinary scaling with respect to origin and third step is to rotate that back so a rotation a scaling and then inverse rotation so the ah steps are shown here r of theta s s one comma s 2 and r inverse of theta so that is ah that is actually shown here in the notation and in the ah matrix equivalents for this actually are shown in the next slide before we go to that let us see what is going to actually happen to the shape so this is the square and this is actually a 0 0 1 1 is a unit square standard unit square and now you are performing scaling on this object along two mutually perpendicular directions s one and s two the scaling factors along s one is one and along s two is two and theta is forty five degrees so what happens actually is look at the resultant shape the resultant shape is actually like a parallelogram and it is slightly up and is not actually the bottom edge is not touching the x-axis it is slightly above that and the coordinates of the except 0 0 all the other coordinates got changed for the other vertices other three vertices the 1 1 vertex has become 2 2 now because it is twice is the scaling factor along that direction but along the other two that is the other two vertices have become one by two comma three by two and three by two comma one by two so this is the effect of this is actually a change in shape so that is what we have achieved here at the end so if we take an example let us take an example problem that we can solve easily consider a triangle at two comma two ten comma two and two comma ten so the three vertices of a triangle are given now perform the following transformations in succession and find the resultant vertices now our aim is to perform these two transformations on the triangle and then find the resultant position so the first step is to scale with respect to 2 comma 2 that means the 2 comma 2 is the fixed point with respect to which now you will be scaling the object which is by scaling factors to comma 2 and the next step is rotate by 90 degrees counter clockwise so p dashed is equal to r of ninety into s two comma two so we always write that in the reverse order and the first step is scaling with respect to fixed point which is two comma two for that the transformation matrix is two zero and x f into one minus s x if you remember x f into one minus s x and zero s y ah y f into 1 minus s y if you remember the scaling matrix that is with respect to any general point in space that we have just derived before we have got the matrix s x 0 0 s y x f one minus s x y f one minus s y zero zero one so that is what we have applied here and we got ah if you are not able to remember this what you can do is translate the fixed point two comma two to the origin that means minus two two t of minus two minus two then perform ordinary scaling that is these two elements are zero zero the scaling factors are two two and perform a retranslation you can do these three and still you get the same matrix as that of the ah fixed point scaling matrix so if you do not remember in any case the general fixed point rotation matrix you can take these steps in three steps and multiply get a composite and that represents the same matrix and next step is to perform a rotation so rotation is 90 degrees counter clockwise and so what we get is a standard rotation with respect to origin and we know the angles that is 90 degrees is the angle and cos theta minus sin theta sin theta cos theta zero zero one zero zero one we got a resultant matrix here for rotation and the last step is to multiply the scaling matrix multiply the rotation matrix get the final composite so ah do not do anything to the triangle just get the composite matrix and the next step is to take each vertex of the triangle multiply with the composite matrix get the new vertex take each vertex one by one there are three vertices take the first vertex say 2 comma 2 and because that is actually you are getting minus 2 2 and the second thing is 2 comma 10 and the next thing is there is the equivalent so multiply here the 2 10 and 1 with the composite matrix you get minus 18 2 take the third vertex 10 2 and multiply with the composite matrix get the third vertex new vertex here minus 2 18. so this is how you should be solving problems so now we have learned here a simple sequence of steps to solve complex transformations like take a complex transformation break that up into a series of simple transformations and then multiply the simple transformations in the reverse order get a composite matrix and have the composite matrix with you take each vertex multiply the composite matrix get the new vertex so that is what we have learnt in this module so we have learnt how to perform composite transformations ah we have also have seen examples on how to perform what is called complex transformations by simply decomposing them into simple steps and then getting a composite and then ah solving problems so you can solve any number of problems so you can take simple exercises and solve problems and you can try for yourself all this thank you 
Dm8sb7w7u1Y,27,"A Complete OpenGL program with a sample OpenGL program and description of all OpenGL functions.

Sushma M D, Department of Computer Science & Engineering, Canara Engineering College, Mangaluru

For queries email me at sushma.md@canaraengineering.in",2021-04-19T08:34:02Z,VTU COMPUTER GRAPHICS & VISUALIZATION(18CS62)[A Complete OpenGL program] (M1L7),https://i.ytimg.com/vi/Dm8sb7w7u1Y/hqdefault.jpg,Canara Engineering College Mangalore Channel,PT17M19S,false,275,4,0,0,0,[Music] hello learner greetings of the day let's continue with our program to display window and the line segment rendering within the display window we have already completed the first part of it that is defining weaving parameters with an init function let's move let's move on to the next part of the program that is the next user defined function and i can say that it is a very important function user defined function where we exactly define what has to be displayed inside the display window so the line that has to appear now that has to be rendered within the display window should be now defined here and we can see here some set of opengl function used to display the line segment and the very first opengl function is gl clear so this gl clear is the function where it is used to uh you can say to clear the buffer color buffer so as i already said i have a buffer defined called frame buffer inside that buffer we have actually segregated into two parts so two categories one is the pixel information we have and you can call that as the x coordinate y coordinate and z coordinate information and the other part of that is the color buffer where only color information is stored it may be red pixel green pixel blue pixel so this color information only is stored inside this color buffer and in order to initialize this i mean in order to we have already done the initialization part of that this initializing of color buffer should be done inside the main so now using this gl clear function you are refreshing this color if at all you have the old color stored here old color information the color information corresponding to previous primitives old primitives that was already displayed so if at all you want to display now the new primitives new color information old one should be erased so that refreshing done is done here through gl clear function and remember the symbolic constant this parameter gl color buffer bit should be in caps which is passed as a parameter so this is very important this function call so now once this is done now you are ready for defining the line drawing the line so in order to draw a line first remember you have to set the color drawing color so it is something like you choose a color pen before you start drawing the line so which color you want to choose it is left to you so gl color is a function wherein you can see 3f it indicates the three primary colors red green and blue and f indicates the floating point values remember everywhere we are using the floating point values so gl color 3f is the function used to define the color and now you can see the three parameters you should pass the three parameters for gl color three f which indicates red green blue and you can see here the red color is zero what it indicates it indicates there is no red color component so i am choosing here blue sorry green and blue component the value ranges from 0 to 1 so here the value of green is 0.4 color blue color value is 0.2 and you can see it is a mixture of green and blue and this is the color that i am setting to draw the line so remember i have not had started drawing the line so the color only i have chosen so once it is done next we are ready to draw the line and the first function in order to draw the line is gl begin so begin is a function which is used to start the list of vertices so in order to draw a line i require two vertices right the two end points so which are those two end points so i'll let me call this the first end point as vertex one the second end point the other end point as vertex two so in order to draw the line first you should begin the list of vertices so here remember minimum two vertices is must in order to draw the line so single line so next what is the symbolic constant that you must pass it is gl underscore lines and this cannot be changed this is fixed gl underscore lines indicate that the primitive the shape that you are going to draw is a line and remember the moment you define this you must pass the two vertices as a next uh part of the program continuation is the next two vertices you must define compulsory for line and remember every function should end with the semicolon okay next you pass gl next you call the function gl vertex so remember this is the function which is used to draw the vertex so the first vertex you're going to draw and that is gl vertex 2i what is this 2i 2i indicates 2d vertex you are going to draw so the parameters that are going to pass is only two one is the first one is x coordinate the second one is y coordinate so x coordinate and y coordinate you must pass as parameter when you pass when you plot a 2d vertex and i indicates the integer value that you are passing 180 is integer value 15 is integer value so the coordinate that you are choosing here 180 and 15 when you are choosing you should be very careful remember in my previous function in my previous video i have told about the weaving parameter the weaving rectangular that you have set using glu ortho 2d function the boundary that you have set there lrbt so based on that boundary you should set here you should pass the parameter x coordinate and y coordinate this value should be less than or equal to your lrbt values so x coordinate is 180 y coordinates of 15 and the first vertex have plotted 180 comma 15 done now we are ready to plot the second vertex again you call the function gl vertex 2i so again the second x coordinate and the y coordinate you are ready to plot so 10 comma 145 is the second vertex that you are going to plot so you're done with the two end points now we are ready to draw the line so your work is done so end the list of vertices by calling the function gl end so whenever there is a begin there must be an end so remember to call the function gl end so now you are ready to draw a single line that is one line with the two end points v1 and v2 done and remember whenever you end the function this whenever after you end this do not forget to call the last function here that is gl flush so what is that your x coordinate and y coordinate corresponding to your line that is vertex 1 and vertex 2 everything that you have defined everything that you have drawn is now story is stored inside the buffer which is that buffer color buffer or you can call it as inside frame buffer all the information is stored now i don't want my pixels to be stored inside the buffer i want my pixels to be drawn on my display window onto the screen it should be drawn so what is a function that is used to move the pixels from the frame buffer to the display window it is this gl flash so without this function call you will not get any line drawn on the display window in order to draw the line or in order to force the pixels or move the pixels onto the display window gl flush is the function used so remember this is actually uh your function used to draw the line we'll move on to the next part of the program i have now the main function actually your execution begins from the main so we had to start from the main function but then i i started from the beginning from the top that is with the user defined function so remember now i have defined my weaving part weaving function that is init function at the beginning next i moved on to the line function where i defined the color i cleared my color buffer and also i have set all the vertices so that is that part is done now i am in the main so you're going to start with this actually main so the parameters that are passing to the main are the command line arguments that is argument count and the list of arguments remember this and the very first function you're going to start in the main is glut init as i already said this is the res this is responsible for developing interaction between your display window and the graphics library so what is the graphics library we are using here it is glut dot h so graphics library is glut so basically you develop an interaction between the library and the window so you pass the command line arguments here program name is the argument so argument list here you and then the argument count so initialization is done now the next function is glut init display mode as i already said you're supposed to initialize the buffer so what buffer you're initializing one is the you are that entire buffer you are segregating into two parts one is the color buffer the second part the first part is the pixel information where you stored x coordinate x y coordinate and z coordinate so you call that as a single buffer so because i am displaying a still graphics a simple line there is no animation as such right if at all you have animation you have to change the buffer type from single to double okay so hi here i am just displaying a still graphics so i am using the buffer type as single and then the color buffer is rgb so you just initialize these two buffer using the function glut in it display mode next the three function calls that you are making here is important that is to draw the display window first and foremost you have to define the window position on the screen you can start drawing the window position from the top left if it is from the top left the window position should be zero comma zero top left of your screen indicates zero comma zero and if you don't want to draw your display window from top left you can change to your desired position like here we have defined it as fifty comma hundred so anywhere somewhere on the screen somewhere in the middle or somewhere on the screen your window will be drawn display window will be drawn next you have the window size width and height you are passing so width of your display window if it is 400 height of the display window will be 300 again this is left to you you can have your desired window size remember after defining the position and size you have to call the function create window which will actually draw the display window on the screen and remember to specify a title to your display window the title is an example opengl program and this within the codes you are supposed to define this is left to you any title you can give so after defining these three window related functions opengl functions next you are now calling the user defined function init the very first function call is init and here this init definition we have already seen in my previous window you should you go through that video again if you want in it wherein you're defining the weaving parameters projection you're setting you're clearing the background color and then after that you are defining a weaving rectangle using glu ortho 2d function where left right bottom top parameters are set your boundary will be set using this init function so once that is done the next important function that you are calling is line segment so this is also defined here uh just in my previous slide i have defined how to draw a line segment by passing the vertices as a list of vertices that is x coordinate y coordinate so how to initialize the sorry how to refresh your buffer using gl clear function so how to finally move the pixels from the buffer to display and also have explained so you can go through that so next how to call this line segment this should be passed as a parameter through glut display function only so blood display function is actually a callback function display function which is very important which has to be called inside the main why it is very important because in order to continuously draw the line segment in order to have this line segment drawn on the display window in order for the user to see this display window continuously on the screen this display function is responsible this will call this line segment function continuously okay it is not like once you draw the line segment and then that line will disappear no that line that pixel should be drawn continuously on the window in order to have that continuous weave on the window this display function is responsible this will continuously call this line segment function in order to have in order to make this line stay on the display window okay so you call this display function as a callback function and then you have finally glut main loop and as i already said this is uh responsible for the even processing loop so the moment you call this function your main will be called this function will be called and your function will enter into a loop loop is nothing but continuously all these functions will be called until user interacts with the window through the mouse click or keyboard any pressing of key so until user performs an event this function will be called continuously okay so it is an even processing loop so everything will be displayed on your display window until user stops it explicitly so this is how your main will be defined remember all these functions that is called inside the main this is common for all your opengl programs all these functions right from gluttony till the glut main loop its compulsory for compulsory to be called for all the opengl programs so i hope all these are clear the complete structure of the opengl program you need to go through it it's very important for you to go through all these functions in order to write your own opengl program you can now just see the sample output here so here the sample output shows you two lines drawn but actually i have drawn only one line okay so uh just to skip this line okay just see this line displayed assume that only one line is displayed on the screen and you have a title see here this is a sample output of the display window my title that i gave here was a sample program or something like that this title just says that it is gl underscore lines right so this title is different okay don't get confused the title of the display window will appear as the same that you have given here within given there within the glut create window opengl function the same title will appear and you can see a line will be displayed on the screen and that line coordinates will be same as the vertices that you have passed when you call gl vertex to f uh function okay so the same vertices as per that what is this the line will be drawn so this is a single line drawn suppose if you want to draw like this the multiple lines there so what are you supposed to do there multiple gl vertex function should be called so two gl vertex function inside gl begin will draw one line again if you continue continue to call gl vertex function by passing separate list of x coordinate and y coordinates y coordinate suppose again two more gl vertex function i am going to call that within g l begin so again you do not have to call g l begin the same g l begin the same j l begin again inside that two more vertices if you are defining j two more gl vertex function if you are calling with the different x coordinate and y coordinate the next line will appear again if you pass two more gl vertex call if you call two more gl vertex functions by passing the different x coordinates and y coordinates one more line will be drawn so within a single real begin and gl end you can pass any number of x coordinates y coordinates that is you can call any number of jl vertex functions okay so two gl vertex functions will draw one line again two more gl vertex functions will draw the next line so likewise you can continue drawing multiple lines on the screen i hope this is clear 
uNeHl70EJJM,27,"Subject: Computer Science
Paper: Computer Graphics and Visualization",2015-11-30T05:56:55Z,Basic 2D Transformations,https://i.ytimg.com/vi/uNeHl70EJJM/hqdefault.jpg,Vidya-mitra,PT38M2S,false,2395,27,0,0,1,welcome to the epod Sharla lecture series and computer science for postgraduate students so we are learning the course computer graphics and visualization so we have successfully completed four modules in this course and today in this session we are going to look into the fifth module which talks about the basic 2d transformations so let us have a recap of what we have learnt already so we had some introduction some fundamentals some definitions and so on followed by that we have learnt about the output primitives so we started with the basic line so line drawing algorithms like DDA and dressing him then we proceeded further towards circle drawing algorithm and later now we are in this session where we will be learning here today basic 2d transformations okay so in graphics oh we have to understand that every object is represented as a graphic any any shape is a graphic as we understood that from the beginning initial sessions so a transformation here is nothing but a change in any attribute of the shape or the object so a transformation is a change in attribute so here attribute here for an object or a shape here means that for example take a line a line has got attributes like it's a position its length its color its style and so on and so forth so similarly any other object like say take a triangle a triangle has got attributes like say its position its size its may be orientation and so on so what we mean here by transformation is a change in any of the attributes of the shapes or the graphic objects so let us get into the course we will get into the session in detail so today we are here to learn the concepts of concepts on of translation rotation scaling the three fundamental transformations we call these three the translation the rotation and scaling as fundamental so they are very basic and we also will be learning in this session about usage of a new imaginary coordinate system called homogeneous coordinate system are homogeneous coordinates and we will exploit the advantage of this coordinate system our coordinates for simplifying all our operations or all our transformations so let us they look into the 2d geometric transformations so whenever we say it is 2d that means we'll be using only two dimensions so the same thing will be discussed for three dimensions in 3d transformations so with one more dimension added the Z coordinate added to it so fundamentally here in 2d basic geometric transformations we will be talking about the translation the rotation and scaling so I will explain what each of them mean here so translation rotation and scaling are basic the other transformations like you can see that you can see in the slide the other transformations include reflection shearing and one more common are most general transformation is transformation between coordinate systems so we will learn all these in detail so let us start with how to actually perform a transformation fundamentally the basic ones okay we call the three transformations the translation rotation scaling is basic because these transformations are the building blocks that means for any other transformations like reflection shear transformation between coordinate systems or whatever could be the kind of other complex transformations they can be represented as a combination of these basic transformations that means you can combine these basic transformations in some form to get other advanced transformations so that is why we call these things as basic so let us start with the first basic transformation translation so translation is one of the important transformations or basic transformations which is nothing but change in position okay you can here assume that a transformation can be both for geometric transformation or it can be an attribute transformation that is as I said if it is geometric transformation we deal with size we deal with position we deal with orientation and so on if it is attribute transformation will be changing the say color will be changing its texture will be changing its style and other attributes so attributes and geometry variables are different so you must be able to appreciate that here will be dealing only with geometric transformations so when we look into the first transformation that is translation translation is change in position so assume a point into a point in the 2d space that is imagine P X comma Y is a position is a point so it has to be moved to a new location say P dash X dash to I dashed now how do we represent this transformation so let t be the transformation and we used T to indicate translation okay so from X to X dashed X s mode to X dashed and Y has more - I - that means take the x coordinate it has more a new position X dashed and the y coordinate has moved to a new position move I dashed so if you look at the equations here you can simply represent X dashed as x + TX + y dashed as y plus dy so this T X and T way are nothing but the translational distances one along the X direction the other along the Y direction that means from X - if you travel along the x axis by T X units you will reach the X - X dash position and from this position if you travel along the y-axis by T Y units you'll be reaching the y dashed position so X Dash and y dash can be represented as X plus 2 x and y plus dy respectively so these are equations in in their equation form so we can write that in a notation form so let P dash to be the point X - 2 y - representing the point X - 2 - let P be the point representing the position X Y and let T be representing the translational distance as T X and T Y respectively so this notation you should remember that it is actually P plus T and addition so the initial position plus some addition so conveniently we can write these equations in matrix representations so for our convenient understanding and representation because when we do our implementation in a program or in say an algorithm representing these equations in matrix form are more convenient for programmers so every equation that we get in graphics will be converted in this particular topic like 2d transformations will be converted into a matrix equivalent and then we'll be performing operations on matrices so let us see how the matrix representation of translation is given so it is a 2 by 1 matrix X dash y dash is equal to x and y is the P matrix plus the T matrix T X T Y so it is a 2 by 1 2 by 1 matrix for the X - where - it's a 2 by 1 matrix for PYP and 2 by 1 for T so we'll be doing this thing similarly for the other transformations like rotation and scaling so let us look into what what is rotation and how do we perform rotation transformation see as I said a transformation is a change in attributes are in change in some geometric attributes of the shape so as I said as we just understood that translation is change in position and here rotation is the next transformation which is nothing but change in orientation so what is change in orientation orientation is say u-turn you use tilt you orient yourself with respect to a given fixed position so how do you orient yourself is orientation so let us look into the scenario here let this be the coordinate system XY represented with XY and let P be the position which is P X comma Y is a is the position initial position now this has to be rotated about origin this point P X comma Y has to be rotated about origin so that it has now moved to another position say P dashed X dashed by dashed so our aim is to now find out what are the coordinates X Dash and y dash in terms of X Y and some more other parameters and let us see the other parameters in this scenario connect the origin with the point so we call this with a straight line we call this the radius vector connect the origin with the position P X comma Y we call this the radius vector R you can give the length as R ok so obviously when we are performing rotation R is going to be constant so for whatever be the new position R is going to be constant because it is simply rotation so let the line connecting the origin and the new position P dashed be the same line otherwise the same radius R is exactly of same length R ok this line is actually any line in connecting any point in space any line from origin that starts from origin and connects the point in the 2d space is actually called the position vector of that point so any point in space when connected with the straight line from the origin is called the position vector of that point ok so let this line be the position vector the point let Opie so maybe origin and P is the position vector of the point P and the line connecting the origin and the p dashed is called position vector of the point P dashed ok so for our further equations and derivations let us assume that the position vector of the point P makes an angle Phi with x-axis and let the position vector of the point P dashed makes an angle Phi plus theta with x-axis so I am again repeating this let the position vector of the point P make an angle Phi with x-axis and the position vector of the point P dashed makes an angle Phi plus theta with x-axis so our interest is in the angle theta that is theta is the angle of rotation so theta is the angle of rotation from P to P dashed is what we are moving so let us see how the derivation proceeds and for the position vector of the point P dashed and the x-axis so you can take the cosine of the angle Phi so you can take cos of Phi cos of Phi cos Phi is equal to edges inside by hypotenuse so cos Phi is nothing but x by r cos phi is nothing but x by r for the position vector of the point P so X is equal to R cos Phi similarly take sine of the angle Phi for the position vector of the point P so sine Phi is equal to Y by R so Y is equal to R sine Phi now we have got these two equations keep them aside now let the position vector the point P so as we understood that the position the point P dashed makes an angle Phi plus theta with x-axis so it makes an angle Phi plus theta with x-axis so for the Phi plus theta angle further is for the position vector P dashed take the cosine of the angle so cos of Phi plus theta cos of Phi plus theta is equal to X dashed by R so as we did similarly for the previous position vector so it is Phi plus theta is the angle that's the change so let cos of Phi plus theta is equal to X dashed by R so X dashed is equal to R cos Phi plus theta similarly y dashed is equal to R sine Phi plus theta so if you expand as a cause of a plus B and similarly sine of a plus B so you get the equations expanded like this X dashed is equal to R cos Phi cos theta minus R sine Phi sine theta no leave Y dashed is equal to or cos Phi sine theta plus R sine Phi cos theta so because sine of a plus B sine iya cos P plus cos a sine B okay so what is that we are doing is now this R cos Phi in the equation is actually computed previously as X and R sine Phi is computed as Y so replace R cos Phi with X and R sine Phi with Y in the equations so what do you get finally is X dashed is equal to X cos theta minus y sine theta and y dash is equal to X sine theta plus y cos theta these are the two important final equations which you will have to remember so as we as I just mentioned will be representing all equations as matrix equivalents because of programming simplicity or we can use them in programs than to use equations so it will be easier to do matrix operations so let us rewrite these equations in their matrix equivalent form so you can easily like take this conversion from Equation two matrix form x - 2 y - is equal to cos theta minus sine theta sine theta cos theta and XY so this matrix cos theta minus sin theta sin theta cos theta is called the rotation matrix and theta is the angle of rotation that's important so theta is the angle of rotation Phi is eliminated in the equations so theta is the important angle of rotation so notation if you write a notation representation for this it gives us P dashed is equal to R of theta into P there is a multiplication that is what you should notice P dashed is equal to R of theta into P in the case of previous transformation that is translation there was addition okay know as we know from conventions that rotation in counter clockwise directions are positive and rotations in clockwise directions are considered negative so whenever you have to perform negative rotation so that is clockwise rotations you change the theta 2 minus theta ok so that's how other conventions are let us move to the third basic transformation the scaling ok as translation is change in position rotation is change in orientation and scaling is change in size okay here a scaling change in size here means it can be up scaling or it can be down scaling that means it can be increased in size or it can be decrease in size so scaling is one of the one is a peculiar transformation where it involves both a change in size as well as change in position so you can you will observe that maybe from the equations he'll be able to appreciate that scaling involves inherently two transformations one is change in size the other one is change in position so as you see here in the in the diagram there imagine you have an initial position say P X comma Y okay the blue-colored position a blue circle it's a blue filled circle circle filled in blue and the circle filled in red is the new position okay let this be the initial and this be the new position imagine a shape okay for scaling you cannot just assume a point because point scaling a point is meaningless isn't it for scaling you have to imagine a shape or an area okay so then you can appreciate that okay something is increasing in size that it's sizes increasing or decreasing so for that sake we have chosen here a rectangle shape and the position is P X comma Y now imagine this rectangle it has to be scaled now if you look at the equations here it is simply scaling simply is multiplication scaling simply is multiplication that means imagine you are holding a shape okay if you want to upscale it that that is if you want to increase the size what is that you would do you can stretch the object or the shape along X direction and you can also hold the shape and stretch it along y direction the whole object gets scaled so if you want to squeeze the object that is scaled down the object what is that you do is squeeze it along X direction and squeeze it along y direction so on both directions if you squeeze it the objects become the object or the shape becomes smaller in size so that's the effect of scaling so that means we will be increasing the size along X direction and increasing the size along y direction on a whole the object size increases so it is basically multiplication so as you see here in the equations X dashed is equal to X multiplied with sx y dashed is equal to Y multiplied with sy where SX and sy are scaling factors along the X and y directions respectively these are constant numbers so the higher the values of SX and sy the higher is the scaling so if the scaling factors are generally it is 1 is the default size or the default scaling factor is if you substitute s X is equal to X Y is equal to 1 what happens is we call that no scaling ok we because X dashed is X Y dashed is why there is no scaling okay if the value of scale factors is beyond one that is maybe higher values or lower values how it leads to a scale up or scale down respectively okay so as you see here this is the initial rectangle when it is scaled up the new rectangle like that is the scaled rectangle has gone to this position it has become bigger in size and and has also moved to a new position that's what you should observe so it has become bigger in size not only it has become bigger in size but also has moved to a new position but when you scale it down what happened is the size has reduced the size of the object is now reduced but and now it has moved to a new position which is towards origin that is what you should observe the scaled up object has moved away from origin the scaled down object has moved close towards origin so that means as you reduce the scaling factors by say lesser than one and say point five point two what happens is when you multiply X with zero and Y with zero so assume scaling factors are zero zero what happens X dashed is equal to zero Y dashed is equal to zero that means the object is not there it is just a null so it is at origin so these equations are represented in their matrix equivalent form as you can see on the matrix equivalent representation X dash y dash is equal to SX 0 0 sy into X Y so the notation you can represent this in notation equivalent because for simplicity for for making this more what is called a representation better representation you can use this notation P dashed is equal to Y s where s is the scaling matrix SX 0 0 s where it's a two-by-two scaling matrix the SX and sy are the nonzero values and P is the point so the scaling matrix is now multiplied with the position so in translation we have got an addition in we have got a multiplication of the rotation matrix with the point and in the scaling transformation we got the scaling matrix multiplied with the point so let us see how the scaling factors affect the shape of the object when SX is equal to s y is equal to 1 it is no scaling as I said when the scaling factors are 1 there is no scaling so the object remains as it is when SX is equal to s why it is called uniform scaling as 6 not equal to s way non-uniform scaling and when the values of both a sexyness we are greater than 1 it leads to a scaled up object or a increased size of the object of a bigger size and sx s way less than 1 it is called down scaling ok let us have a glance at all the three transformations the basic ones and at a glance if you see all the three you would notice that there is an addition for translation in the notation you can see in the notation there is an addition for translation T's the translation matrix there is a multiplication for the rotation transformation there is a multiplication for the scaling transformation as well in the when you summarize all the three basic basic transformations so now the important point to observe is all these transformations are the basic ones are assumed to be performed with respect to origin that means origin is is our reference point with respect to which we did everything so for example take a rotation we have performed rotation of some position P with respect to origin and so we have moved to a new position P dashed that means we are rotating about origin ok so imagine if you have to rotate or if you have to perform rotation about some other point in space or some other object in space or some other location in space what would happen to these equations so how the equations are different in that case so far time being let us assume that if we perform the transformations like rotation and scaling in particular with respect to any other point in space other than origin so again let me repeat that if we have to perform the transformations like scaling rotation now not with respect to origin but with respect to some other fixed point in space are some other pivot point in space what happens actually to this equation sees we will do the derivation later for the time being just assume that we will get an extra matrix so this question mark in the that towards the right of the matrices there are two elements there is an addition there is a two by one matrix whose values are to be whose elements are to be derived so here for the scaling matrix also there is one addition of another matrix of size two by one whose elements are to be derived later so for the time being you assume that an additional matrix will be there when we perform scaling or rotation with respect to some other point in space other than origin so now the notations you can look at the notations P dashed is equal to P plus T is the translation matrix and it is an addition simple addition but for rotation we get an additional matrix let us call that M R M R indicates an additional matrix of size two by one when we perform rotation with respect to any other fixed point any other pivot point similarly for the scaling transformation we get an additional matrix M yes which is a two by one matrix at two rows and one column whose elements are to be derived and we will when we derived that we will know what the elements are so now we will be converting all the three that is if you look at all the three there is a pattern that we can evolve from all the three basic transformations what is that pattern so let us see this pattern the first translation P dashed is equal to can write P plus T as I into P plus T where I is the identity matrix of size two by one so it won't be changing any any values there so we can conveniently put this P as I into P plus T so there is one matrix multiplication and one addition for rotation there is already one rotation matrix R of theta into P and plus mr for scaling P dashed is equal to s into P plus M s so in all the three we have brought all the three into one into one common format or in going to one common form one multiplication and one addition one multiplication and one addition so what is its what is the advantage of representing these in one common notation or form what happens actually is if you do a series of transformations like for example in animations in cartoons in what is called whatever you see in animation movies what actually happens is a series of transformations are performed in succession that means if you if you imagine a Tom & Jerry like cartoon I have imagined maybe they don't all duck maybe the Kung Fu Panda whatever the animation movies that involve lot of changes lot many changes in a short term happen so for example there is a translation the characters like safe take for example the term injury case Tom runs quicker there is a translation take for example the popular animation shows like Tom and Jerry like maybe many other cartoons that you see on television so the animation involves too many changes in a short time that means if you look at Tom and Jerry like in the cartoon what happens is always tom is behind the jury so Tom moves at a faster pace at a quick it suddenly changes its position it changes its size for example when quickly proceeds to grab the jury the jury suddenly escapes and it hits a big wall like object let us assume and its shape gets deformed and again it's again it retains its shape back in just no time and again it starts running so see imagine so many changes happen in a short time in a quick succession so change in shape change in size change in orientation it turns twists it bends so so many things happen in succession so when more than one transformation is performed on the same object in succession what happens is when we use these representations like say one multiplication one addition one multiplication one addition let us see what happens in the case of an example when you have to perform a translation a rotation a scaling and a translation in succession imagine you have to perform a translation a rotation is scaling and a translation there are four transformations to be performed in succession on the same object so first you performed a translation what happens is you use you will be using the matrix identity into P the P is the initial coordinates you have got one matrix multiplication then store the results somewhere and then add it to the translation matrix so P there is a multiplication and one addition so you did these many things multiplication addition so two matrix operations and then store the results somewhere in the P dashed and then use that as input for the next transformation that is rotation and multiply that with the initial coordinates and add that extra matrix and then store the result so again there is one multiplication one addition as you remember that in the equations that we have seen in the previous slide there is one multiplication one addition and then store the result an intermediate result in some other variable and then use that result again for the next transformation as input and then multiply and add another matrix so if you have to do all this for four transformations like translation rotations failing transformation you will be doing eight matrix operations and over that and above that you will be actually storing the intermediate result also so you will be storing the intermediate result and as well you will be doing eight matrix operations for multiplications and for addition so imagine so much you will have to do so if you have to be more quicker in the operations you cannot you will not be doing this because in general in a typical animation there are too many operations that that are performed in succession so we cannot afford to go with these kinds of equations so we will have to devise a new way to actually reduce the number of matrix operations thereby our time and what is called the speed we get more speed and the the the time in which the operations are performed is much more it is it gives a better result in a short time so what actually happens is we will be introducing a we will be introducing a new coordinate system called the homogeneous coordinate system or we can call them as homogeneous coordinates it's an imaginary coordinate system so our general 2d coordinate system is called Cartesian coordinate system so we are now looking for an imaginary three dimensional coordinate system called homogeneous coordinate system and the coordinates are no called as homogeneous coordinates and now all our transformations will be representing them in homogeneous as homogeneous transformation matrices so what is the what is the advantage of using this homogeneous coordinates is we will see that in the next slide but here let us see how do we represent how do we convert between cartesian coordinate system and homogeneous coordinate system so a Cartesian coordinate system has got two coordinates x and y a homogeneous coordinate system is as I said it is an imaginary three dimensional coordinate system which has got coordinates X H Y H and H so where X H is the XCore the homogeneous coordinate system why hitch y coordinate of the homogeneous coordinate system and H is the homogeneous coordinate now how do we perform conversion between Cartesian and homogeneous and vice-versa so how is that done is so see the equations here X is equal to X in Cartesian is equal to X in homogeneous and divided by the homogeneous coordinate and Y is equal to Y H by H so now when hitch is chosen as 1 when this homogeneous coordinate is chosen as one homogeneous coordinate is something like it is an imaginary dimension as I said it is a number you can choose any number any real number for that sake if we choose H to be 1 then X is XH Y is y H so X becomes equal to X H Y becomes Y H so if you see this conversion now the X and y of the Cartesian coordinate system when they are converted to homogeneous coordinate system they become X Y and an additional one ok now what is the advantage of converting cartesian from coordinates from cartesian coordinate system to homogeneous coordinates is the advantages as you can see here in the slide when we perform when we do the conversions you will know we will appreciate that better so let us see the advantages of homogeneous coordinate system whenever you have a complex problem to solve the general idea is to convert the current data in the car data into some other domain and then perform all our calculations in that domain R in that system and then get back to the original system are the original domain that's the general way two most common way to solve complex problems again let me repeat whenever we have a complex problem to solve we go into a different domain altogether where data is represented in a much simpler manner and operations are also are much simpler so we perform all our operations in that domain and again take our result back into the original domain it is similar to converting data from time domain to frequency domain and frequency domain to time domain and so on so whenever we have to perform complex operations we go for it we go into a different domain which simplifies all the operations okay so the advantage of using homogenous coordinates is it will be evident when we solve some problems but for the time being you just take this that is given the initial coordinates straight away we get the final chord that means imagine a series of transformations like translation rotation scaling translation are performed in succession so if you give the input coordinates straight away get the final coordinates you don't have to store them store the intermediate result or you don't have to perform multiplication addition and it is just simply multiplication okay that is the first statement a series of transformations can be represented as matrix multiplications so T are s T if you have to perform you just multiply them T into R into s into T so it is as simple as that in homogeneous system and given the initial coordinates get straight away the final coordinates by compositing these series of transformations and finally the number of matrix operations are reduced to just exactly half so it is just multiplication and no additions so storage of intermediate results is also not required so these are the many advantages due to which we represent all our data in homogeneous coordinate system so we will maybe do this in the next session we will try to say how the homogeneous coordinate system helps to simplify our matrix operations and representation of data so from Cartesian to homogeneous how to represent transformations we will take it up in the next session so what we have learnt in this session is the fundamental transformations like geometric transformations I mean so translation rotation and scaling translation is change in position rotation is change in orientation and scaling is change in size and also we have seen a bit into how to convert Cartesian coordinates into homogeneous coordinates and what is what are the advantages of this representation ten homogeneous coordinates so thank you 
shCdzeunyMY,27,"This is the 3rd  Online CSE class conducted on May 1st, 2020 on Computer Graphics and Visualization which is Module 3 from the CSE 6th Semester. The content is part of the VTU Computer Science Syllabus. The  CSE class was conducted by our Professor Priyadarshini. The Class captured the detailed steps involved in the concept of Rotation around an axis parallel to x-axis.


Module 3 | CSE VI Sem Computer Graphics and Visualization | VTU | CITech",2020-05-01T17:01:22Z,"3D Rotation around an axis parallel to x-axis, CSE Online Classes by CITech",https://i.ytimg.com/vi/shCdzeunyMY/hqdefault.jpg,Dept of CSE- Cambridge Inst of Tech,PT15M17S,false,34,0,0,0,0,[Music] you so good morning today we'll start general three direction or three-dimensional rotation which is still we are in third module in the last class we studied the normal transformation functions just two transformation functions that the basics of translation and the rotation rotation is translation mission we saw rotation we saw rotating around the axis right so that rotation around the axis we saw yesterday what will be the matrix how it will rotate and the matrix will be change with respect to each and every coordinate axis but today it is an extension of three dimensional rotation concept itself the extension is the rotation can happen with respect to rotating with respect to an axis give me a minute fine so we need a rotation with respect to each and every axis now it is an extension that we can also rotate an object not only with respect to the coordinate axis but also with respect to an arbitrary axis wherever however we want I can rotate not always I should stick with a coordinate axis that is XY said while rotating now if I want to rotate with an arbitrary axis then what will be the scenario so here when it comes to arbitrary axis I will have a two scenarios the scenario one I am discussing here that you are able to see now that is rotation around an axis failing to n any one of the coordinate axes five parallel to an x-axis or it can be parallel to the y-axis or it can be parallel to the z axis the second scenario is rotation about an axis which is not parallel to any of these three axis like we will see the next scenario now let us take up this first scenario that rotation around an axis parallel to any one of the axis that is any one of the x-axis or y-axis are sent access now here just we have taken example with respect to x axis so you are able to see here in the diagram II which is mentioned here in the figure a you can see an object and you can see our red line there on top of the red line you can see an object so that means I want to rotate that tetrahedral or a pyramid I can see it's a pyramid I want to rotate it object but that object is not rotating with respect to X Y or side it has its own axis that is word that this drawn in the red color line this axis is that we call it as an arbitrary axis so but this axis we call it as this axis for I call it as a arbitrary axis arbitrary axis I have now this object supposed to rotate around this arbitrary axis for the object rotation though reference is this arbitrary axis how do we rotate it that's fine that's a question let us see the figure B when you see the figure B because as we only has a default rotation matrix with respect to X Y inside as you already know each and every action happens in the three dimension or in OpenGL it is with respect to n matrix the matrix form is already there with respect to XY and Z but I don't have any matrix with respect to thee arbitrary axis if I don't have in matrix and I can't rotate the object right now should I need to generate a new matrix here for that arbitrary axis not required because as this arbitrary axis is linked to the x axis right parallel to the x axis our problem will be solved in a simple way that means you can see here in a section b sorry in africa beam i have translated this rotation axis that is nothing but ever arbitrary axis rotation axis is nothing but our arbitrary axis i translated this arbitrary axis or the rotation axis on to the x axis now the axis is actually sitting on this x-axis which arbitrary axis or i call it as a rotation axis fine now I'm translating that axis to the x-axis because it is parallel to the x-axis so it is easy for me to translate each and every point find at one point in the same translation distance will be for each and every point so it is easy for me so I will translate that to x-axis either figure 3 after translating my rotation axis onto the x-axis I will rotate the object around the x-axis fine figure D translate back the rotation axis to the original position right so when I say that actually you can see from C to D when when in the C figures see the object is rotating it is little lower because it is rotated with respect to x axis in be difficulty the rotation axis now is pulled out it's moved up because I've replaced that rotation axis to the original position right so when I do with that my object is slightly moved because the object is drawn with reference to the rotation axis fine so now it is moved up so now the total from the 8 to D a and D if you see only a and D if you see the object is rotated with respect to the rotation axis right but we took the help of x-axis because it was easy to transform or place that onto the x axis so what are the steps we took first we translate it to the x axis the second scenario is rotated around the x axis given for a given angle theta and we translate it back so this is the scenario if it is parallel to any one of the axis fine so we will see how we will see the same thing we go fast here obviously if do if it is paddle what I call it us this complete scenario 1 and 3 I have how many rotation matrix obviously I have to combine 3 rotation matrices right one translate rotate and translate inverse so which I call it as a composite transformation which we have already learned when you're combining more than one matrix we call that as a composite transformation fine that's what they say here rotation markets for any axis that does not coincide with a coordinate axis can be set up as a composite transformation that misses we have a solution we can set up by using a composite transformation involving combination of translation and the coordinate axis rotation we are rotating with respect to the coordinate axis right you have got a solution for that we attain the desired rotation with the following sequence sequence we have already see in the diagram it follows the same sequence translate the object so that the rotation axis coincides with the parallel coordinate axis of your general awareness vessel it can be to any accesses it can also be a parallel to a said axis like this and the object would have been drawn like this right so if arbitrary axis is parallel to z axis then it will combine with z axis and the rotation happens with respect to the other side axis that's on the signal the first step second step perform the specified rotation about that axis so whichever x axis it is merged now you perform the rotations third one translate the objects so that the rotation axis is move back to its original position so the translation is back to them originally just translation with respect to the rotation axis all because we call it as a arbitrary axis so many times in the question paper they use this in the exams they use this terminology also for the rotation axis so these are the three steps we have to offer now can you tell me what are the steps that we that can be performed how do we perform the steps do you remember the composite transformation that we have already discussed composite transformation whenever you have more than one functions transformation functions in world you will combine them right when you are combining hope you remember the first operation we are the first function we place it in the rightmost and the last operation we place it in the leftmost so the matrix will go in this form right to left right right associativity so it is from right to left so what is my first do you remember I hope you remember the diagram yeah it is a step itself is here the first step second step and the third step so what is the first step translate the object so what is your first step translating the object rotate the object so now here in this example we are rotating with respect to the x axis by an angle theta multiplied by what is the third one translate back to the original position that's nothing but I will name it as well translate inverse right so here they're asked for the coordinate position P what will be the sequence this will be multiplied with P which I will get a new point P - right so ma it is going like this my functions where the composite transfer rotation matrix for the transformation is let us pull up only the rotation matrix so what will be my rotation matrix R of theta will be my total because the example here whatever we have taken from A to D what's our a to d a to de a to D from A to B what is ever major thing just to rotate I just want to rotate the object but which are the functions have been involved so take up only the rotation matrix so that will be all translate inverse into rotation with respect to x-axis in our example you can take up with take up any example in your excel they're not if they specify particularly that you have to choose your x axis rotation and go hard go up with the x axis otherwise if they are not specified you can choose any axis to show the example you should show the example and you have to write all these three points and then the P - new point sequence and the rotation matrix function this match should be written hope you have understood this you 
VxgdkZay-9o,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-09T10:28:19Z,Animation (CH-10),https://i.ytimg.com/vi/VxgdkZay-9o/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT30M35S,false,156,1,0,0,2,you welcome to the epod Shella lecture series and computer science for postgraduate students we are into the 20th module of the subject computer graphics and visualization in this lecture series for the subject computer graphics and visualization in the previous module that is the 19th module we talked about rendering an important technique which brings or what is called which in which imitates the real-world objects as closely as possible so with advanced rendering techniques like ray tracing we were able to achieve the visual realism that had been the ultimate goal of 3d world at the 3d virtual world that were created in this module we will talk about animation which is the animation is like say a computer graphics without animation is something which we cannot afford to lose so animation is an important concept or important topic which we should discuss as part of this series as part of this subject so this is the 20th module discussing about I will be discussing about the concept of animation okay let us get into the objectives the objective is to understand the basic terminology of animation to understand the principles behind the techniques of animation so there are many techniques of animation so as soon as we we hear the word animation something immediately pops into our mind that pops up into our minds animation needs like say the cartoon shows the kinds of 3d animations the kinds of simulations and so on and so forth so all that is true and there's a lot of a lot of techniques behind this the very word animation so animation is something that is fully created using electronic means that is like computer so animation is fully select done and created and designed created and done fully using electronic means or the computers now the some of the key words here are twinning in kinematics and many more so let us understand the very definition of animation so animation is something that is like say series of frames that are constantly changing before us are like say in simple terms anytime sequence of visual changes in a scene is can be considered as an animation so animation is a series of frames are constantly changed with a frame rate so the important phrase there is the frame rate so the frame rate decides how many frames should be there in a second so the animation is much smoother and it is valid for the chosen animation what are the visual changes here so what do we mean by visual changes here so anything that changes before our eyes is a visual change so the change can be in terms of shape the change can be in terms of size the change can be in terms of color in terms of texture in terms of many other properties of the objects so a visual changes to any of these properties of objects and many more here listed can be considered as animation so now you can wonder say like say these changes give us a feeling that something is happening before us something is getting animated but the characters undergo these changes so that we feel that they're in an animation so the various versions of animation that people have been trying for years people have been using warriors r2d2 and half d 3-d and 4-d what is 2d today animation is something where in the olden days when there was nothing like 3d or the 3d animation software like Max and Maya when nothing of that sort who are available then it was only 2d só 2d is simply basic plain images and they're constantly changed and where the 2d version lacks a kind of depth and a kind of feeling that it is made up of real-world objects so we will feel a kind of say we will immediately come to know that it is a pure cartoon character in the case of two and half d the half there is nothing see don't worry about the the half saying half there half is an addition to 2d the half is giving a feeling to the users of 2d are the viewers of 2d that it is 3d so giving a 3d feeling by using 2d is 2 and 1/2 D giving a 3d like feeling in 2d is 2 and 1/2 D so by adding shadows or by adding some kind of what is called extra features by giving a direction to them and so on and so forth we give them a feeling we give the viewers a feeling that it is 3d ok so there is 2 and 1/2 D the next kind of animation is 3d so 3d is pure as we discussed earlier using studio is introduced to do max or Maya like software like blender like software so we can create 3d objects and we can create views and we can do all that so that is purely 3d we get the feel for the depth and we get the feel for the real like objects and the next thing is 4d so what is for T we know there are only three dimensions for real world objects and even the artificially created objects the 4d is an addition so we add something like a peel for touch and the weekend we will have extra gadgets around us are we have some kind of changes to the physical world where we are sitting and we might wear some kind of gloves we might wear some kind of electronic cloves a kind of headset and we feel that we are in another world where we can smell we can touch and if these kinds of extra attributes are added to the 3d we say that it is 4d okay so animation can be in either of these forms before an animation is done before something is visualized we create our the weak on you can call them some kind of these master animators or people who are like the the core people industry so they'll be creating what is called a storyboard the storyboard is a is a graphical layout of the entire animation sequence so they will be drawing the characters or they'll be positioning them or they'll be knowing so like say where when what should happen they'll be doing all that paper or maybe it can be in the form of electronic means or it can be in the form of a slide it can be but it is fundamentally a pre step and an it's a pre step precursor for animation okay it's a storyboard once the storyboard is done we'll get a feel for how the animation is going to be how it will be visualized at the end it's a graphical layout of the actual animation once that is done the objects are defined their properties are defined then we'll be using a technique like say a keyframe technique or a keyframe animation technique where there are keyframes are which are important frames the keyframe means an important frame so we'll be the master animators will be defining the keyframes say keyframe one and after say after a little Jewish in time duration they'll be giving another keyframe are they'll be defining another keyframe so the master animators will be defining the keyframes where there is a considerable change or a noticeable change in the course of animation so the keyframes are defined by the mass per animators and the in-between frames are done by the junior animators or you can say they are the subordinates and now this place is filled up by the machines so the machines are the computers the day they interpolate the in-between frames of two keyframes okay they interpolate the various possible other frames depending on the frame rates chosen so let us understand what is frame rate okay so the frame rate is the number of frames per second as we know for animation we can still go to a number say 12 frames per second 15 frames per second is still acceptable it depends on how much at how much action we would want in the animation it depends on the frame rate depends on how much action we want in the animation so there is a lot of action a lot of changes are to be there then we'll increase the frame rate otherwise we can as we can afford to have lower frame rates the higher the frame rates the higher is the processing capability required and vice versa and the video is a video or we can real-life objects are what are captured in the video which is 24 frames per second are 30 frames per second and even if we want can go higher monitors have 60 frames per second is the frame rate defined the refresh rate for the monitors and animation we can still be happy with 12:15 and so on so some of the popular techniques of animation which are listed here on your screen but this is not the exhaustive version there are many more recent techniques we'll be discussing some of them here in this module the techniques of animation so the olden day animation techniques the the very beginning techniques are initial techniques of animation with the frame by frame animation or the keyframe let us let us know the list first and then we'll go into details of each of these techniques the frame by frame animation keyframe animation onion skinning rotoscoping squash and stretch second reaction morphing motion capture kinematics and there can be a big list so added to this there are many new techniques which are not discussed here so but some of the standard techniques are given here let us see each of them in detail the frame by frame animation is the olden day technique used for animation where each frame is individually edited individually composed and they're all played at a faster rate so that a character walking if we want to show that so if you want to have 10 frames if we want to do it in 8 frames at 10 frames each and every frame you should manually create edit and between two frames there will be hardly any change so each thing you should do it manually ring and individually you can also use machines for this or computers for this where you can place each frame along a timeline and then you can quickly play them back so that you will have a feel that there is the car the character is actually walking so again the important thing is how many number of frames other is frame rate is what is important based on that the number of frames are actually decided are the number of frames in which the content should change will be decided okay so the first thing as we saw is frame by frame animation and the next thing is the most popular and the most used animation technique which is the keyframe animation where keyframes are key frames here are the important frames important frames are where the frames where the content has a considerable change okay that the changes in the animation are considerable okay between two frames the changes may be gradual but exactly at the key frames that is if we compare key frame one and keep key frame to there will be a big difference if we compare key frame 2 and key frame 3 there will be a big difference so depending on the kind of that is how you design the animation how you want the animation to happen if you want sudden change to the character's properties you can give a keyframe with less interval with less spacing between the previous keyframe and the current keyframe if you want a gradual change you can keep keyframes much apart okay along the timeline so once the keyframes are defined as you can see in the figures here the first keyframe has got a ball position here second keyframe ball above and third keyframe ball here in the to the right and now you can give it to the software like any animation software it automatically tweens the word tweening means interpolating the in-between frames are in between two keyframes so the word tweening has that meaning the number of in-betweens is decided by the frame rates as required now the kind of interpolation or the twinning depends on how you want the object to go or what kind of path you want the object so if you can do it in linear interpolation you can do a kind of what is called a curved kind of interpolation you can decide on the shape of interpolation or the shape of twinning okay for the in betweens so how you or tween the in-betweens or how you interpolate the in-betweens depends on how thee a path should look like okay so another technique used for animation is a squash and stretch you can imagine the cartoon characters where a cartoon character let's say is a Tom and Jerry are like say your favorite characters where which keep running constantly one behind the other so once they hit an object array or a a firm a wall like what happens is the Tom or Jerry they they bombard are they bang the wall and the shape suddenly changes and so the shapes what is called the squash and stretches like squash is like their shapes disc shapes get squeezed and the stretch is like their shapes along it as you can see here in D so you can you can use such techniques for animations ok some of the other techniques that are popular in the animation world are the morphing which has been quite popular and we convert one object into the other but this is not just as simple as converting one thing to other anything to anything is not possible so you cannot convert any random thing to any other random thing there is a condition so there is some specific condition is to be satisfied by the two objects participating in morphing technique for example you've got a initial object you've got a target object so they should agree on some condition what is that condition the condition is that the number of vertices with which the initial object is made up of should be exactly the same or the as that of the number of vertices with which the final object is made up of again let me repeat for the four morphing animation to happen the two objects participating in the morphing technique should agree on some condition also it should satisfy a condition what is that condition the number of vertices with which this initial object is made up off should be exactly the same as the number of vertices with which the final object is made up of so that you can perform a morphing so we'll be mapping these vertices and according to the shapes we'll be changing it as you can see here a person is changed to another person an object like a banana has changed to some other object like an orange or something okay so that's where morphing technique is so useful so here we can perform this morphing technique we can understand this better by understanding by looking at thing here the Li using what is called linear interpolation imagine you got an object with two vertices so an object is made up of two vertices now you want the object to have three vertices okay initially there were only two vertices now the final object is made up of three vertices now how do we interpolate from two vertices to three vertices how do we map so we cannot map as per as far as morphing technique is concerned the constraint is concerned the number of vertices should be exactly the same now because they are not the same we will add an extra vertex to the initial object so that is the extrovert egg salad okay you can look at the extra vertex added and the extra vertex is no map is now changed and accordingly we perform a linear interpolation so that we see the final shape with the three vertices as you can see here for this we have a technique and algorithm I say a set of steps we will see that later so another simple thing which you can better understand the technique of animation is shown here what a triangle the triangle is to be changed to a rectangle now triangle has got three vertices the rectangle has got four vertices now how do we map between the two is we add an extra vertex and to the initial shape and we map the now there are four vertices as you can say so this extra vertex is added on any one of the edges of the are the sides of the initial shape as you can see here it is added to one of the edges of the initial shape so that they can be conveniently mapped so that the shape is has now four vertices which can be conveniently mapped to the four vertices of the rectangle and you can perform a linear interpolation okay so the technique used is the algorithm used is as shown here if we want to so you can also equate edges or you can also equate vertices you can follow either method while performing morphing so for the initial shape and the final shape you can either compare the number of vertices and you can compensate for the number of vertices or you can compare the number of edges and you can compensate for the number of edges this method takes edges into account let L K be the and L K plus 1 will be the number of edges other line segments you can call number of edges of the two consecutive frames K is the initial key frame k plus 1 is the next K plane define L max maximum is the number of edges in the initial shape in the final shape the maximum L min is the number of edges in the among the two key frames so let us define n E and E is the number of edges of key frame min so okay number of edges which is L max model min so we are performing a modulus operation here L max mod L min and that value is assigned to any what is any number of edges NS is number of sections NS is number of sections so which is typecasted to integer and it is a division between L max and L min so it is actually what is called integer version of this division because the division can give a float value or a fractional value we are converting that into typecasting to an integer now see here an example if LK is 15 and L K plus 1 is equal to 11 we divide the four lines I can you can take the vice versa because initial key frame should be having less number of it edges and the final keep them to be there and more we divide four lines of key frame k plus 1 into two sections each as per this max is 15 min is 11 so we divide four lines of key frame k plus 1 into two sections each okay when once we make them into two sections each now we've got four so okay the difference is 4 that's why the remaining lines of key frame k plus 1 in tact so what you can do is take two edges of one of the key frames which has the less number of key frames less number of edges the key frame that has got less number of edges and now you divide two of the edges into two parts each so we get four so now they are no matching they have a they have an equal number of edges for each other for the first and the last key frame similarly you can use vertices that VK and VK plus one be the number of vertices for the Kate and the k plus one key frame and similarly you can define v-max and we mean maximum is the higher number of vertices minimum is the lower number of vertices NLS is the number of line sections a and P is the number of points so we have done a similar thing here but because this is vertices and remember the previous one was edges either thing you can try if VK is equal to three and VK plus 1 is equal to 4 that is there are three vertices in the first you can imagine triangle you can imagine rectangle number of line sections is equal to NP is equal to one so because the difference is one so add one point to one edge of key frame K because key frame K has lesser number of vertices add one extra vertex to one edge of K frame K so that as we can even refer to the previous slides so where I have shown you an example of a triangle converting that to rectangle but that's what is explained here okay now how do we simulate the accelerations so linear interpolation is perfect how do we simulate acceleration the acceleration is what are deceleration there is a sudden change in the velocity there is a change in velocity suddenly something is running with much speed suddenly something has come to a standstill so there is there's a lot of change in the speed what is the acceleration so how do we switch two speeds and how do we imitate this acceleration and deceleration for characteristic or we can try these trigonometric functions and where the the initial differences are less here but suddenly there is a change and with passage of time is like there's a lot of movement okay so there is a slow initial moment there is slow initial moment and later it is very high so that is we can keep distances between the various frames in such a way that we can simulate the acceleration and deceleration the spacing is adjusted according to the requirements okay now the deceleration as we discussed before so you can perform similar such spacing you can you can vary the spacing between various frames are important frame so that you can simulate accelerations and decelerations okay so the same thing is explained here and you can also use curves or you can also use a parts which is part based animation you can you can you can define a path and you can hello the object to follow that part so a damping motion for example a ball when it bounces it slowly comes to rest okay so the bouncing ball animation can be performed by properly defining the shape of the bounds are the the kind of steps that you define how many steps in which it should come to rest okay you can define that if you want a highly elastic ball it might come to rest after a long time so depending on the kind of objective work you are animating you can decide on the number of steps before which the objects come object comes to rest okay so it's a damped sine function you can try KYNA Mattox and dynamics is the next and the most discussed most discussed in the literature what is kinematics is imitating human-like movement and giving human-like movement to artificially created characters for example how do you give a character a kind of here suppose for example you have created in the 3d using a 3d software you've created a human character now how do you give the human character a walk or a kind of human-like movement we have got joints we move so we first more leg before we bend our legs and we do all that see kinematics is a study of imitating human-like movement and so that is emulating human movement using artificial characters okay now in kinematics you can talk about two things one is forward kinematics the other one is inverse kinematics what is called forward kinematics you can imagine a robotic arm here the the end thing that is this end point is called the end effector so it is where that is finally its position is finally decided that is why it is called the end effector in forward kinematics we adjust the angles of these various joints and elbow extensions and arms such that this is positioned finally at the desired a point this is finally positioned as desired so by adjusting the angles here of the various joints and other things and other components we will be finally making it a point at something our position at some at the desired location that is forward kinematics as you can see here the animator specifies the joint angles q1 and q2 the computer computes where the effector should be so the angles are given and the angles for the various joints are given and the software or the computer should simulate a find order compute the end effectors position final position there is forward kinematics in the case of inverse final americanum Attucks this is exactly opposite we position the end effector and we in turn calculate the angles for the various joints so angles are computed the end effector position is given prior and the angles are computed so inverse kinematics is more popular than the forward kinematics so the reverse process that computes the joint parameters that achieve a specified position of the end effector is known as inverse kinematics the animator specifies the end effector position while the computer finds the joint angles the q1 and q2 exactly opposite of the top forward kinematics inverse kinematics is more popular to the forward kinematics and as you can see a comparison between the two specified conditions in forward kinematics and it computes the end effector position the opposite of that happens in inverse kinematics its goal-directed motion so where we specify the position of the end-effector specify goal positions of end effectors compute conditions required to achieve goals okay so goal is defined and what conditions should achieve that goal is to be computed or with this we come to the end of the discussion on animation so we can discuss more into what is called the other techniques of animation like motion capture in fact with motion capture is one of the popular techniques in the industry but due to its laborious require due to the requirements that are a big there is installations and laborious requirements the motion capture is restricted it's its application is restricted people have tried motion capture and have successfully applied an artificially created character so the motion of a real-world object and a character real world performing objects is is actually applied and taken and recorded and is applied on an artificially created character so let me repeat motion capture is one of the fantastic techniques where the motion of a real-world object is recorded and is exactly emitted rx exactly overlapped are is exactly applied to an artificially created character so that the artificially created character exactly behaves as that of a real-world character so that's where motion capture is one of the fantastic techniques for used being used for animation there may be many other techniques like rotoscoping which which we had that in the list but I did not mention that rotoscoping is another technique where we can keep the background can be fixed and we can keep changing the foreground so that is where rotoscoping is where on a video we can perform some kind of changes so on a video when we perform changes when we perform are when we put for example the best example for rotoscoping is as a video and there's a text at the end of the video so at the end of the movie we'll see the scrolling text so video with a scrolling text it says is a kind of rotoscoping another kind of technique you can imagine is onion skinning which we have not discussed here and skinning is one of the fantastic techniques used in the flash software you've got this onion skinning what is onion skinning onion skin is as you you should know exactly where to position an object suppose we want an animating ball you want a ball to be animated what you can do is you can for the to have to exactly define the previous position of the ball you can take the onion skinned version of it and you can forget about all the previous other versions let me repeat say for example we want to do an animation you don't have to define all the possible positions of the ball rather you can take onion skin diversions of the object in the previous frames so that you can position the current you can position the object in the current frame perfectly so you can position the object in the current frame so perfectly that's what onion skin so say for example in a tenth of frame it is important it is it is enough that you know the previous two or three frames you don't have to know the first frame when you are positioning the ball in the tenth frame so that's where you can perform onion skinning so some of these techniques are discussed here you can explore more and in the literature and the books referred or with this we come to the end of the 20th module for the subject computer graphics and visualization thank you 
banHbD3HzlU,28,"Computer graphics is a research field with many applications in various domains; ranging from lighting simulations for architecture, over data visualization in geology and the medical field, to special effects in movies or games. One traditional challenge is the simulation of natural scenes, including complex geometric models and a realistic reproduc-tion of physical phenomena, requiring novel theoretical insights, ap-propriate algorithms, and well-designed data structures. In particular, there is a need for efficient image-synthesis solutions, which is fuelled by the development of modern display devices, which support 3D ste-reo, have high resolution and refresh rates, and deep color palettes.",2016-11-23T10:46:38Z,KIVI Chair - Big Data Science Master Class: Computer Graphics and Visualization,https://i.ytimg.com/vi/banHbD3HzlU/hqdefault.jpg,Koninklijk Instituut Van Ingenieurs,PT18M5S,false,130,1,0,0,1,[Music] thank you very much fat yeah today I'm going to talk about computer graphics and visualization and basically it is an area that evolved quite drastically and nowadays we can computer generated or generate on a computer photorealistic imagery and even deal with very large scale data sets this open up many applications and various areas and this is also why it's very exciting to work in this field because there's so many options on the table that are there to explore in this sense I'm also very happy to have a theme of different people behind me that will follow me in this endeavor at geo Delta at the computer graphics and visualization group which I'm heading we are four faculty members in total 17 members 12 PhD students 20 master students many other people that are involved in the projects i'm showing here today so the credit does not only go to me now what do we do in this group well we have basically four focus areas the first one is named technology geometry processing rendering techniques and medical or data visualization so in order to give you a glimpse of what these topics stand for I prepared a couple of examples to show you this little bit further game technology is about automatically generating content and this becomes more and more important at nowadays because we have procedurally generated worlds in which players or even people are trained and for that reason the content is not that easy to produce anymore because these worlds can be like gigantic contain many many people that are interacting with it and therefore procedural methods are key here we also developed an asst content design interfaces that allows people to very easily proceed you to generate content but just a few scribbles and therefore create entire 3d environments that can then be explored these environments there of course populated with geometry and it is one of the other topics that we're looking at in detail how do we represent information how do we capture information from our surrounding how we transform that into a digital representation that then people can interact with here at the bottom you'll also see an example of an animation and deformation algorithm so we also look at what are realistic deformations of objects in order to make them really reliable in the spiritual world one key example here is of course also how do I represent this information how do I represent the data and the information that is hidden in it in one direction that we recently took is to look at how we can represent for example performance capture where you had scanners that you could register this virtual character here and then basically decimate its information in such a way that we only extract the most valuable available information in other words we can go ahead and then basically transform a performance capture on the left with all the details into something that becomes more and more approximate and the user can control this level of detail automatically so the most important movements are captured which can then be used to query databases to transfer the motion on to other characters or to do another analysis steps in such a way you have really a system that allows you to then take any kind of moving input and represented with very few primitives that capture the entire information of this sequence now in these images you already see the next topic that we of course address in this group which is rendering techniques ultimately you want to show something on the screen which means that you have to transform this kind of virtual object into something that is displayable on your device we're looking at realistic rendering including shadows shading global illumination non-photorealistic rendering which is more for illustrative purposes or to explain things better the HD studies that show that with the right abstraction you can increase memorability as well as also reaction time of the people that are interacting with the data so it becomes very important to look at this different topic and automatically this links in with perception how do we perceive the images that we show how do we actually perceive animations or even interactive data evis trations and finally computational photography how do we integrate real-world data into our approaches in order to make them more accessible we can take this even further with more photorealistic landscapes in this case here you have even participating media which is fog and share it becomes very difficult to do on because light interaction happens in the entire scene and we need to compute all of these values in real time this becomes extremely important for example if you want to train people in a driving simulator or in plane simulator because all of a sudden you need to integrate all these weather effects in order to make the simulation reduces little world is represented well we heard this before data is exploding with information everywhere and dealing with large-scale data sets is really a fundamental challenge that we need to address we look at topics like data analysis in order to get new insights of this information and produce representations that people can explore extract the knowledge that they're actually looking for and then use the insides in their own applications in this sense let me show you a couple of different themes related to our data and medical visualization direction on large-scale data display interaction methods visual analytics and medical visualization I think the key idea behind integrating the user and visualization techniques in big data is that if you look at a data development and recently used you have basically a development of compute power and data that before well behaved quite nicely right so we could basically deal with the data sets that we add at hand but this is about to change this means that the processing and analysis that we did before will not be sufficient anymore these two curves cross and we are basically out powered by the amount of data that is coming in consequently what we need is a new way to deal with data which means that you need to visualize it interact with and then guide what kind of data to keep what kind of data to involve in your processes and that means that the user has to be in the loop and we have visual beings so visualization is one of the key elements to have there to prove my point you're a very simple example this data set here if you look at it well it's very different difficult to grasp what is shown here but in fact it's just an app with different temperature levels and when I show you an image you immediately grasp what is going on you can see tendencies regions that are conformed so you get much better in size but this means that you need the right tools and the right solutions in order to make this really happen one domain that specifically key benefits from this is the medical domain here you can see a large-scale medical skin usually these are in your order or a couple of gigabytes that are coming out of those machines and now you need to write technique in order to illustrate the outcome here at the lower left the video just shows an interaction with such a data set where you for example strip off the skin only look at the bones look at different organs and then really make decisions based on this input because of its large and huge amount of data we also looked at compression techniques meaning how can we actually reduce the retail level that is given in such box of representations for this tiny cube that has been measured the GCU seen that looks like a 3d environment that you might have seen from it that's a cheap video game but in fact this is made up of tiny little data cubes so we could also use the medical data set of a resolution that goes up to well I cannot pronounce the number and that's one of the things about numbers anymore but it's 2 to the power 51 boxes that are represented here insect together and there may be compressed to do representation is only for gigabyte large so it fits evening on interactive graphics part where zooms also look in the upper right corner that's the resolution of the boxes that we are dealing with you so it's really a gigantic environment represented in a very small amount of data and this reduction of information is also crucial when it comes to bandwidth and we have to transport the information to the graphics card or even to portable devices as was pointed out by gemach before and more and more things become mobile and we are looking at how can we deal with these large-scale data sets everywhere now one of the directions that we explore this for example rendering where you basically can have access two gigabytes of data on the fly but just taking out your phone connecting to the right server in an interactivity you can see here in this video also that several people can interact at the same time the noise is due to the calculation of the kind of lighting that we use which in this case also includes a lot of sampling processes so don't get distracted by their in the video but the nice thing is that it basically if you have several doctors discussing the same day as they can interact they can do annotations one of them can change the way that the data is represented take off the ceiling again discuss with the colleagues places clipping plane and Alton can come to a common conclusion now what I like other areas that benefit from large-scale data representations when the Netherlands one of the that's the fears that exists of course is fly that is always a big issue and so people have covered the entire Netherlands with planes that have registered a height field of the entire country and if highfield already represents a terabyte of data and one of the goals is to compute simulations in this high field in order to predict what kind of safety measures have to be put into place in order to protect the people H terabytes means 50 meters of CDs slows reading huge amount of data and if you want to integrate satellite data for example in order to find out something about 40 km i acquire year 1 point 5 petabytes of data and so it's a huge amount a google earth already contains 21 petabytes of data today that is offered to you via disservice and now producing computations on a global scale like this is a big challenge you can show you a little bit of what you will also see in the class of how to produce a rendering systems live nation such gigantic data sets and information on the tribe because we needed we fly here from Delta baby over to rubble and where will show you a quick application that we built in the context of this flood protection measurement one of the things that people look at it for example if you have a river like this what happens if the water rises and so you can place this inside of the simulation and you can synthetic which neighborhood where the water is flowing what safety procedures to follow in order to make sure that people get out without a problem it turns out on a side note it can actually in some areas mean that if there is a real flooding you should climb to the top of your roof top because there's no way that you could get over any three out of this area fast enough and these kind of insights are very available to decision-makers in medical visualization it becomes a little less clear what the right recommendation and be two different presentations pictures for example I picked here a blood flow through this straightened we have the release scanners that are able to track what a flow of blood is inside of your body but they output these kind of images very hard for anybody that is not a domain expert so we also looked at Ellis trations that are a little bit more understandable like each one feeling for of you where does the blood flow where they went vortices what is the direction and people that are using these kind of illustrative already found very nice finding that were previously unknown for example about certain locations in the heart and how they are turbulences that are related to rings us to a kind of loop what we want to do is we want to have the visualization and interaction with the user that can explore the data and find what they're actually looking for now this is not always straightforward because this data analysis that over here cannot be done only when we want to support the human in this task and this is one of the research directions that includes visual analytics which at the moment is one other yeah let's say hot topic also in the area so what does it base or what is it based on well if we look at a high dimensional data set like this one here on the left you have the feeling okay it is three-dimensional because all the points and three dimensions but it turns out that it's actually in this case a folded piece of paper if you wonder so the data actually lives not in 3d it lives in 2d and if we can find out these kind of relationships we can reduce the dimensionality of available they mention that is intrinsically encoded so let me illustrate this with an example here is a data set where people have written numbers from 0 to 9 so everybody has a different handwriting so they don't match up but they collected 100 thousand samples and now this represents 4096 dimensions sounds a bit weird but that is the number of pixels that were used to scan it every Bigfoot can change color so that gives you four thousand dimensions now what you can do is you can analyze this data set and actually embed it in a 2d representation what you get is something like this melody Judy where the goal was to maintain as much as possible the neighborhood relationships between different objects meaning if they're close now this is what it looks like and interestingly when you select a cluster like this one that is formed up here well it actually corresponds to certain elements in your data set so which means that this similarity can come out and become visually observable to the user unfortunately that is the downside well you can do this for all the numbers and look something like this and previous approaches have worked in the order of minutes for larger data sets in the order of hours which is very often unacceptable and undesirable so looking at like seller ation techniques like we did allows you to go down to timing we get similar results of these types of embeddings that allowed the interactions without having to wait for it for a long time now furthermore when you look at data like this you see okay similar information but you don't get a overview of what number is might be linked of what things might be very similar is seven looks a lot like a one is there a way to abstract is even further and create groups that are meaningfully connected so this is also direction as we looked into of how to create her ocular representations and for this I will change the example because it's a little bit better to feel where settle as it's like different spectral responses of the ground and we analyze these data sets to then define is embedding point spread out here not also high dimensional corresponding to different spectral bands that have been covered and then the user can select certain groups that then reflect properties this is not something we put in it is something that came out of the embedding in other words if you select the other clusters that you see there in this image it represents clouds ocean because on a high level while the ground is ground the clouds are clouds and the sea you see now if you take only the mainland you can do the same event embedding again and you see desert areas form mountains urban areas and for this particular case if you continue with the desert areas you find dry legs and a particular one off the dry lights that is the largest one also sticks out so you can see how you can dive into the data representation and find what you're actually looking for it would have been impossible to find this driving just tiny in comparison to all the other information it is there but if you know what you're looking for these kind of systems allow you to find the information you need now finding information also means the user is integrated in this process so if we also looked extensively at tools that would allow you to interact with a computer that you can see for example gesture control that is to modify a 3d object here in this case in particular this application is funny because seeing that you don't touch anything with your hands it also means that a surgeon with in surgery can stay Sarah they can actually interact with medical data set without contaminating themselves if you construction simplification animation there's data display large-scale realistic rendering illustrative rendering perceptual methods also new display technology and data visualization and interaction which is the main specific visualization visual analytics and interaction methods so the course is afternoon we're going to cover many of these different directions I'm going to give you insights and how they actually work so that you can then pick up the information that you might need for your own projects and then also get in touch with us if you are further interested this thank you very much get there no question [Music] [Music] 
Q2XgjW5pblM,27,"This is the 6th  Online CSE class conducted on June 8th, 2020 on Computer Graphics and Visualization which is Module 4 from the CSE 6th Semester. The content is part of the VTU Computer Science Syllabus. The  CSE class was conducted by our Professor Priyadarshini. The Class captured the brief explanation on Orthogonal Projection with the relevant examples. 

Module 4 | CSE VI SEM Computer Graphics | VTU Syllabus | CITech",2020-06-08T15:21:13Z,"Orthogonal Projection, CSE Online Classes by Cambridge Institute of Technology",https://i.ytimg.com/vi/Q2XgjW5pblM/hqdefault.jpg,Dept of CSE- Cambridge Inst of Tech,PT49M14S,false,99,1,0,0,0,[Music] you today we are dealing with the orthogonal projection in the last class I think you have seen just a brief was given a brief on the orthogonal projection and perspective projection so this is nothing but our under a projection transformation so projection transformation has two projection kinds orthogonal projection and perspective projection which is very very important with respect to the exam point of view very frequently asked so that means projection transformation is how the object is projected onto the screen in what way the object is projected there are two ways that is orthogonal projection and that is perspective projection so what happens with respect to the orthogonal projection is the two ways so that we will Sigma has already told you what is orthogonal projection orthogonal projection is nothing but you have a two points p1 and p2 the same object should be projected onto the view plane fine onto the view plane is nothing but the view plane is nothing but which we actually see the object how do we see the object is actually first projected on deep down to the view plane before projecting onto the device crease okay so it is nothing but P 1 and P 2 I have the same point is projected so let us go indeed how the ultimate rejection actually is dealt a perspective projection so first automatic rejection a transformation of object description to a view plane along the so transformation of the object description for me the object is actually a line p1 and p2 let's align this object description to a view plane I have a p1 dash in create p2 dash onto the view plane along the parallel lines so with the help of these parallel lines I am able to project on to the view plane that is p1 dash of p2 - okay and this probe parallel lines is actually a parallel to the normal vector which in the last class it has been discussed normal vector is this to the view plane so always a parallel lines is parallel to the view plates normal vector and so these are the lines these lines dotted lines what we are seeing here is called an orthogonal projection or an orthographic projection okay is an orthogonal projection or a orthographic projection we call it as orthogonal or orthography projection this produces a parallel projection transformation in which the projection lines are perpendicular to the view plane so there is the other way of explaining your parallel projection transformation that's nothing but these dotted lines is actually perpendicular to your view plane you agree this is perpendicular to your view plane but to say this perpendicular it's perpendicular plane but it is parallel to the normal vector it is paddle okay this is a normal vector but that is perpendicular to your view claim fine this is nothing but an explanation of your autograph projection that I call this this is called as a or to graphic projection okay okay so next slide usually orthographic projection as most of the time used so to see the front we use side view rear view top view okay so for that we have a link called elevations the front view we call it as a front elevation side view we call it as a side elevation back view you call it as a sorry rare elevations and - ah pubic or Edessa okay so front side rare is we call it as elevations top view we call it a sub plane okay so this is most of the time these projections it is defined which you can apply just to see the fine because when you go and see your CAD grabs and all that is nothing but it is a model understanding you just have to see the model okay you pull it friend pull it back however you pull it move around cross your XYZ direction the size of the objects remain same or size of the object actually remains same there in academia my only intention is to see the objects angles or objects parts very clearly okay so on orthogonal is only meant for back to check the any kind of a model designing right where the size of the model will never change even W move across so you can see here in the front elevation you will get these for whatever you can able to visualize this complete you're getting as one part and this so the size of the object what is drawn here in the same size the front view is actually shown him right so that's an ortho projections projects tennis so you have done low lot many projections lot many projections here ok this is a front projection in the same way for every point with respect to every point the projection line is actually drawn in an hour trigonal projection we have a concept called axonometric and isometric orthogonal projection let us see what does axonometry axonometric is nothing but orthogonal projections which show more than one face of an object so most of the time you will see only fry it we only only you will see most of the time only one face side face batteries still not see but axonometric is where you can see more than one face so this blue color line whatever you are seeing here this will be your Vela plane okay so this will be your object so now the object is projected onto the view plane when it is project how many freeze you can see I can see three phases here 1 2 & 3 okay so that's why one object where it is in such a way it is projected on the view plane where we can able to see more than one face the definition we call it acts acts cinema trick orthogonal projects such kind of projection we call it as a axonometric orthogonal projection in axonometric orthogonal projection we have one more concept called isometric fine what do you mean by isometric the way you project your object okay all isometric is actually at axial metric itself projection in isometric you can see though if I say this is and this is your origin the distance from the origin to the plain projection plane my projection plane is exactly on this from the distance from this how many free faces I'm able to see three faces and on the projection plane this distance this distance and from this distance to the projection that we call it as a principal axis onto the projection planes every distance is saying okay so that means we call it our self isometric projection orthogonal projection under axonometry even though eyes could see more than one faces the distance between in the central origin from the origin the distance to the view plane is same in all the object hi are these planes this is one plane this is the second plane this is a third plane to those plane the distances same the distances same so that we call it as a isometric projection orthogonal projection coordinates so that means how do we deal with the coordinates here so you can check here with the projection direction parallel to D usually projection direction how it will be there always projection direction will be parallel to your sub u axis is so low you agree so yeah when you see how these are all the projection directions if this is your view plane if this is your view plane currently the z-axis will be always here like this which is parallel to the normal vector n which is actually parallel to all of your projection lines with the projection Direction parallel to that new axis and for any position XY setting viewing coordinates now the same you have an X Y Z it's in a world coordinate system say that's an object it's a point considering as an object currently the projection coordinate would will be my points on the view plane so it's nothing but x and y always when you project onto the view plane or the screen coordinate it will be enough to dimension only fine so let us not worry about this exact currently yeah I'll tell you why so only two one is X direction and oneness y direction only to position two coordinates so then if the point the object which is in the world coordinate if it wants to project onto the view plane what should be the points of in the view plane so the point is nothing but the projection point XP YP will be equal to X Y P will be equal to Y so this will be nothing but our X P comma white P which is actually equal to X comma Y because it is parallel my points will never change the angle of the line will never change so it is exactly the same pixel whatever I have it in the world coordinate can be projected onto the view plane so it is very easy in my orthogonal projection that if x and y if I have X P the projection X projection on you plane and Y projection on you plane will be same as your old coordinate then what happens with respect to the z coordinate the third coordinate value for any projection transformation is preserved for use the visibility determination process procedure you will learn after these topics you will learn visibility determination procedure what is this visibility predetermination you will not very clearly I just briefed you when you have two objects so now if you see since I have one object show and I have behind this I have one another object project idiom so then based on your camera you have to say that which is visible and which is not visible who has to decide I have to do and I got them to decide whether this object should be first or this object should be first fronting so based on what I will decide that based on the third value I will define that right that will be a visibility determination procedure visibility determination procedure sort of did like is actually mainly they are used to use in these algorithms fine next now very important is I have to know we have learnt about the projection lines we have understood the simple logic is nothing but the coordinates if any object if I want to project onto the view plane the coordinate values what is in my previous coordinate system may be a world may be or we have a center coordinate is a viewing coordinate system so any coordinate system may be a normalized coordinate system there are many coordinate system before going to the view code wherever in whichever the position the x and y of my object is step in the same position it is fine when it is positional to the viewport that we have understood now very important is would all I have to project onto the view plane what all I have to project onto the blue plane when it comes in this video for example if I take a camera the camera lens is takes a major role right how much ever the lens angle we have only that much portion of our object is actually define how much I need to see in computer graphics we use the rectangular clipping window so we use a rectangular clipping window so rectangular clipping window gives me the how much what all I should see right so that means most of the time the rectangular clipping window based on the open shield package some of the package will ask how much your limits you're clipping limits you want that's nothing but no lower left and upper right corners threshold if I give the threshold based on I can give it define it but the may be open Oh packages especially the open shield packages will not give such options for the user it is fixed right the positions are the position of the clipping window is fixed the clipping window what I can say a values is based on the user that's how you will give your ortho values okay now the position is fixed where actually I have to place a skipping window the clipping window lower less gives me the X W min and a cry W mini all right gives me the XW Max and Y W max okay this is my clipping window values if these two values if I give a clipping window is actually define for three dimensional viewing the clipping window is position yes the position is fixed okay the values is based on the user inputs the three-dimensional viewing the clipping window is position on the view plane in three dimensional because the view plane concept we do not have in two-dimensional however you rotate whatever you do I have already drawn there is no much complexity in the two dimensions okay so the clipping actually I do are in a very early stage and the same approach but you're in three dimension we prefer the clipping should be done in the later stages you have seen our viewing pipelines you have seen what modal coordinates world coordinates moving coordinates normalized for and the viewport coordinates and then comes to screen coordinates so clipping will be done preferred to be done at the last stage so always the clipping is placed on the view play the position on the view plane with its edges behind link to D X view and y view which is a view it is nothing but your view plane so though this is parallel to the X view this subset this the y axis of the clipping window is finally to the Weibull okay in such a way it is placed on the view plane so now what all we will do with respect to the clipping window once clipping window is define I will take the x and y limits of the clipping window for the part of the scene that we want to display obviously we know that clipping window is the limits I will give X limits I will give and Y limits I became so that my object what I need to be drawn is a part is seen a display is just displayed onto the keeping which part of my object should be seen it's actually displayed on the shipping window so I have an exclamation violence so now what is saying is these limits are used to form the top bottom and two sides top bottom and two sides of clipping region called the orthogonal projection view plane so see her you can see in a top view in the figure top view be a figure B I am projecting throughout the edges of the clipping window and then I am trying to get the orthogonal projection view volume you will understand what it is because projection lines are perpendicular to the view plane these four boundaries are planes that are also perpendicular to the view plane and that pass through the edges of the clipping window to form in finite clipping range so I am giving this as a range whatever I do pass that is passed to them onto the view plane also alright that is perpendicular to the view plane also because in my previous video I have already told clipping window is position on to the view plane so wherever the view plane is there about keeping variables if I see all this line is passing through these edges then obviously it is finding it this lines are perpendicular to the view plane that clipping window then it is perpendicular to the new play notes fine then how what I can do I can generate in finite clipping range I am defining the range Here I am projecting it front and back both and projecting I am setting what they're the ancient setting what does that range we will see here see this is the beach what did I do in the from the previous feature I have drawn the line which is perpendicular projecting lines perpendicular to the clipping window so with this what I did I made the range define the range now it was in my previous slide it was an infinite clipping region I have defined any finite clipping region okay now I should make it as a finite clipping region the finite clipping region is nothing but gives me based on the two planes that is based on the that view direction based on the idea which is use that will you can see here this will be your X this will be your why does that is like this fine that is like this is your right hand system correct this is your right hand system that my positives that is towards you my negative sadness away from you sex yeah so so that means like this that means I have extended my boundary my clipping window based on these third view direction okay whether it is some - and you bidirectional present a view direction it's up to us how do we want to extend so when we extend our view volume I got it as a view volume when extend our orthogonal view volume what I will do before I had an infinite region I will make it as a finite region what is a finite region I pull up with the two boundary planes which is parallel to the view plane so this is what the two boundary things one is this plane one is this plane two boundary planes the other one is this plane right the other one is this plane I have pulled these planes I mean I have defined these two planes I have positioned these two planes based on this data by accessing considering the side view direction or sub U value I have taken two planes one plane is actually a near plane I call it as one plane I call it a so far between so the two planes are called as near far clipping plane or also called as front back clipping plane now I have got the finite range of orthogonal projection view one who is a clear why do I need you one who it is treating I am drawing the 3d here whatever the object okay we can see here whatever the object is the outside of these volume so if I am drawn it's like this okay it's 3d so that means because in 3d I have said axis also so if I would have add only 2d I would have written only tipping window which is there in two-dimensional but as in 3d 3d objects have a third value then I have to keep the Sun kind of details in my view volume because I need to keep clipping or cutting clipping my objects with respect to X direction with respect to Y direction as well as with respect to the Z direction now this complete portion is clipped off this complete portion is clipped off this complete portion is clipped off only this is projected onto the clipping window so this is my morning because I have said axis also fine with the view directions along the negative sub y axis we usually have such far less xenia so that means what they say usually in viewing direction what happens my here in this you can see me huh our that far will be this that near because I've already told you that near is this and that far is this so the same that far is less than side near so that means that near will be your positive is that far away beyond negative angles because it is a right-handed right-handed system if you keep it you can see your son axis is towards him so towards you is a positive away from you will be your negative from the origin from the origin here it will be 0 from here to here it is negative from here to here it is positive okay so that's why they say in this viewing directional is that far is less time is agnya so that the far plane is farther out along the negative that view axis it is not negative direction when the near or far planes are specified we obtain a finite orthogonal view volume that this rectangular so that is nothing but the odd finite or tabular view sorry view one hope you understood this wide view volume is required now now we actually here in the last class now we have understood that we need a view volume so now once so view volume is done here I told you projecting every point on to the clipping window is very easy because it is directly it is parallel whatever they expel UI handler so same value X value it will be on my chipping window to onto my view plane also view plane now so we don't have to worry what how I need to project it I'm like what will be my hardening my coordinate will be same fine whatever the coordinate value I leave behind in this object the same coordinate value we have on the view plane or a clipping window now object projection I have a problem in orthogonal projection then won't I have the next one now we have to consider what is that we need to do now we need to normalize this do you remember we have a view planes too many what I can say stages of review planes well we have seen as I've already told you now currently I just told you that model coordinate I have I'll just write here I have a model coordinate I have a view coordinate I have a normalized called pre-need and I have a report coordinate then it will become a device coordinate fine so these two usually we have not worried converting from this to this do you remember modern to world coordinates sorry okay this will be a world coordinate so we have a model to world so this also we didn't worried much but you have seen our previous section do you remember we have converted we know to view put this if you have that see to that you open that window to viewport we converted window to viewport right while converting to window to viewport would what did we do there was two steps down first directly be converted window to viewport our viewing was not there before so then next what did we do we converted window - normalized and normalized to them you put there was a two stage just wicked hope you remember that but now in this viewing as we have defined orthogonal and perspective from window we have to go to the viewing now from viewing what I should do I need to in many cases or open shell case this normalized and you put will be together right that's what we tell it if it is together what will be my matrix if it is not together then this viewing should be converted to normalized from the normalize it has to it has to be converted to the viewport hope you remember that please open that matrix so now that is what they're telling here using an orthogonal transfer of coordinate position on to the view plane we obtain the projection projected position of any spatial point if spatial point on it is in a world coordinate as I've told you we will project as it as my x and y will not change in orthogonal projection now once we have established the limits of the view volume coordinates descriptions coordinate descriptions inside this rectangular pattern of pipe are the projection coordinates correct now now we have to map this to the normalized view volume without any further projection processing I am NOT doing any projection mother's point projection processing here because we have already defined whatever is there in the world coordinate as XY will simply be the same in the viewport also view coordinate so projection for processing is not that done what may be to take it I need to see to that my like triangular parallel up I should be mad to denormalize to view plane so that means sure the rectangular here what I had here a rectangular parallelepiped need to be need to be convert it to a normalized coordinate need to be converted to the normalized coordinate because before I put it on to the viewport fine which is similar to the device cordoning before I put it in a device coordinate it has to be in the normalized form because it is easy for me to convert we have already discuss this right so now before doing that conversion before doing that conversion I have we have a slight problem what is that problem the problem is our viewport this okay okay yeah okay so here we need to convert right this viewport what we had a rectangular parallelepiped rectangular parallelepiped held in this region okay rectangular parallelepiped this isn't right handed coordinate system right handed coordinate system that makes your son is towards you the nearest positive button but the device or screen coordinate system can you see your screen here what coordinate system you will expect for your screen I did try I just wait for your answer what kind of a coordinate system you expect here for the screen right handed coordinate system on left handed coordinate system so when you see your screen coordinate will be in left handed coordinate system so but basically all your world coordinate and viewing coordinate system everything till normalized whatever additional they can have coordinate system everything will be RHS so now from RHS it has to get converted to the left handed coordinate system so this is a position when you have to convert from our H so this is my main thing here so what because screen coordinates are often specified in the left handed reference frame normalized coordinate also are often specified in the left handed coordinate because in normalized what is normalized I am bringing normalized coordinate system here is one extra only because the coordinate I should not have any time consuming it should be easy for me to convert as we have already discussed my people screams what we have this is a different different size so my complex it is actually in the screen coordinate system where I have many options here when I have too many options size of the screen use I have it see to that my previous object from where I'm getting my coordinate system the object is defined that should be a simpler way for me to get multiplied so I keep it as he are zeros and ones here 0 to 1 which should be easy to convert to any size of the screen fine so I will keep this normalized whatever the scree coordinate is there I will not take otherwise it takes for me an extra time to rotate in all those should change the direction translate all this composite matrix again it takes time so I will not keep any kind of a complex city here so whatever if the screen coordinate I have left on a coordinate system I'll keep the normalized coordinate system as it is say this is my screen that giving the screen X&Y so obviously towards this you have don't have any position so you expect this will be your positive side view axis positive suddenly so that means near you what happens it will be a minus side view axis okay that's what is our main boy does we have to convert projection coordinates into positions within the left-handed so now where are we we are in a moving coordinate system which is the right-handed that is our rectangular parallelepiped is in the right hand now that I have to convert into the left hand now so let us see what will be what will be our you put transformation so this is my viewport while transforming to the will put what will be the new beeper transformation or not in the normalized coordinate system to illustrate the normalization transformation we assume that down orthogonal projection view warning is to be marked into the symmetric normalization cube so now this is my normalized what do you think normal I said this will be a pan and a fight okay most of the case it will be a paddle a fight because my auto I will define however I do find the final of I please volume up orthogonal view volume is set up now however it can be with X meanwhile main xmax ymax sadness at file values I will convert this to be normalized view 1 so you can see the normalize for you body emissive Q so Q which is a left-handed now you can see both one is left-handed ed this is this is right-handed and this is left-handed it's a clear okay so last class so I think ma'am the last class you have seen when the coordinate systems are different it was like this this was a good view missus X Y so this is X Y and said if this is the case the last class we have discussed how do we actually project this left handed to the sorry right hand it to the left handed or left handed to the right handed I need to translate this origin first to this right I need to translate then what I should do once I translate this I if I want does that to come on this plane then I have to do what rotate or vice versa if you want this to be kept here translate and this leg to be rotated to this direction then you have to do what rotate so this was your matrix was discussed in the last class hope you remember that so that we have to take care apart from that now I have to take care of it respect to coordinate axis I have done it coordinate axis done but with respect to the points because the size of this orthogonal parallelepiped is different from the normalized my XW mean YW means agnya value is different but here normalized it is minus 1 minus 1 minus 1 in the place of external now this way will keep it aside this rotation and translation will keep it aside for now now how do I convert my each and every point XYZ point to the normalized view volume what do you have that marks s X and px we have converted and we see now you please open that and check this will be your window this will be your viewport because it was a the viewport conversion by Windows will be there and my viewport will be uh normalized to you put so this is nothing but uh normalized you put so what was the definition of that because open that matrix so now my positions will be X min Y min all X min yes X min Y means Agni R will be equal to minus 1 minus 1 minus 1 X match sad max Center will become 2 1 1 1 transforming the rectangular parallelepiped new volume to a normalized cube is similar to the methods for converting the clipping window into the normalized symmetric square please open that and keep the normalization transformation for the orthogonal view volume is this I think you have got we have done this much this is not the end this part right and this part now we have to check this pot correct now for this this was your what is this this was our SX right sy this is SZ this is DX dy and this will be a pin set right always six I we had a formula so open it is six formula by seeing a six formula I will start writing as I go fine so what will be the s signif hope you have that s 6 now keep your sx s 6 was okay a six was X we max minus X women please open that XW max minus XW me you don't have to write all these derivations directly we can write the matrix if you remember so now this now I am converting into exactly so what will be is said now I said will be is that will be sorry max sorry max minus Z we min divided by Z W max minus W me so this will be minus X which is that disposition which are written in this part so now how I've got minus 2 okay so I need to check this and this so this is your s set and this is your P set okay now I have to get a set so what will be inside please go back check yeah this will be window that is nothing but Z W all said well design W value will be this exact view that is a viewport normalized view put value will be this that is a normalized value so what will be my your son this is your X I don't want it see why I don't want this is suicide what is this son this is yours agnia check it here Senta blue this is your Sarnia so yours acne or that's nothing but sadly mainly Xenia R is equal to Z near is equal to Z V min which is equals to minus one in the same way that far is equals to Z the v-max that B max which is equals to 1 that is this part which is equals to okay so let me take those values so here they are given so that is Z we men that we mean is equals to minus 1z we max is equal to plus 1 right Z W min is equals to Z W min is equals to Z W min is equals to said Mia Z W max is equals to said far correct from the previous figure have taken so now I will replace this X I is equals to that be max is how much plus 1 minus of said we - how much - one David I buy what is that W max it is nothing but is that far - z w- xenia so they've just still worked on with the - value fine so they've taken common 2 divided by same thing said near - set far that is with respect to is it okay now we'll use work out with respect to T cert in the same way and please try to get this one tea set so the tea set value also you have whatever the t XY you convert that into a solid as have done from s62 is said and you will get this right so this matrix is nothing but you'll know the point by point and conversion from on to to normal what or to view volume orthogonal view volume to the normal do you okay now what is left are acting whichever actually desire of being we just checked here yeah RN t int for not converting a left right-handed coordinate system to them left-handed coordinate system I need to rotate what my axis that is our M T so this will be multiplied this complete matrix will be multiplied with the rotation and transformation now the whole object will commence it into the normalized you warn you thank you 
YwovapXfAVI,22,"Subject: Computer Science
Paper: Computer graphics and visualization",2021-03-30T05:36:21Z,Rendering,https://i.ytimg.com/vi/YwovapXfAVI/hqdefault.jpg,e-PG Pathshala,PT26M29S,false,18,2,0,0,0,[Music] welcome to the e partial lecture series on computer science for post graduate students we are in the 19th module of the on the of the lecture series for the subject computer graphics and visualization we had 18 modules earlier in the previous module the 18th module we discussed about color models where we talked about the most popular popularly used color models like rgb cmy the hsv hls color models and so on so in this session today in this module we'll be talking about rendering an important concept an important topic as far as computer graphics is uh concerned subject of rendering is too vast and since we have a shortage of time we'll be talking about the fundamentals of the concept of rendering okay so rendering involves our rendering in 3d is all about imitating the real world as closely as possible as we discussed earlier the previous modules our aim in 3d is to imitate the real world as closely as possible and give it a real life like ah object feeling of a real life object so uh what shall we do or what do we do to achieve this what is called visual realism so let us learn more about it the learning objectives are to understand how to apply shading models textures and shadows for visual realism so this is our objective to also understand the techniques of ray tracing an important technique used for rendering these are the keywords let us understand what is actually visual realism in the case of 3d graphics as we know so we can create a lot of objects but how do we give them the real life like objects a real object like feeling so for this we have various stages through which we should go so that we achieve the objective of visual realism so the stages of visual realism as you can see are wireframe model first will be forming a wireframe model of uh an object which is the skeletal version of the object you can call it as the flat shaded version the smooth shaded version then we'll proceed to the light lighting so we can we can add lighting to the 3d scene that we have created we can add textures and we will be adding shadows and some materials i will be giving some material properties and finally some kind of environmental maps or bump maps or mip maps so that for some objects they are so highly reflective that the surrounding environment is seen on the surface of the objects so because of the material properties with which the surface is made up of this is where giving visual realism involves a sequence of steps which are to be followed so what is actually rendering so we will be computing the color of a pixel given a chosen viewing position so what should be the final color of a pixel so for example imagine a 3d world a collection of objects are there and now we are choosing a position in the 3d world and now we are taking a view of the 3d world so from the chosen position and the orientation so how the world appears because as we know in the real world depending on where we stand and depending on how we orient ourselves will have a different view of the world so the same thing we are going to imitate here in the 3d simulated world so visual realism is how to model 3d objects that look exactly similar to real world objects so in a sense it is simulation of the real world so let us see how the objects are rendered so you can see here on the screen you have a wireframe model so this is the wireframe model then we are applying some shading so we call it flat shading then we further tweak it and so we give it a more what is called we add more uh lighting conditions we add more lights we we compute the reflection properties we assume some material properties for the various objects and so on and so forth so that we compute the final light that gets reflected on the surface of the objects and so that they appear as realistic as possible so then we further add textures and as you can see in the last picture here some textures are added so that depending on what texture we add it appears to be made up of that object so that's where this texture here looks like made up of wooden ah it is a wood texture that we have applied on the object so that is how we achieve uh visual realism so what is a shading model so we are going to start looking at the first so in this in the sequence of visual realism for achieving visual realism we follow a sequence of steps as i said so the first thing is the wireframe model the wireframe model is a skeletal version of the 3d world or the objects in the 3d world so we are applying shading once the wireframe model is there the next step is to apply shading so shading is the essence of shading or the idea of shading is to compute the interactions of light with the surfaces of the object so how do we compute the light interactions are say there is a light and the light is incident upon an object and how the object reflects light or how the object absorbs light or with what materials the objects are made up of so that their surface properties are evident and when we observe the objects from a distance how do they appear so all this computation of light are interactions of light with various surfaces of objects is all done in the shading model so as you can see here a shading model dictates how light is scattered or reflected from a surface assume that there are two types of lights that illuminate objects in a scene so for simplicity we can assume that the world is illuminated the world here means the 3d world that is the imaginary 3d world is illuminated by lights from external sources which can be point lights are ambient light it can be so the daylight so that we can assume so a shading model uh the job of a shading model is to compute the amount of colored light that gets reflected from a surface given a viewing position so finally what we observe is the reflected light and given a viewing position given a set of lights and assuming the light properties assuming the material properties so how much light gets reflected are and what we see actually in our eye is what is to be computed so the shading model does a big job of computing light interactions with surfaces of objects so how does the light interact with objects in a 3d world so you can we can take the real world analogy again an object can be a black body an object can be highly reflective an object can be made up of say a combination of reflective and absorptive properties it is something like whatever light that is incident on an object if it gets completely absorbed we call it a black body as you can see here in the picture when the light is incident upon a black body the whole of the light gets absorbed and nothing gets reflected so but what we observe is a reflected light okay what we observe is only the reflected light so a black body is something like whatever light that is incident absorbs the whole light so it appears black or dark so unlike that we have another kind of object where say if the surface of the object is imagined to be like this very much ruggy rough and it is made up of it is made up of what is called very rough texturey kind of surface so when light is incident some light is absorbed some light is reflected in multiple directions so that is called diffuse reflection so a part of the light is absorbed and some part of the light gets reflected in all directions equally the other kind of reflection is specular reflection so in the kind of surfaces that exhibit this property are like say where when the light is incident the whole of the light gets reflected in only one particular direction so that means you will see what is called a bright spot on the surface so that is called specular highlight so as we can observe that most of the surfaces exhibit both specular and diffuse properties offer their services so let us see how light computation is done how the interaction of light with objects is done so what are the factors that are involved uh what are the computational parameters that are taken into account here the amount of light incident so how much light is falling on the object the color of the incident light so color also matters the relation between viewing direction and the incident direction it is also important because we are viewing from somewhere the light is incident and if it does not get reflected in the direction of viewing we do not have to bother about computing the light in the direction of viewing and the surface properties of objects because they are going to define whether the light how much of light should get reflected from the surfaces the type of the light sources in the scene are the reflective properties of neighboring objects so sometimes the neighboring objects also play a major role and ambient light and its color as well so colored light also influences the way that we observe a light or the reflector light so interaction of light with objects can be categorized into two which is diffuse scattering and specular reflections as we discussed earlier a diffuse scattering is where the amount of light incident on the object a part of it is reflected in all possible directions a part of the light is absorbed so as you can see a ball like object is shown here when it is made up of material with diffuse properties it will appear like this but when an object is made up of metals or maybe like a plastic like objects or like say shiny surfaces whatever light that falls on the object most of the light gets reflected in a specific direction so that is why you would see what is called a specular highlight this is called this bright spot on the surface is called a specular highlight so as i said earlier most of the most of the objects are made up of surfaces or materials which exhibit a combination of both diffuse and specular properties so flat shading so is a basic version of shading where we tend not to bother much about the various undulations or the kinds of surface properties what we do is we imagine the surfaces are made up of polygonal flat faces and also that we consider one polygonal phase on the object and we compute the normal vector for that compute the amount of reflected light assuming a given light source and a viewing direction and then for the whole of the polygonal phase will be applying the same color or the same intensity so that's where because we apply the same color throughout the polygonal phase ah as you can see here the donut donut-like object here appears jagged and roughed up as all the polygonal individual polygonal faces are very much clear with shading techniques better shading techniques like most smooth shading techniques which we'll be seeing later we will be able to give the object a very smooth like appearance so as you can see in the smooth shading uh there are two of standard shading techniques used one is governed shading the other one is phong shading in the case of gaurav shading we interpolate the colors assuming the vertices of a polygonal phase are given various colors and we try to interpolate the in between colors between two vertices so we interpolate the colors between two known vertex colors well in the case of phong shading the normal vectors are interpolated so unlike gaurav shading here the normal vectors are interpolated as we know from earlier discussions normal vectors is an important component of 3d world because normal vectors identify the orientation of an object in the 3d world so what we'll do is we'll be computing the normal vectors of various vertices and then we will be interpolating the normal vector directions so that is more accurate and it gives a better surface than the gorod shading so as you can see the flat shaded one of a ball flat shaded appears like so what is called tessellated a gourd shading one appears like this and a fong shading one is so perfect and smooth so the light sources so once the shading is done shading models are done so we can also imagine the light sources in the 3d world so we can imagine four types of lights one is the point light the other one is the direction light the spotlight and the area light so light also has got properties so as you can imagine light can be directional so we have a direction for it you can attenuate that is you can fix up a distance after which the light intensity dies or the let's say it's the attenuation you can imagine the light properties like diffuse ambient specular uh the color of the light is also an important factor which we can consider so here uh let us go further into the next level of visual realism which is applying textures so we have added lights we have added we have computed the shading model or we have used the shading model and the next step is to add textures so by adding proper textures we would get a feel for the kind of material with which the object is made so in 3d graphics we can make surfaces look more realistic by trying various textures like which are made up of either bitmap or procedural what is a texture texture is fundamentally an image okay what we will do is it is something like say imagine you you wanted a globe like object you can imagine a sphere like thing first what you would do is you would take a sphere and then you would wrap around a sheet of a printed flat globe you would wrap around that sheet around the spherical surface so that is what we are going to do here we are going to imagine a 2d map and then we wrap around the 2d map object of choice so this is there are two ways in which you can imagine a texture one is either you can imagine a bitmap or you can use a mathematical equation to create a bitmap ok so to create a map or to create a procedure that creates an image or an intensity value so how do we apply textures given a 3d object in the 3d world and we have now a texture which is a 2d image okay now as you can see here this is the 3d object which is a cylindrical surface and this is the bitmap image which we would like to use it as texture so we are trying to take this texture and wrap it around the cylindrical surface so how do we do is our aim is to find for every position on the cylinder or the cylindrical surface we try to compute or we try to find an equivalent pixel from the bitmap texture image so once this image is now used being used as texture for texture image it is called it is a texture and it is in 2d world so for every pixel in the on the cylinder or for every position on the cylinder will be using will be computing or will be selecting a position on the 2d world so this in between 0 0 and 1 1 space is called the texture space so we are in the we are in the pixel world or we once we collect a pixel and then use it as a texture we call it a text cell pixel and pixel okay once the texel is used to map or to attach to a 3d position now the texture we say is applied to the 3d object so that is how we do it in the reverse order so this is the texture space for every position here we normalize the bitmap 2d space into texture space which is between 0 0 and 1 1. so we take each and every point and we convert that into an equivalent value and we find a suitable pixel here a suitable position here okay now you can see this order of the image space okay a texture space the object space the viewing space and the screen space so the arrow marks are in the reverse direction okay so you should observe that so we will be going it in the reverse direction okay screen space viewing space object space texture space and in the image space ok the texture space is the normalized version of the image space ok this is what is the texture space and textures also can be used are like say the bitmaps also can be used to create a roughness on surfaces for example you can imagine orange the orange surface is such that there are lot of dimples on the surface so the surface is not smooth like your ball or spherical surfaces perfectly spherical orange is a spherical but its surface is lot of it has got a lot of dimples dimples are lows on the surface are the low means its a no its a valley like or its a hello as you can see here on the teapot there are a lot of dimples so how do we create such a surface is we can use the bitmap or the texture space and we can try to perturb the normal vectors of the surface of the object by the perturbing the normal vectors according to the texture values are according to the intensity values in the texture space so that is where we can modulate this modulation gives us a feeling that so what we can do is on the low you can you can redirect the normal vector so that it sees in a different direction so that the reflection at that point is almost minimal okay when no light is reflected from a point it appears as if it is a dimple okay otherwise it is a high so it is a low and it is high so we can recreate such surfaces which have dimples like orange the surface of an orange width ah by modulating the normal vector using the texture values and reflection mapping is one another technique where you can reflect the surrounding environment on the surfaces of objects often you can see when somebody wears a spectacle ah you can see the surrounding environment seen on the spectacle so that is the nearby objects or the objects in the outer outer world are seen on the surfaces of the highly reflective metallic objects like you can as you can see here the metal teapot ah the surrounding environment can is seen on the surface so this can be done by techniques like ray tracing or we will see further the shadows is the next step of visual realism so once we add lights it is obvious that there are shadows so if the light is unlike an ambient light there will be a shadow okay so how do we compute shadow or how do we create a feeling that the object is casting a shadow so for that what we can do is we can imagine a light source and we can compute we can take projections of all the faces of the object imagine a cube there are six faces for the cube now you can imagine a light source ah you can compute the projected version of the of each of the faces on a flat plane which is basically the ground okay so once we add up all the projected versions of all the six faces on a planar surface like ground we will once the some the projected versions are summed up we will get the shadow shape so the shape of the shadow is computed by summing up all the projected versions of all the possible faces of an object here the example given is for a cube you can read here further which you would understand better so the last step and the towards visual realism is ray tracing ray tracing is such a fantastic technique where it's and it's so complex it's it takes quite a lot of time the algorithms are so complex that to give as a real life like object a feeling uh it's it's very difficult because of lot of interactions of light because of the colored conditions of the light because the viewing positions chosen because of interactions of light with various objects uh and because of the surface properties of the objects we get to see various kinds of ah surfaces and objects ah ray tracing is a global illumination based rendering method for generating realistic images on the computer so adding realism is so fundamental and it is the ultimate objective ah the advantage of ray tracing are to enhance visual realism lighting simulation hidden surface removal shadow calculation texturing reflections and transparency as you can see here a principle of ray tracing is to calculate what is called that is the amount of light that reaches a given pixel position so imagine we are standing here and we are seeing the world and before your eyes you can imagine a rectangular grid the grid is our viewing area okay in the grid for each pixel position you can start with the first pixel position on top and you can fire a ray into the 3d world and the light or the ray hits various objects while it moves imagine the 3d the ray hits the objects in the 3d world when it hits depending on the surface properties of the object the ray will take multiple directions some of the light rays get absorbed and some of the light rays you can you can divide the light rays or the intensities further and you should track the ray till it reaches the light source because say we have to track a ray from the grid position or the from every pixel position on the grid towards the light source why it is in fact you can imagine ok why it should be done like that in fact every light originates from a light source and then it reflects and refracts and then it gets absorbed and finally lot of light rays go in multiple directions and in fact we should track the light ray like that no why because we are not interested in all those light rays that emanate from the light source and then go in all possible directions and which finally do not reach this grid okay which finally do not reach this grid if we do that that is if we track the light from the source towards ah to various into various positions we will be wasting a lot of time and source resources and thereby will lose a lot of processing power as well wasting a lot of processing power as well so instead we'll be selecting a pixel position on the grid and will be firing a light will be firing array into the 3d world and it takes multiple directions and we can calculate reflections and refractions and the final finally these should reach the light source so we will be calculating how much light intensity finally reaches the ah pixel position here so for every pixel position we should calculate this so for the entire grid once we do this we will get to see such fantastic images as you can see here these are the ray traced images as you can notice simple and ordinary images look like this ordinary visuals look that look like this but ray traced images look like this as you can see how fantastically the reflections and refractions and the transparencies there can be transparent objects partly opaque and partly transparent objects and imagine such complex objects in the 3d world but we can still fantastically do this rendering of various objects so that they appear like real life like by a retracing technique with this we come to the end of the 19th module of the computer graphics and visualization subject will be continuing in the next module with the topic with the animation which will be the next topic in the 20th module thank you 
5ZHA7liL1wM,22,"Subject: Computer Science
Paper: Computer graphics and visualization",2021-03-30T06:23:29Z,Types of Visualization and Design Principles of Visualization,https://i.ytimg.com/vi/5ZHA7liL1wM/hqdefault.jpg,e-PG Pathshala,PT40M34S,false,10,0,0,0,0,welcome to ugc's e-pad sharla lecture series today the subject is introduction to visualization and in today's module we will be looking at the different types of visualization and the design principle associated with visualization so a gist of what we are going to learn today we will be learning at what are the different types of visualizations that are available we will also learn visualization and with respect to various aspects of visualization we will be looking at the design principle associated with the visualization and we will also learn about certain examples of visualization design techniques so to start with let us see what is the purpose of visualization as we have already seen in the previous module that in the with the help of visualization it is possible for us to do certain kind of self-study or analysis we can also go in for some kind of interactive exploration and we try to we try to gain understanding of certain principles and with the with the help of visualization it is possible for us to understand make some kind of understanding between the peers we can also probe inside the problem domain it is possible for us to analyze the data and it is also easy visualization acts as a tool for easy communication between the peers it also helps as a tool for presenting something to the general public and then overall it is a presentation of data and with the help of this it is possible for us to communicate with the general audience if we look at the visualization principle we can classify them into two two types one is a expressiveness the other one is the effectiveness expressiveness in the sense it tells that you have to encode all the facts into the result sheet and we are supposed to encode only the facts into the result whereas effectiveness talks about it depends on the capability of the perceiver and it encodes the more important information in a more effective manner so expressiveness and effectiveness both together they form the interesting principles of visualization as such so on today we have looked at the visualization pipeline in the previous module so according to the visualization pipeline the simulated or observed data set is first filtered out and then it is mapped on to some geometrical attributes and these geometrical attributes are later mapped on to the viewing attributes and object attributes and finally they are rendered onto the screen onto the display device and the final rendering can be either recorded or it is supposed to be displayed to some appropriate end users so visualization also helps in amplifying our cognition or knowledge it increases the resources it reduces the search effect it enhances the recognition of patterns with the help of visualization it is possible for us to perform certain kind of perceptual inference we can also do certain kind of perceptual monitoring onto a manipulatable medium so the with the help of visualization we can say finally that it amplifies the cognition of the knowledge if you look at visualization as such it consists of two subjects one is the scientific visualization which is visualization of physical data here they have given an example the ozone layer that is present around the earth can be visualized in this manner the other kind of visualization is the information visualization which is the visualization of abstract data the example here given here is the automobile website visualizing the links that are available in the automobile website so these two are different flavors of visualization one is the scientific visualization the other one is the information visualization where in scientific visualization we are talking about the physical or the raw data and in the case of information visualization we are talking about the abstract data so if you look at the pros and cons of scientific and information visualization in scientific visualization the focus is on visualizing an entity which is measured in a multi-dimensional space whereas in the case of information visualization the focus is on visualizing the set of observations which are going to be multivariate in nature and in scientific visualization we can see the underlying field is recreated from the sampled data whereas in information visualization there is no such underlying field it is the data itself that we want to visualize in scientific visualization it is easy for us to understand the relationship between the various variables whereas an information visualization the relationship between the various variables is not well understood so these are the pros and cons associated with scientific and information visualizing respect to the information types we classify the visualization as multi-dimensional one-dimensional two-dimensional three-dimensional hierarchy hierarchies entries networks and graphs and document collections so examples of one-dimensional information types are timelines example of two-dimensional information types of maps for three-dimensional we have volume representation for hierarchies and trees we have directory representation for networks and graphs it is webcam web and communications for document collections we have digital libraries as example and for multi-dimensional information type we have multi-dimensional data set so let us look at each and every data in detail so for the one dimensional data set if you see usually the data set is linear data so examples are textual documents source code etc which are going to be linear in nature they use the problems that we need the the user when needs to the user problems that are associated with this one-dimensional data our users are supposed to find out uh to find out something to replace something our users need to need to count certain information or certain variables within the document or within the linear data and the encoding is supposed to be done with respect to the forms the color the size of the object the layout of the object the scrolling and the selection capabilities product examples for these are text editors and route browsers in the case of 2d information 2d information types examples of planar are map data where we have the applications as geographical maps floor plans newspaper layouts these all come under planner or map data the user problems associated with the 2d information types are to find the adjacent items to search for a particular containment to find the paths within the data to filter certain data or to get details on demand some of the encoding principles that we use here are size color layout arrangement multiple layers product example is cad in the case of three dimensional data 3d information type we have the real world objects examples are building and the human body user problems associated with this with this are to find out the adjacency in three dimensional data set to find out the inside outside relationship to look at the position and to get the orientation of the information encoding principles if you see that that are applicable on three dimensional data set are overviews landmarks transparency color perspectiveness and stereo display product example is cat temporal data is another type of data wherein the the users come across time series data example for such kind of time series data or medical records project management historical presentation user problems associated with these time series data are finding all the events before a particular time or after or during some particular time period or moment encoding principles that we use here are timelines next comes a multi-dimensional data in the case of multi-dimensional data examples are relational and statistical databases tuples the user problems associated with these kind of multi-dimensional data set are the finding out patterns to find out clusters to find out the correlations between the various data sets to find out the gaps and outliers that exist between these multi-dimensional dataset the challenges here are to simultaneously display many dimensions of the large subset of data to create displays that best encode the data pattern and then to rapidly select a subset of tuples or dimensions these are some of the challenges that are associated with multi-dimensional dataset next we have the tree type data where we come across exponential data type such a example for hierarchies and tree structures the user problems associated with these kind of tree type data sets are finding the structural properties to find the height of the tree to find out the number of children to find out the nodes within which has the same attributes some of the encoding principles that are associated with these kind of tree type data are node link diagrams allowing the encoding of linkage between the entities tree maps that child rectangles are present inside the parent rectangles product examples or windows explorer and internet traffic next comes the network data so example the graph data applications are to find out when user problems associated with this or to find out the shortest path to find out and topology related problems encoding principles that are associated with these kind of network data set are node link diagram and matrix kind of diagrams so the in all these various data types we have seen the basic visualization task that can be performed over these data types are overview to find out the overview of the collection of a data set or it is possible for us to zoom in or zoom on into objects of interest we can filter out uninterested items or we can filter out interested items and show it to the end user we can show details on demand that is it is possible for us to view the details only when the user is in need of those details we can relate that is we can view the relationship between two attributes we can do certain we can associate certain history elements like it is possible for us to undo redo or refine the given data set and it is also possible for us to extract a subset of the dataset that is available these are the various basic visualization tasks that can be performed over the given data set so if you look at the user tasks for the for the user it is possible for him to perform some of the easy stuff like to find out the minimum and maximum of the data that is available to find out the average or percentage of the data that is available and these only involve only the data item or the value the hard stuff with respect to user tasks are to find out patterns or trends or distributions or changes that change over time to find out outliers or exemptions from the graph or from the visualization to find out the relationships and correlations in a multi way data set to combine the min max and to find out the tradeoffs to find out clusters groups comparisons and context to find out anomalies and data errors and to find out paths so these are some of the hard stuff or the user tasks that can be performed on the visualization the easy stuff can be performed over an excel data sheet whereas the hard stuff can only be performed over the visualization so based on this we try to we also classify the visualization techniques based on the type of information so if you look at the type of information as we have previously seen it is visualization of information structures like trees or networks or it can be visualization of multivariate data set like one-dimensional two-dimensional 3d or n-dimensional and temporal data set and then it is visualization of workspaces like windows web pages documents etc based on how we interact with the data we can classify the various ah visualization so this is a classification of information visualization technique based on the interaction that the user performs with the data set overview is fisheries kind of data set zooming the examples are table length kind of data set in interactive filtering they have magic lenses in brushing and linking we have an example as excubi and details on demand example is given as spot fire so these are certain applications wherein all these ah kind of interactions can be performed over the data set in the fisheries view it is possible for me to get an overview of the entire data set using table lens it is possible for me to zoom in and zoom in zoom out certain objects on the screen using magic lenses it is possible for me to perform certain kind of filtering i can filter out certain data set and i can just look into the data set by using the magic lenses by using the x-goby interface it is possible for me to brush and link certain data certain data that are available and then it is possible for me to get details as and when i need in the spot fire application so some of the information visualization design issues are how do i select what data should we choose to visualize since we have huge amount of data we don't know what when which kind of data or which set of data that we need to visualize on the screen then next comes a representation how should the data be represented with what colors it is supposed to be represented and where it is supposed to be represented so this is also a big challenge this is one and is considered to be one of the design issues another design issue associated with the information visualization is presentation how is it possible for me to present the entire data set because i have too much of data and the display space is very small too little display space is available so how is it possible for me to present the entire data set onto the display device then scale and dimensionality if we have more number of variables to visualize how do i visualize more number of variables that are available or n dimensional data that is available and then what kind of interaction how the user can interact with the data and how the user can explore the given data so that also is a challenge associated and is considered to be one of the information visualization design issue so if you look at this information visualization applications they have complex documents like biographies manuscripts data structure data structures that can be visualized then histories of data can also be visualized like patient histories students records etc data classifications like table of contents organization charts etc can be visualized network data like telecom connections and it usages highways etc can be visualized using these some of the visualization techniques so here comes certain examples of information visualization this is stephen x c soft which is a tool which is useful for visualizing the source code of the the source code so here is a here actually we have the source code in a particular specific programming language so we have various lines of code these are represented here the number of times modifications performed over the lines of code are represented using the color code so this is a color code that is available and for this particular set of lines these many number of yellow represents more i mean reds most times the modifications has been performed and blue represents the least number of times a modification has been performed over the source code so this entire line segment tells at what time and that how many number of times the source code has been modified for these set of lines so similarly we have the source code modification data to be visualized using this uh stephen x c software tool so looking at this it is possible for us to infer that may so many a times your source code has been modified it means that so many versions of that particular source code has occurred so all these kind of and they can also infer certain patterns which are the source code that are modified more frequently which are the source code that are modified very less frequently which are the source code that are modified together so such kind of dependencies that exist between the source code can also be analyzed using this application next is the hyperbolic trees so this hyperbolic tree is here we have two examples of 2d hyperbolic tree and 3d hyperbolic tree this is displayed in a three dimensional view so these kind of say the websites and the relationship between the websites can be represented in the form of hyperbolic trees so this is one kind of representation so here we can see that we have so many web pages which are linked with so many other web pages and they are linked in this panel so next one is a teamscape next information visualization example is a teamscape generated by katya it talks about the entire document this shows the document and the changes that are made to the particular document so teamscape represents and it also talks about the occurrence of the theme suppose if the document theme is about uh say a sports item where all inside the document that particular sports item has been stressed those areas are all shown as raised areas and shown in red color and they're all in the document the sport information about this pose is very less or shown as some blue color so using when looking at this kind of visual it is possible for us to understand the location of the document where exactly the thematic content is high if you look at it on the right hand side we can see we have two red color peaks on the right hand side corner we have two red color peaks so these shows that in these two locations the thematic information is huge whereas in the center of the document if you see the thematic information is very less because it is mostly of blue color and it is and it is smooth in nature so wherever peak occurs it means that the thematic content of high in that particular document so this is also another one example of information visualization next this is another one interactive graphics application which is called as a home finder using this application it is possible for a end user to check for homes so he can suppose a person who is interested in knowing whether i mean in renting a particular house he has to give us the entire preferences inside this home finder he has to tell uh what can what can be the rent that you can offer how many number of bedrooms should be there what should be the size of the entire house and all such kind of criteria can be given inside the home finder tool and once pc search automatically the home finder tool will show all the relevant homes that are available near the location and with respect to other preferences it will display all the relevant homes in the order of our preferences so that the end user can go and select each and every house and you can see what is the rent of that house how many rooms are there and that house and some kind of information related to that house can be made available so this is also another one interactive visualization which is when the application name is given as home finder so these are uh the different dimensions of the exploratory data visualization so in one side we can say the various we can see various data visualization techniques and in one access we can see the distortion techniques that are available and in one access we can see the kind of interaction techniques that are available so in the data visualization technique access we can see the data can be graph based data hierarchical data pixel oriented data icon based data or geometric data and the distortion techniques the distortion can be a simple distortion or it can be a complex distortion caused by a combination of various distortions and in the interaction technique access we can see that there are various techniques like map mappings projections filtering linking and brushing and zooming which are available in the interaction techniques access so these are the different dimensions of exploratory data visualizations then there are other examples like location probes which is example is a film frying finder which uses a location to view additional women which use the location to view additional data to view certain i mean get certain information about certain films this can be used then we have the viewpoint controls examples are information neurals so in these kind of information murals we can get the overview data as well as the detailed information then we apply distortion techniques examples of perspective valve where we apply focus plus context approach then based on the data types the information the visualization can also be classified as univariate data bivariate data and then trivariate data visualization in univariate data visualization we can see usually the plots are in the form of dot plot or it can this is a dot plot or it can be in the form of a bar chart or it can be in the form of an histogram so these are examples of visualization of univariate data type next comes a bivariate data type so wherein it can be represented in the form of a scatter plot with respect to x and y axis then we have the trivariate data type so in dry variate data type we can either use the 3d scatter plot or a spin plot or it can be 2d plot plus any one attribute like size or color or whatever it is so this is an example of a trivariate data type then we also have visual abstractions which are based on interactive 3d animation techniques so if you look at the visual abstractions we have visual abstractions in the sense some of the information that is being visualized on the screen will be abstracted from the end user's view so there may be some kind of when abstractions or some some amount of information may be beyond the or may be situated as hidden surfaces on the visuals so those are called as visual obstructions which are not shown to the end user's eye so such kind of some examples of such kind of structures are hierarchical structures where an example for cone trees then we have linear structures examples of perspective wall we have continuous data displacement which is in the form of data sculpture and we have spatial data representation example of office floor plan so these are examples of countries if you look at this visualization we can see that whatever is available at the the front portion of the cone that unknown is displayed to the end user whichever is at the back of the back portion of the cone is not shown shown to the end user so such kind of visual obstructions can be made available to the end user by using some kind of 3d interactive animation techniques so country is one such example this is also another one country a three dimensional country wherein the user can just rotate the entire cone and see what are the data that are available at the back of the phone then perspective wall is another one example the example for visual abstraction wherein all the information is available on a particular wall and the previous histories are also available with respect to this wall on various walls so the size of the walls are distorted and the shape of the wall is also distorted to get to show an overview information to the end user so this is an example of overview and detail byron i can get the entire overview of the full ah dog and full information as well as i get a detailed view of the specific information that i am in need of so this is an example which is called as a perspective wall then we have spatial data representation which can be represented in the form of web book web book and web foragers are examples of spatial data representation baron the entire data set is made available to the end user in the form of a book three dimensional book so the end user can just flip through the pages of the book and he can look into the entire textbook as such so this is also another one example for qualitative as well as quantitative data that is being displayed in the form of contour plots and line diagrams then this is also a wonderful example of a time varying data set an example of static the area versus time varying data set where the data set varies with respect to time so the static data set is one which is static at a particular instance of time and at a particular point of view whereas in a time varying animation it evolves around the timeline and the dynamic data is represented or with respect to the point of view i can just rotate and see what happens so such kind of animations are called time varying animations next comes the scientific visualization byron this is an example is to show the damage structures that are available on the wall the damages to the structures can be visualized in these forms so these are examples of damage structures visualization there is also an example of damage structure visualization which is specialized in the form of an animation so this is a contour surface and with this the second visualization is an example of volume visualization so these are composite representation of contour surfaces then we have another type of visualization which is called as stereo visualization so in the case of stereo visualization it is possible for the eye to have a kind of two two and a half ah dimension effect or similar to three dimensional effect so in this stereo visualization the user has to bear in a glass where you will have the red and the blue glasses and the shutter glasses have a frequency of work at the frequency of 60 hertz and are synchronized with the projected images the polarized classes should be it should be it can be either linear circular or it can be synchronized with the projected images so this is one example of the red blue stereo visualization that is shown on the screen so this visual will be more effective if we can wear these kind of stereoscopic devices and because stereoscopic glasses and if you viewed it it will look as though it is a two and a half dimension visualization so till now we have been looking at the various types of visualizations and various attributes associated with the different types of visualization next we will talk about the various aspects of design aspects that are associated with visualization if we look at the design aspect we they say that problem solving is the understanding of what is needed to solve a problem which includes design and making choices and revisions so when i try to design certain things i need to make choices and i need to revise it so many number of times what is visual communication he says visual communication is out of seeing by using pictures and words to convey information about different ideas and concepts so in instead of using words i use an art to visually communicate something to the end user the function and the information refer to the purpose and value of design as well as the message conveyed will be with respect to the selected audience so these are the design aspects so if i look at the principles of design well let us look at the various principles of design one by one the first principle is a balance principle balance is the optical illusion of equal spacing of objects giving equal spacing of objects with respect to the center point is called as a balance so formal balance is symmetrical in nature wherein the elements on a page can be centered and it can be evenly distributed either vertically or horizontally and it is supposed to have some kind of symmetry among itself so these kind of layouts they often convey a sense of familiarity or elegance of our sense of serious thought so balance is once a an important design principle this is informal balance in the case of formal balance we have seen that the the formal balance should be symmetrical in nature which means the elements are supposed to be placed at equal distances to each other in the case of informal balance it is asymmetrical in nature and moreover it involves placement of elements in a manner that allows the elements of varying visual weights to balance one another so here we can see that there are two different objects one object is placed in the front and another object placed at the back but there is no balance between these two object with respect to the weight as well as with respect to the size of the object that is being shown so for example it is possible to balance a heavy weight with a cluster of lighter weight objects so in this example we have seen that a heavy white object is represented in the front and a cluster of light beat objects are represented at the back so that it is possible for them to perform some kind of informal balance in the visual so this is another one interesting principle design principle so these two are examples of informal balance baron we can see an object which is placed in the front has got more weight when compared to the object that is placed at the back so similarly here we can see that the object that is placed at the back has got more weight when compared to the objects that are placed in the front but in the front they try to balance it informally by adding more clutter of objects the next principle of design is a rhythm so rhythm is a reoccurring movement or pattern which can produce enough produce a feeling of motion in design so it can the rhythm can be based on the face shape color or spacing or angle and texture of the material different types of rhythm will produce different effects in the design so there can be various types of effects that can be produced using this algorithm it can be repetition that is repeating similar elements in a consistent manner or it can be a variation which is change in form size or location so these are examples of rhythms which try to convey when which try to convey a feeling of motion in their design so these are different examples of rhythms so if you look at this bubble it may it conveys a meaning of a feeling of motion within itself so these are also examples of rhythm whereas when this in this example we can see that a particular pattern is being repeated so many number of times and here it is not the same the same pattern is repeated but with varying form size and location the next design principle is proportion proportion is the relative size of an object in comparison to the entire object so if we look at this particular object the head part of this particular object has got more size when compared to the rest of the objects so this is like so there is a kind of proportionality that exists between the head part as well as the body part of the object so they see that a caricature is funny because the head is out of proportion the head is very big when compared to the body of the entire object so if you look at this human being the entire body objects are always in proportion with each other whereas in caricatures like this we can see that the face as well as a body are not in proportion with each other so these are different caricatures where we can see the proportionality is not being maintained wherein the head is of different proportion when compared to the size of the body next interesting uh design principle is emphasis emphasis is a method used to draw attention to a part of a design by making it as a focal point as the main idea so with the help of emphasis we try to draw the attention of the end user to specific part of the visual so these kind of emphasis can be made using certain common techniques like we can use contrast elements like either one element can be made very big or small or thick or thin they can use different colors for most important elements or attractive colors for the most important element we can reverse an element out of the background so these are certain techniques that we try to follow to provide some kind of or to add some kind of emphasis to a particular design so these are examples for emphasis if you see here the dots are being emphasized by showing us by by having different shapes having different color when compared to these blocks so here we can see that the inner square is being emphasized by having a different color similarly here also the inner square is emphasized by having a different color here we can see that the entire black part is emphasized by having a different color with respect to the other part of it so here also we have two a and then an a and the mirror image of that a mirror image of the a is amplified by having by providing different color to the mirror emphasis mirror image of a so this is these are examples for emphasis so this is another example for emphasis wherein the contrast achieves emphasis by setting the point of emphasis apart from the rest of the background so the use of a neutral background isolates the point of emphasis so this is a neutral background where there is no emphasis at all contrast of color texture or shape will call attention to a specific point if it is possible for the designer to provide some kind of contrast changes with respect to color or texture or shape it will try to attract the attention of the end user to some specific point on to the visuals the next design principle is unity unity is nothing but the completeness and harmony of a design unity is achieved when all the elements belong together several methods of organizations are used are used to produce this unity in design by grouping certain objects or using a grid of grid or a subdivision space and by repeating something repetition which means repeating certain elements throughout the entire design so these are these are the examples for unity so your guideline is if an element can be removed without affecting the design it wasn't needed anyway so here we can see these yellow color blocks are being repeated so many number of times similarly here all these blocks are being repeated so many number of times even if one block is being removed from this visual it doesn't matter anyway to the entire visual but if this specific black color block is being removed from the visual it matters a lot so that is a importance of unity as such then this is also another example of unity the design shows unity with similar muted colors and dress styles so we can see there is similar dress style and similar colors being used to emphasize on the unity the next element of design is a line minus length position and direction and it is either visible or invisible a line is basically any distance a line is actually called as a distance between two points and line can take a variety of shapes and functions a line can act as a connectivity between two separate areas or it can act as a separator to distinguish between once or to disintegrate one unified area a line can act as an outlier a line can be used in graphs and grids line can also be used in symbolisms so these are examples of various types of lines so we have ah horizontal lines and then we have grid lines and then we have slanting lines so these are certain examples of line this is line and design we can see how lines are being used in visual structures in different ways the next important element of design is a shape so shape is any form that occupies and defines a negative as well as a positive space shape is anything that us with shape or depth there are three different types of shapes so we can either call the shape as a geometrical shape can be in the form of a geometrical shape a triangle square a circle the shape can be some kind of natural shape like animals plants or human beings or the shape can be some kind of abstract shape wherein it is a simplified version of natural shapes so these are certain examples of shapes so letter a has a shape of its own this is the geometrical shape so these are various geometrical shapes these are synthesized shapes the spiral is a synthesized shape so here we have geometrical shape examples triangle squares and circles natural shape examples with animals plants and human beings and then we have abstract shape examples with abstract objects that are being created which are simplified versions of natural object the next element of design is a color color is represented as a hue of pigment or light and is produced by the subtraction of our addition of primary and secondary colors produced from light there are different uses of colors with the help of color it is possible for us to attract the end user it also acts as a visual stimuli they can organize certain information using color and it is also possible for us to provoke certain emotional response by using different colors so here we can see when white light is passed through a prism that is being diffracted as a spectrum so we have various colors being produced in the spectrum so visible spectrum is only a small part of the entire electromagnetic spectrum as such color is distinguishable by the eye so these are various examples of colors so here we can see the emphasis given to colors then the next element of design is a texture texture is a look and feel of an object the appearance of the visual object depends on the kind of texture that has been applied over the object so the texture can be in the form of patterns so patterns are good examples of visual texture till now to summarize in this module we have been looking at the various types of visualizations like scientific and information visualization we have also looked at the information visualizations in types like one dimensional 2d 3d trees and network kind of visualization we have looked at various examples of information visualization film finder location pro perspective wall theme steps these are good examples of information visualization we have also looked at the design principles associated with the visualizations like unity shape emphasis proportion texture color and balance thank you 
yggiiMxKUBY,27,"This is the 2nd  Online CSE class conducted on April 30th, 2020 on Computer Graphics and Visualization which is Module 3 from the CSE 6th Semester. The content is part of the VTU Computer Science Syllabus. The  CSE class was conducted by our Professor Priyadarshini. The Class captured the matrix representation of 3D Translation and 3D Rotation.


Module 3 | CSE VI Sem Computer Graphics & Visualization | VTU Syllabus| CITech",2020-04-30T14:29:08Z,"3D Translation & 3D Rotation, CSE Online Classes by Cambridge Institute of Technology",https://i.ytimg.com/vi/yggiiMxKUBY/hqdefault.jpg,Dept of CSE- Cambridge Inst of Tech,PT46M40S,false,24,0,0,0,0,[Music] you yes good morning I'm starting today with the topic three dimensional transformations as we already studied two dimensional transformations which includes translation which includes translation scaling rotation these three are a major transformation functions which we use with this the additional transformation functions we're sharing and reflection so all this we have learned with respect to 2d translation 2d transformations so today we will learn the same thing with respect to 3d transformation just one by one so 3d transformation the first one we will before going to any of the transformation functions or we will see we will just learn about the basics of 3d dimensional transformations so here use homogeneous coordinates just as in 2d we already used homogeneous coordinate system in two dimensional transformation functions in the same way here we start using homogeneous coordinate system we are also learnt what is human is coordinate system right so when they come across a homogeneous coordinate system the transformation will be of four curve 4 cross 4 matrices which represents 4 element column vector in this package we are learning column rate but what is the column vector money value starts storing in the form of a column first so it goes like this yep so this is a column vector the value stores in this way and one more point is we will use a right-handed coordinate system here for our easy purpose so that's nothing but our Z will come out of the page here so you're able to see the z axis if we imagine that the Z actually comes out of our screen or out of our page if you are drawing this on your sheet why do we call it as a right-handed coordinate system because you can hold your right hand as well as your left hand down currently in front of you always the x axis will be towards your right right side and the y axis will be the up sides any coordinate system as you know whether it is a right-handed or Cartesian coordinate system that we are using here or left-handed Cartesian coordinate system in our Cartesian coordinate system all these we will plot like this the x and y our minus X minus y will come in the other way but our positive x and positive Y will always be like this that means X will be in the right hand side and Y will be projecting on a facing towards the upward side so now you keep both of your hands both your right hand and the left hand place your thumb towards the direction of X place your forefinger towards the y-axis that is upward I check your middle finger keep your right hand side and place your thumb towards your x-axis that's always will be a right right side and your forefinger to the upward and try to get to your middle finger give a position to the big middle finger so middle finger is coming towards which direction is that coming towards you so that is what when you place when you see in your right hand side it is coming the middle finger is coming towards you in the same way keep your left hand side down placing your x-axis that is your right side forefinger placing your y-axis that is your upside and check with your middle finger where it is placing it is placing our grace from you that I am writing here on the right side away from you this will be your left hand coordinate system this is your right hand coordinate system you have got it so here we are actually taking a right hand coordinate system for our all the example because we are able to see that image very clearly if we take the right hand side when we are putting this on D what I can say on the book or for the explanation but please note it when when you are executing this on the screen or when you're typing when you are typing your programs see to that your left hand side will be a better option because analyzing or placing on in the screen away from me the object is facing away from you will be analyzed better compared to the inside so that's why they say that when you project onto the screen or to any device see to that it will be left-hand side currently we are actually studying here it's we're drawing here that's why we have taken the right-hand side so this is our basic that I am taking my coordinate system that is a right-handed coordinate system right the first transformation functions we deal with the translation so what is a translation function the translation function you all be already know that the object is moving from one place to the other place is nothing but a translation function okay the object is moving from one place to the other place so now let us consider p point p is our initial point and p get a song completely similar to our 2d only thing is we are adding our z coordinate here everywhere you can see we are just adding the third coordinate system so if p is equal to XY said then a new point p dash will be x - y - I said - then how much distance your traversed or the displacement I call it us from P - P - we put that in the tongues called txt why I said that is my translation dum so what will be my X - then X - will be my current position and how much you have moved will be my X dash y dash will be my current Y position and how much you need to travel is my y dash so it's very simple when it comes to the Google map you will put your destination where you want to go that's nothing but how many kilometers you need to travel it's from starts from your car position so the current place plus how much of kilometer unity Traverse will be your destination so like that we will check for all three dimensions that is extension why - I said - so this is our 3 dimensional translation formulas how do we express in the matrix form we express in this way we already know we have just done in two-dimensional matrix hope where we don't have only the zach-bots leaving this spot we hope that will become our two-dimensional matrix two dimensional two dimensional translation matrix now we are seeing three dimensional translation matrix where we will have a set coordinate so we have added a set calling it we have handed the z coordinate here so now see how the people are drawing here this is your P point when you need to travel to your P - to go to this P - from your point how much you need to travel this will give me translation parameter that is T T includes how much you trash you need to travel with respect to x axis how much you need to travel with respect to y axis and how much you need to travel with respect to said axis everything will be your each and every point you mean as I have no three axis x axis y axis and z axis my point P will have all three values do you agree that a point P will have all three values that is nothing but if P will have X Y I fight which position with respect to X which position with respect to Y and which position with respect to insec all three values should be there so that means how much I need to travel obviously how much I need to travel with respect to x coordinate how much I need to travel with respect to y coordinate and how much I need to travel with respect to said coordinate everything is my DX I need to specify individually that is my translation so now you can see an object here very clearly the object is here initial point it has moved to the P - a new point what is a distance that it has traveled is my this distance T if I add that to my correct object then I can move I will get the position of to the of the new place where the object must be placed or it is placed already placed so my general formula will be P dash is equal to P is dou P what will be might be my B will be my XY said that's a current point what will be my T the T will be my matrix that's nothing but our T will be our for course for matrix is actually that I call it our self translation operator hope you have understood about the translation so next we will go to three dimensional rotation so three dimensional rotation we have we can rotate an object about any axis in space but the easiest rotation axis to handle are those that are parallel to the Cartesian coordinate axis so what they're saying here is when it comes to the rotation you don't have to rotate with respect to your axis itself should have a freedom to rotate however you know however you can that is nothing but an arbitrary rotation that is independent of your coordinate axis we will come to know what I'm actually trying to tell you so the same time you can rotate anywhere in the space not necessary that always you need to rotate with respect to the coordinate axis that's my first point please remember this point we will really verses later also we can use the combination of coordinate axis rotation to specify a rotation about any other line in space so the same we are going to learn this in further but currently as this is little complicated we will which is easy that is rotating with respect to your coordinate axis let us consider that first okay let us learn that first and then we will start calculating with respect to the other places okay so that means I have a coordinate axis XY and said okay XY I said rotation with respect to this axis with respect with respect to this yeah that is that is what we call it a so rotation with respect to the coordinate axis if I have some object but why I have to deal with this axis itself I can rotate however I want independent of this axis I just wanted to rotate here itself here itself fine that's the point here so but this point is actually a little difficult so before directly going into this point we will check how do we rotate with respect to the coordinate axis which is little simple we learn little simple one first and then we will go to the next one so that is having the other axis by conventional positive yah we have already seen this what was a by default rotation angle whether it will go clockwise or anti-clockwise I think you have remembered that it will go anti-clockwise right so that means whatever my rotation with respect to theta I had the theta was positive when I was rotating it as anti-clockwise right remember that if I want to rotate that clockwise if I want to rotate that clockwise then they might theta was inwards of my action one that will be minus theta my angle will be negative when it is clockwise when I try to rotate it clockwise but my angle is positive when the angle is positive then it rotates anti-clockwise so that means my default rotation is with respect to the anti-clockwise where my theta is positive okay this we have already learned to D so this is my convention this is by convention we are assuming this and further also that which we are going where it with the positive rotation angles which produce counterclockwise that is an anti clockwise rotation and is by default need to specify which accesses is very important now as we have already told you I'm going to rotate the objects with respect to the coordinate axis how many coordinate axis I have I have three X Y I said so when I have three all together I can't use all three axis using all three axis account rotate that means using a coordinate axis if I want to rotate only based on one I take time each axis I need to rotate right so that's why the same time we need to specify which axis the rotation is about in which axis are rotating whether I am rotating with respect to certain axis or I am rotating with respect to x axis or I am rotating with respect to Y axis so this is what we need to check so that if I want to see that and I have to specify which axis I am rotating this is just I will tell you later you will understand how witness our 2d case in 2d case whatever the rotation I had so I think we assume our 2d was only this much right only this much was our duty we didn't hide this right so our 2d rotation was cos theta please remember Li collect this minus sine theta sine theta cos theta right so that means I didn't hide my said axis here so what was my X Dash and recollect it was X cos theta minus y sine theta y dash is equal to X sine theta plus y cos theta so so that means if this matrix gets multiplied with X Y and side what will be my X dash y dash and Z sorry one homogeneous so that means multiply X cos theta with X X cos theta minus y sine theta 0 into 1 is actually 0 X into sine theta plus y into cos theta plus 0 so this is what we got you remember this fine so now let us go back I mean good the next slide how the rotation happens let's remember this we'll come back to this okay we just recollected our 2d two-dimensional case here we will come back to this now let's think of our 3d so how what did I say the rotation should happen around each and every coordinate axis if it is each and every coordinate axis then how it is happening here you can see the diagram here very clearly I have x axis fine now how the rotation use it usually happens keep your tongue towards any axis now here the axis rotation is happening with respect to Y it is given here with respect to x axis so in whichever the axis it is rotating place your tongue towards that axis and use all your other fingers starts to rotate in which angle it is rotating the other fingers directionally which angle in which side the direction the other fingers apart from your thumb is showing that will be your direction of rotation it's a clear that will be a direction of rotation so that means place your tongue towards x-axis now because we are rotating with respect to x-axis place your thumb towards your x axis now check all your other fingers see in which direction they are pointing to in that direction the rotation will be axis now which is the first axis it is coming across when you are placing your thumb on the x axis please see which axis it is coming across it is coming across y axis for a first followed by z axis correct correct okay now see your y-axis as it is rotating with respect to the y-axis your direction is towards the y-axis right now place your thumb towards the y-axis and check your all other four fingers in which direction they are showing you you just bend those fingers don't keep it straight bend it so that means showing your rotation bend it fine when you're bending all your fingers just in which direction it is rotating it is passing the first axis which axis z axis followed by x axis in the same way when it comes across surtaxes when it comes across an axis please your thumb to watch a sex s and check try to fold your fingers and then check in which axis it is passing first it is passing x axis followed by y axis is a clear sir axis followed by x axis okay so that our actual flow from these or axis to the towards it will go to x axis in the same way z axis z axis is like this listen like this now check right now so how it is coming this is my x axis actually I am touching my x axis first and then going to Y axis first okay so when it is towards the z axis and touchy x axis first rotate it so it is rotating like this this is my x axis this is my z axis yeah I'll keep green to the x-axis greenness my x-axis so I'm touching x-axis first and then not going to y-axis I am touching x-axis first and then I am going to y-axis so that leads when the rotation with respect to Z hundred which is that axis it is touching first x-axis and then it is going to y-axis hope it's clear okay now we people and see the calculation part what will be the rotation so now all different axes the rotation is happening so that means my rotation formula changes with respect to the axis so we will see the rotation formula fine now we will see rotation okay B I'm done with this right so now you have understood with respect to x axis Y to Z Y axis to X we will see that now now this is again a proper view for you how it is rotating again they have shown you hope you have understood this directly I will born on rotation with respect to the z axis the first one we will take rotation with respect to z axis now whenever the rotation with respect to z axis now the two dimensional z axis rotation so when it is said axis rotation I will have my X dash y dash Z dash five well it is z axis rotation it is going to which axis first rotation X first followed by Y right but Z remains sad it says my new value of Z is nothing it is that itself it remains that there is a constant value whatever I had a certain value it remains as it is sir - will remain Z but when it goes to now which is the first axis it is rotating going for the rotation x-axis so write the formula what is my formula it is going to x-axis first so my formula is X cos theta minus y sine theta followed by X sine theta plus y cos theta that remains as it is this I call it as equation 1 ok so that means this is what is said here see this formula is nothing bad I'll just tell you what is this after writing the matrix I think of a matrix is next yes fine so now parameter theta specifies the rotation angle about the z axis is we already know that and the set coordinate values are unchanged by this transformation that we have understood that side coordinate values are unchanged I'll go to the next slide now then how do I write in the form of a matrix form so that means that we have to include homogeneous x - y - Z - 1 is equal to XYZ 1 so what was my formula X cos theta minus y sine theta so this 2 will be 0 right I don't have a side here is that the same followed by X sine theta minus sorry plus cos theta 0 C so this is a column vector so this B or X this will be your wine this will be your said and this will be your homogeneous coordinate system this will be off Fuji is coordinate system then followed by I don't have a side so that I should have said itself that is one zero zero zero zero sorry is this one no this is not one if I need this one that X it will become X where I should make one this is what I should get set 0 0 this is my homogenous coordinate system now you can see this actually this part this part is my two dimensional right this part is my two dimensional let's go back and check our two dimensional see how why it was 2 dimensional because we did had such axis in two dimensional so be made surtaxes name so that's right constant so that's why x and y it is rotating so that's why we said z axis rotation is the same as 2d case or whatever the 2d default rotation you will take that is nothing but our said axis rotation in your 3d case ok see ok this was here formula in three dimensional five nos which we can write more compactly as how we can write P dash is equal to what is this rotation with respect to z axis our set of theta into P the dies are positive here hope you have understood this and go to the next one please make a note I just forgot to tell the translation inverse translation inverses same as here to D inverse T inverse is nothing but your T of minus TX it will be minus everywhere you said okay this is your T inverse fine so we'll come back to three - I said now we'll go for the next one now we will see with respect to the other two coordinates which is obtained with cyclic permutation of the coordinates theorem it is XYZ in equation 1 so we will take the same equation 1 we will start with the cyclic order ok you'll come to know that's to obtain x axis y axis rotation we have a cyclic replace so we will see this replace how it is so the equation for 3-dimensional x axis rotation so what will be now x axis rotation I just write it here itself instead of going back X Y and side if you want to rotate with respect to x axis which axis first comes first why right followed by Saturn y axis followed by z axis so now how do you write an equation I need X dash y dash and the - what is X dash now I am rotating with respect to X here so when I am rotating with respect X X will be constant that is X what will be Y - keep the same formula what was a real formula X cos theta minus y sine theta X sine theta plus y cos theta replay said that time we rotated with followed by X and white now we are rotating with respect to Y and say so all my X will be replaced by Y all my Y will be replaced by said that's all stuck with my formula now is y cos theta minus said sine theta followed by Y sine theta plus said cos theta I hope you understood hope you have understood this much and write the matrix from here itself the homogeneous matrix form it will be easy for you as we have already have a place here let's write it here itself the homogeneous matrix form will be equals to this is my rotation matrix followed by X Y so what will hear my X X remains X itself right sorry X remains X itself so what will be that because I will multiply X 1 into X is X plus everything else is 0 no why why is this side why is this side x is this side all my x is 0 here so our arm say you can make it seriously ok now what is why I'm dealing or leave it why inside so what is why why is here why cos theta minus sine theta this is sine theta cos theta zero zero one zero zero this is my how do you generalize it P dash equals okay P dash equals what is this we call it as rotation with respect to X theta how much angle by an angle theta around along x axis into P this is my generalized so use the same statements what we are used to for the set axis hope you have understood this fine let's go to the next part please give a message to Joseph in man Here I am not able to see if you want me to repeat it any case shall i go ahead it's free you can go on fine this is x-axis we have seen this we have seen all compact everything that is nothing but our mat looks from as well as generalized form we have seen now we will see with respect to y-axis so what happens with respect to y-axis so y-axis I have X Y and said so it is rotating like this so how which one it is crossing first coming across it is coming across sorry sorry we are in Y we are in Y we have done with side right we are in Y we are done with said this is my Y rotates like this so in y axis which rotation z axis followed by x axis z axis followed by x axis so let us slide the equation now write as it is X dash y dash Z dash what was our formula we will take our basic formula X cos theta minus y sine theta X sine theta plus y cos theta okay so now which which should be constant why should be constant because we are rotating with respect to y-axis now which is which axis coming across first axis said followed by X so all my X should be that all my Y should be all mine why should be X all my X should be said all my Y should be next you understood the order now this is based on this order this is disorder so which axis I'm coming across first z axis so I have to start writing my equation with respect to z axis first so that means it will become Z cos theta minus X sine theta which is the next axis it is coming across x axis my second equation so this will be z axis and this will be x axis so my x axis equation will be Z sine theta plus X cos theta is akia now let's see the equation X dash y dash and just wait you just complete once and then check with my answer whether you put able to write this matrix properly x y1 try to write so what is my top so the x axis this is my x - my ex - is here so my ex - calculates this part from this part first right so what should be the X - X cos theta X is multiplied with cos theta followed by I will get white down which is zero which is zero followed by I will get set tau which I have to check sine theta because in my equation theta is that into sine theta so set into sine theta C so you got X - you got X cos theta + 0 + Z sine theta now whatever with respect to Y Y terms remains constant so that is why comes here might is in my second part so I put it 0 first only I can use this now I need to check with said - which is my equation is this which actually multiplies with this row to the again this column right my third row with the X Y sub y the column of X Y Z so Z cos theta is my first one should I to write a cos theta here if I write cos theta here then this cos theta gets multiplied with X right so where I should write cos theta it is Z cos theta my set places this cos theta what is X X gets multiplied with sine theta that is minus sine theta 0 is 0 0 so which we can write general form will I write this V dash is equal to R with respect to which one it is y of theta multiplied with B hope you have understood this just two more minutes time I'll take to complete inverse okay this is what this final fine shall go ahead so let me write an inverse here itself because inverse is similar to your 2d our inverse of theta is nothing but your R of theta okay when you are doing inverse because my rotation matrix only deals with cos theta and sine theta cos of minus theta what did I do this is minus cos of minus theta will be a cos theta sine of minus theta will become minus sine theta which we need to remember okay which we need to remember which we can also say as our inverse of theta is equals to our transfer transfer transpose of theta so that's with respect to the inverse so P stands for transpose T stands for transpose final it's a simple one we have already learned in 2d also and the same thing okay 
gJy4SdMi95A,22,"Lets learn how exactly to fill inside a 2D polygon.

Course: Computer Graphics & Visualization
Course Code: 17CS62

BMS Institute of Technology and Management 
https://bmsit.ac.in/

Slide Courtesy: Some great author which I have found out after heavy research on internet",2020-03-23T07:00:42Z,"CG 17CS62 Module 2 - Scanline Filling Algorithm - Shankar R, Asst. Prof, CSE, BMSIT&M",https://i.ytimg.com/vi/gJy4SdMi95A/hqdefault.jpg,BMSIT&M CSE Learning Channel,PT43M28S,false,479,17,0,0,2,so yeah this is can you see us PPD yeah this is the agenda today this has a lot of mathematics so I request everyone to have a pencil so that you can follow all these small small mathematics so this requires a lot of mathematics I will teach you in a simple way so make sure you have pen and pencil so what is the problem with this you remember we did this algorithm with this we did this program this is the program number ninth the last program remember this yeah we we did do this but the problem with this is this particular program requires only fixes polygons so if I have an unknown shape and if I ask you to fill so this algorithm addresses that issue this issue you ready with the pen and a paper all right so let's start now the aim is to film let's say this kind of a polygon so I guessed everyone to write this polygon because the coming slides doesn't show this exactly the way we are showing right now so I have carefully earmark all these you know edges I mean edges as well as the row numbers and the so I request you guys to write this diagram first and I shall give you three minutes of time this go with the mathematics are you so if you are done with this writing let's start then I will give you one more minute time you there guys so make sure you write this diagram because this is the initial diagram which will help us to fill inside this particular politic I want everyone to write this 0 to 13 start you guys done okay I'll give another ten seconds then we'll start all right let's start so as you see every Edge has a starting point and an end point for example edge e1 has starting point at Intel me this coordinate this is 2 comma 1 and edge 1 ends at 6 comma 1 so similarly edge 6 starts at this is what this is 4 comma 13 this is it 6n skirt this is perhaps 8 comma or 10 so every Edge has 2 points start point and the end point and we need to carefully go inside this very unstructured polygon and we need to fill this now in order to fill this there are some prerequisites so that prerequisite starts from this now let us take this edge this is I am talking about the mathematics now let us take this edge now an edge starting from 1 comma 2 to you know 9 comma 6 so you can carefully earmark this as X min wyman and this xmax ymax so no algorithm says x-min and only by Max and the third one it's kind of a linked list you know a linked list has three data fields the first field talks about X min and the second field talks about Y max in the third field talks about one by M if you ask me why one by n if you consider Y is equal to MX plus C and X becomes Y minus C perhaps or P C by M and the X at the next edge that is y plus 1 is always substitute Y instead of Yui plus 1 you will get 1 minus B by M plus the constant so yeah this is the mathematics and I believe you are done with this take an edge and summarize take an itch any edge it has X min Y min xmax ymax the bucket table this is what we call as a bucket table but a table has three fields 1 X min second Y max third one by n so X min is one here and I max x max Y max my max is 6 and calculate M what is M y2 minus y1 by x2 minus x1 6 minus 2 by 9 minus 1 that is 4 by 8 and apparently 1 by M will now become 8 by 4 so this is the initial mathematics that we need to do and the algorithm says to repeat this for every scanline which we shall do right now all right now consider this polygon which you have already written so the I have earmarked carefully as you know x-axis is 0 1 2 3 11 and XS 0 1 2 3 30 and this is my polygon and I need to fill inside this this is the idea today that is I have only as you know the zoom session is only for 45 minutes per session so consider this particular polygon my class really starts now all right so this particular slide talks about the initial edges you can see here this this column 0 1 2 3 where my mouse is pointing this is called ask Andrew scanline class so is the 0th scanline can you tell me which edges I have in the 0 in the z-row scanline I have lieutenant inai so this is that Eaton and na in the first scan row that is in the first row how many edges I have I have e1 I have this e 2 and this 11 also I have e 10 and 9 but the point is eaten and e9 I have already written in scan 0 line so that is the reason I am NOT considering eaten and Tina are you understanding it can I can I get a yes or no ok I'll repeat all my actual class starts from this light this is 0 1 2 3 4 5 6 uses these are all scanned rows in the zeroth stand row I have eaten and NIH in the first scan row I have into here one here 11 here e10 here e9 here so eaten and e9 i have already encountered in my previous row that is 0 that is the reason I am so moving on there is the scan rope called tool in the scan row called - I have v2 11 8 any nine all have been encountered before itself so that is a reason I am reading empty here III the edge number three there is a scan Row 3 I have to ill again d 1089 all have been encountered before that is the reason I'm writing empty similarly 4 4 5 so if you look at scan row sixth row I have a new edge coming as III and II 7 and e 8 as well as a 99 has already been encountered so the remaining you I just are in the sixth row is go to 7 this is 6 this is 7 I have a new edge e 4 and E 5 the voltage is e 3 and E 7 8 III 78 already been written in the sixth row so in the 7th row I have only e4 and e5 so a throw I do have e3 e4 e5 e 7 + e 8 all have been encountered ninth also same same story 10th one if you look at this 10th one I have a new edge called as b6 other edges I have already been in similar story for level so I believe this light is done this is known this is just an initial slide no mathematics have been applied this talks only about how exactly we can start the mathematics alright so shall we shall we proceed nice yes or no so now the mathematics starts so before we should write the heading cost' before pre-processing and that is before applying this now this is where your pen and paper comes in your paper you have already written this particular polygon with these edges now let us apply apply this particular mathematics whatever I am showing now for all the edges that is X please write this X min Y max 1 by M for all the edges we should write this X min Y Max and 1 by M for all these edges like this now let us start from a 1 a 1 in the sense edge 1 1 edge 1 there is no edge at all this is the e 1 no edge at all which is at starting at you know this one this one this one that is the row number 1 which has which has the starting point you know 1 & 6 now before we apply the mathematics in future let us do this before pre-processing stuff now edge e1 okay edge e1 starts at 2 comma 1 and ends at 6 comma 1 so whenever you have a horizontal edge make sure you don't apply this particular method so this much mathematics applies not for horizontal edge so that is the reason even doesn't have any extend by Max 1 by M so why I will tell you later in couple of minutes so let us take edge e 2 e 2 starts but you can consider this as the starting angle starting you know sorry point 2 comma 1 & 2 & 6 what is X X min so this is 2 comma 1 or this is 0 comma 6 2 comma 1 so please write it X men/women xmax ymax so you will get to know that X min is 2 and Y max 6 and calculate M that is y 2 minus y 1 by X 2 minus X 1 you will get it as minus PI by 2 so 1 by M will now become the reciprocal of it is minus so similarly for edge e3 he starts at this particular point that is 0 comma 6 h3 ends at 2 comma 12 so you can here mark this as x1 y1 x2 y2 and therefore you can write X min as 1 by 3 at this point this one this one this one is 0 comma 6 this is you can take it as 0 or you can take that 1 by 3 means nothing but point 0.33 very accurately so so Y max is 12 and 1 by M M is 3 and 1 by M is 1 so like this you do this for all the remaining edges so we have totally from a1 to 11 X min Y max and this is all before pre-processing now let us apply the scan line now to apply scan line filling algorithm there are some prerequisites these are the prerequisites I told you you should not apply the mathematics for a horizontal edge like this we have some rules first rule is look here there is this particular point see there are two edges here you can consider this as edge number 1 and this as H number there are there is this conjoint edge so what we should do is you should take this one as x1 y1 to x2 y2 and again the same particular point as x1 y1 and what is the extra row so whenever you have a according it make sure you come twice one for each edge and you can see here there is one more conjoint each year what we will do is we will separate this and we will consider this particular point as two points so how can you consider this chop the lowest pixel and make sure you increment menu you just stop it and the next particular scanline will now become your this X 1 Y so I will repeat there are some rules to apply the mathematics first rule is whenever you have a conjoint edge join what X you count twice instead of counting once and whenever you have an edge like this you know a lower hemisphere and upper Hemisphere make sure the top the lowest pixel lowest pixel and only once so the one edge will now become I mean one particular point will now become two points and third one is whenever you have a horizontal edge you can you might as well to eat it you can ask you why well there is no point in filling between this H end of the stitch that is we know we should fail from this point to this point so since we already know this there is no mathematics I mean there is no need for any mathematics connects will understand this all right so we let us apply these prerequisites 1 2 & 3 these two these three prerequisites for this particular point now if you look at this polygon you can now see there is a horizontal edge called t1 so we should be deleting this and there is a lower hemisphere e 2 and upper Hemisphere III so we should chop the lowest pixel and we should go to this particular 6 so similarly for all these other edges also we should I have carefully written this I mean designed this slide I have added some animations please look at this so this is my initial edge stable easy though eat any 9 e 1 minute 1 is e 2 1 2 3 4 5 6 1 is e 3 this is what we have done previously and now our task is to apply these prerequisites for this particular diagram right now so we shall see how you can carefully see my animations or equation stuff so since we can see here II 1 there is an horizontal edge the mathematics the prerequisite says so we got this e 1 so we deleted this and of course we need to delete this entry as well so e1 will now go off and d2 11 limits so I repeat this mathematics in this polygon one mathematics says one prerequisite says whenever there is an edge you can see here e 1 which is can you see my mouse place most pointer KC so in the scanner Row 1 there is this e 1 and e 1 is U so let us remove this one so II 1 will be removed and of course here also we need to remove so into even 11 will now become just easy so you can now see e 2 e 3 so there is this conjoined pixel which which the pretty physics tears drop the lowest pixel and go up to this that so you can see here I have so top it and this is v 1 sixth one had III before chopping III he's up three and these are the row called six three this is fifth one this is sixth one so III starts here if I talk this it will now become like this that means III went to Moscow each row Samantha so in the seventh row I should get my even I'll repeat this you understood now in my sixth row I have III so this way similarly this particular point that is e6 e7 this hemisphere the lower hemisphere there is this point so you need to chop the lower hemisphere so the number is 6 so if you chop it it will now go to 11 the e6 will repeat this one deleted and also in the 6th row we have e 2 e 3 is 267 you can chop anything either the lower one or the ECC 67 so topic will now go to 11 so something like this so this is now the ultimate edge table pre-processor so this is how the pre-process yes someone is raising the hand yes tell me up dude any doubts this though so don't worry I'll come back to this again once we are done with the mathematics so if you have any doubt please raise your hands I'm seeing two participants raise the names can I can I see can I get to know your dog Dean on lbs bus what's your dog should I continue yes sir so yeah this is my updated version now so we should go inside and fill it so the algorithm says these many things I will come back to this as this slide later so that you would understand now let us start with this so this is my updated polygon these are my before three processing stops and these are my updated edge tables you can see here there is no one here because why you know even because we have deleted this and sixth one which had III does now gone to seventh one and the 10th one which had t6 that's now gone so these are my updated base now the algorithm stops now can I can you can you guys write these Portuguese the food is okay I will explain the code in one minute come with now let us start y is equal to did you notice something beginning dark here and the next slide this became that please we are this particular edge is y is equal to Y so in Y is equal to 0 s CB means scanlines attendance so scan line y is equal to 0 means I have eaten any night so eat 10 is 11 4 minus 3 by 4 and E 9 is 11 feet 3 by 8 so I mean 8 t by 8 which we which came from the process mistake all right so in the I repeat Y is equal to 0 means I have 90 90 90 10 scan line which is nothing but X min Y max 1 by n e9 is 1185 which is also X min Y max and 1 by M now the next step is once you are done with the the buckets you need to fill from yes this X min this excellence this X min on eater to this X min of Eli OS look at the first data of again and the first data of p9 so the first data of 10 is 11 the first data of 9 is 11 so from 11 to 11 you need to fill so my filling goes like this notice or not so next is you can see this dark dark line all right so I will repeat take H 0 we got this and from the first date of e 10 is 11 the second beta so from 11 to 11 you fill it or next one the the next point is you need to this particular first field and the last one so the mathematics says X min plus 1 by M so xi plus off minus 3 before that is 11 minus 3 by 4 is 10 1 by 4 and 11 plus 3 by 8 is 3 by 8 so this is the mathematics once you are done with mathematics you increment the scanline so the dark line became like this so Y is equal to 1 so in Y is equal to we have so you please mute your I mean from your side so this is the updated edge oxygen' this is the benign so eat an e 9 go to the next row we have 9 copy paste from this life and for eat any 9 updated I just like to take 11 tonight so once the mathematics once the initial mathematics is done next point is you need to fill it fill it from where to where look here the first date of T 2 is 2 from this perhaps 10 1 by 4 mins 10.25 you can take as 10 11 3 by 8 of this point fill it like this so once milling is over you need to write the mathematics so can you write this code please the code is ie F M initial filling mathematics so first we should do the initial table second one is you should do filling third one you should do what is called as mathematics so you take this this edge the initial is this you fill it and then after filling you should do is M is over F is over now comes mathematics mathematics is what X min plus 1 by M 2 plus of minus 2 by 5 yes 1 3 by 5 6 plus 2 by 3 is 6 2 by 3 10 1 by 4 plus of minus 3 by 4 is this 11 3 by 8 plus 3 by 8 is this i FM so mathematics is over next is we shall increment Y that is you can see here the green thick line is at the edge number 1 so I FM initial fill mathematics is over next one is we shall go ahead with the the next two row that is 0-1 - so - if I go here the green thick line user - not so in the second line we have E - 11 10 9 all have been updated this is the iPod initial part so initial part is done next is F part i FM initial is this the updated ones F is fill it fill from where to where 1 3 by 5 of e 2 2 6 2 by P of 11 so 3 by Phi is so much 3 rupees by fibers more than 0.5 you can take it as to go to 6.66 you can take it as 7 so 2 of e 2 2 7 of 11 so fill it something like this and again 9.5 of e 10 to 11 or 12 of e 9 so i F is over initial is over F is over now comes the mathematics so what is the mathematics 1 3 by 5 plus or minus 2 by 5 is this 6 2 by 3 plus 2 by 3 is this 9 point 5 minus 3 by 4 is points and thing so nine point five minus 0.75 is eight point seven five that is 8 3 by 11 6 by 8 plus 3 by 8 is apparently 12 1 by 8 so i FM initial is overfilled is or mathematics is over next for next step is increment this green thick line to the next level so Y became 3 so this is the initial you see whether any new edge has been encountered no new edge so these are my new and these are the my existing edges so initial is done next is f finish so 1 1 by 5 of D 2 mu 7 1 by 3 of 11 so you start feeling like this so next one eight eight point seven five you can take it as 8 or 9 9 2 of e 10 to 12 of t9 so f is over I F is over next is mathematics so mathematics says 1 1 by 5 plus or minus 2 by 5 is 1 by 5 7 1 by 3 plus 2 by 3 is this this this so i FM FM is over so next increment the edge it becomes 4 in 4 do we have any new match No so this is the initial initial is done I is over F starts that is willing and again I am counting that as you see the subtle animation here this so this is the fun join edge you can consider the search so i F is over now comes the mathematics 4 by 5 plus of minus 2 by 5 yeah one more point is since elementary 10 there is this 11 and e 10 this is done it doesn't end here so remove this because 11 in my next edge that is y is equal to v that is if I go to the next particular point 11 and it doesn't come so you remove this is what you get and the mathematics 2 by 5 minus 2 by 5 and so next you go to this IFM is over next one y is equal to 5 and we have e 2 and e 9 so this is the initial so fill it fill from where to where 2 by Phi is 0 0 of e 2 0 of T 2 to 7 by 8:30 13 of me night so 0 of V 2 2 13 of Ni so I F is over now comes the mathematics mathematics is 2 by 5 plus of minus 2 by 5 it becomes 0 12 7 by 8 plus 3 by 8 becomes equal 9 so I am mathematics is over next is increment Y is equal to six so in Y is equal to six you can see in Y is equal to Phii have you doing I mean Y is equal to 7 I get new edges called s Ln n eá so e 7 u e8 u de from the 3 before pre-processing stuff so e 2 e 2 and e 9 but is the first one and the last one have been already but since we are encountering a seven and a eight right now so you take these two edges from where you remember we had this this one this one before pre-processing so e 7 u e8 so this will now become the high path initially part so next part filling filling from where to where 0 of e to 2/10 of a 7 so that is what we did and this is that particular edge this has twice ten of 8:00 so next one so e 2 is I mean you are going from six to seven so e 2 doesn't come here so you remove that edge i F is or mathematics we shall do 9 1 by 1/2 - this one will plus 2 is 14 sorry ten plus two is twelve 13 2 by 8 plus 3 by s this is f mathematics is or next is now look at this point this edge is interesting so I was at ey is equal to 6 and now I will go to a seventh the moment I go to esa' and I have a new uace e3 e4 e5 yeah so e 7 e 89 we have so III for you 5 we have so add these edges from the pre-processing H before 3/4 so all these will now become Y is equal to 7 add these edges so these are my initial stuff so next comes F filling so fill from there to there 1 by 3 is apparently 0 0 of e 3 to 4 of a 4 so 0 to 4 again for of ePHI to 9.5 of P 7 so here is how 9.5 military gets 10 12 of P 8 to 13 this of 9 so this is how you fill it so IE f is over next comes mathematics so 1 by 3 + off 1 by 3 2 by 3 4 plus of minus 2 by 5 is the mathematics 4 plus 0 for 9 and now minus 1/2 is 9 + 2 4 in this this whatever I just keep on doing this i FM remember that code called i FM so initial fill and mathematics so this is how you can fill any this is what general now I will come to this particular start with the smallest empty that is y is equal to 0 we initialize and while current Y becomes ya from 0 to 30 merge this to this sort on X minimum fill pixels between rounded pairs of X values remove the mathematics X minus 1 by M nobody increment that is increment Y is equal to so I hope you understood yes or no yes I quit in two minutes mirror in two minutes we will conclude this so this is the mathematics explained by bags this is the mathematics this is the scanline forget that is explained WiMAX one by M and this is my polygon these are my I just these are my before pre-processing stuff X min Y max 1 by M and these are my prerequisites so I can joint I don't attach twice top it so the next one is whenever you have the horizontal range they did it so you take the polygon you have the initial stop and apply the prerequisites first my visits will happen and once the predict visits are done now start applying the algorithm take the take the initial stop and go by Y is equal to 0 or Hill you reach the screen so write all the edges and here is where you need to apply that IFM concept initial fill mathematics so this is the initial fill it mathematics initial fill it mathematics so just goes on till so finally you will get this so I hope you enjoyed this session this is that's it for today and tomorrow we will continue with other topics thanks for your time can you please drop your feedback thank you that would really help me either in what's iPod so that I'll improve any problem thank you thank you thank you thank you 
oYlkJUZWby0,27,"Subject: Computer Science
Paper: Computer Graphics and Visualization
Module: Composite 2D transformations
Content Writer: Dr.Raghuveera",2015-11-30T06:24:40Z,Composite 2D transformations (CS),https://i.ytimg.com/vi/oYlkJUZWby0/hqdefault.jpg,Vidya-mitra,PT31M34S,false,3004,30,2,0,0,welcome to the epod Shella lecture series on computer science for postgraduate students this is the 6th edition of in the lecture series on computer graphics and visualization so today let us recollect what we have already learned in this subject and in the last session we talked about transformations the basic transformations the translation rotation and scaling and let us continue the lecture series with the today's session on composite 2d transformations so to start with composition is something like you are actually merging up a series of transformations composition is an important aspect of computer graphics so in this composition what we do is we take a series of transformations and we combine them into what is called a composite ok the advantage of having a composite is to multiply the initial coordinates get the final coordinates straight away at one stroke so having a composite matrix is so advantageous it reduces the number of matrix operations if you recollect we talked about homogeneous transformations and homogeneous coordinates and coordinate system in homogeneous coordinate system any transformation matrix is represented as a 3 by 3 matrix so if you recollect the translation matrix the rotation matrix and scaling matrix represented in homogeneous coordinates it has got three coordinates and it has got it is a three by three transformation each is a three by three transformation matrix so what we are going to do here is in the real-world scenario we have more than one transformation that is applied on an object in succession so at at at very high speeds more than one transformation is applied on objects for example if you take the tomandjerry like cartoons if you take say animation movies the famous animation movies so many transformations happen in succession for example a transfer happens a rotation happens a kind of shape change happens a kind of say reflection happens a kind of what is called a scaling happen so many of the transformations are applied in a succession in succession on the same object so let us see the advantages of these composite transformations so like the fundamental advantage is it reduces the number of matrix operations and another major advantage is it avoids intermediate storage so whenever you have to say for example whenever you have whenever you make whenever you perform a transformation you store the result in an intermediate storage say for example in a memory storage and again use that for the next transformation and store it store the intermediate results somewhere so till you finally finish all your transformations so then doing so instead of doing that here what we are doing is we will be performing a composition of all these transformations and then we'll be multiplying getting a composite matrix multiply the initial coordinates get these final coordinates straightaway that's the fundamental advantage so let us look at the first example that talks about a composite transformation the example is about two successive translations assume that you have to perform two successive translations that is a translation and again a translation so let t1 be the first translation with the components tx1 T y1 like T to be the next translation T by T X 2 and T y2 so now a point P is there on which these two translations are applied in succession so now what will be the end result or what will be the end coordinates for that what we do is you can see here as the solution starts with first t1 is applied on P as t1 T X 1 T y1 multiplied with the point P so we know that in homogeneous coordinate system a point P is represented as X comma Y comma 1 okay so the translation matrix t1 whose components are TX 1 and T y1 multiplied with the matrix P with the point P which is a matrix gives another 3 by 1 matrix okay so what we did is we what we wanted to do now is we have to apply t2 again on the result so that is see this curly braces here in the second step P dashed is equal to the final coordinates are T 2 T X 2 T by 2 multiplied with T 1 T X 1 T Y 1 multiplied with P please focus on the curly braces the red ones the red ones indicate that first t1 is applied on P and on the result so which is a 3 by 1 matrix we are applying t2 and the final result is stored in P dashed now if you see this step here that is we are writing the same equation but with just the braces alternatively placed you see this curly braces here the red ones particularly in the previous slide we have the red curly braces for the T 1 into P 4 T 1 into P and now we have just altered the curly braces so that P is independent and kept aside and T 2 and T 1 are multiplied and the resultant is what we want what is called the composite matrix and first do this multiplication then multiply the resultant with P straight away get the P dashed so the essence of this is to perform a series of transformations basically here translations and the resultant is actually a composite transformation matrix and that is multiplied with the P to get P dashed so if you see the matrix equivalents for this notation P dash T's X - 2 I dashed 1 in homogeneous coordinates is equal to 1 0 TX 2 1 0 1 T y 2 and 0 0 1 multiplied with another matrix T 1 1 0 T X 1 0 1 T y 1 and 0 0 1 multiplied with the point x y 1 keep the point xy1 aside just multiply these two transformation matrices what you get D what you get is the composite matrix the composite matrix is just exactly looking similar to that of a translation matrix now with the third column having two terms which are the addition of the two x components and addition of two Y components so basically applying two translations in succession is equivalent to shifting the object twice that is applying t1 first and then t2 next so the object is at a new position so two successive translations are additive so that is the conclusion so coming to two successive rotations imagine you are performing a rotation on an object first and then applying another rotation on the resultant object so that is first it is rotated and then again it is rotated by some other angle let theta 1 be the rotation angle for the first rotation let theta 2 be the rotation angle for the consecutive second rotation so assuming all these rotations are positive that is counter clockwise rotations as we know very well that counter clockwise rotations are positive clockwise rotations are negative so if you remember the standard rotation matrix so we have converted this notation into equal in matrix X - 2 y - 1 is equal to R 2 theta 2 cos theta 2 minus sine theta 2 sine theta 2 cos theta 2 0 0 1 and 0 0 1 and similarly cos theta 1 minus sine theta 1 sine theta 1 cos theta 1 0 0 1 and 0 0 1 when we multiply these two the resultant is a composite rotation matrix and if you observe this carefully the angles are actually added up here theta 2 plus theta 1 theta 2 plus theta 1 and so on so the resultant composite matrix is actually editable so we can conclude that two successive rotations are actually additive so in the previous case we did two successive translations they are also additive and two successive rotations are also additive and one important thing is that you should observe this reversal of transformations that are applied first it is our one then it is our two when you are writing them in an order it is R 2 into R 1 into P so please understand that because we are performing first R one on P and then R 2 on P so R 2 into R 1 into P so that's the sequence so similarly that if we look at two successive scaling operations if we want to perform that means you are scaling an object first and on the resultant scaled object you are performing again another scaling say s 2 so s 2 and s 1 so this should be actually as 2 this is s 1 sorry this is again this has come as s 2 can correct this as s 1 so let s 1 s X 1 s y 1 be the scaling matrix first applied on P and on the resultant we are applying s 2 so this can be written as s 2 into s 1 into P so you can make the correction here this is s 1 okay so s x2 0 0 0 s Y 2 0 0 0 1 as X 1 0 0 0 s Y 1 0 0 0 1 into X Y 1 just keep this aside the point aside multiply the two transformation matrices what you get is a composite but unlike the previous cases the composite transformation matrix for two successive scaling scaling operations is actually multiplicative that means the two scaling factors actually get multiplied so the resultant is a scaling matrix whose coefficients are whose values are multiplicative scaling values are multiplicative so that's about basic scaling of basic operations that were performed two successive translations two successive rotations and two successive scaling operations we have performed but in the real scenario we generally do a series of transformations and there are they are generally more in number okay so let us take a scenario which we call this as a complex transformation let us take the example of general pivot point rotation we can understand this as a complex transformation because we know translation we know rotation and we know scaling these are basic ones and anything other than that is a complex transformation we can call that as complex and later we can break that up into a series of simple transformations and then we can combine them as composite and the composite matrix represents actually the complex transformation so that's what is the as the sequence in which we go to solve these problems so let us look at the example general pivot point rotation so we understood from general rotation that rotation is performed about origin by an angle by some angle so now let us assume that there is some other point in space or some other position in space about which we are going to rotate our object so how do we do that is if you look at this sequence of steps that we are going to perform imagine there is a there is an object like a triangle and a pivot point position other than origin is chosen here for rotation so let X R comma Y R be the pivot point position which is any position other than origin now our aim is to rotate the object of interest about this point so for this what do we do is we first translate the pivot point so that it coincides with origin so the first step is a translation step so we are physically moving the point a pivot point so that it coincides with origin and then we are performing rotation with respect to origin so because we are aware that a rotation with respect to origin has caught the standard matrix cos theta minus sine theta sine theta cos theta 0 0 1 and 0 0 1 so we know that general rotation that is the origin rotation with respect to origin so we can simply use that matrix for rotation here and in the third step we are actually putting this pivot point back at its original position so in the first step we are translating the pure point one translation step one rotation with respect to origin and then one read translation that is put it back at its original position so if we convert these three steps into equivalent matrices what we get are three different matrices and when we multiply them together we get what is called a composite matrix and that composite matrix represents the complex transformation of general pivot point rotation so let us take the notations and the first transformation is represented as translation T of minus XR and minus yr so that means we are actually making it that is shifting the point so that it coincides with origin and rotation theta so always we assume that rotations are positive unless and otherwise explicitly mentioned like their clockwise rotations so all rotations are understood to be positive ok rotation with respect to origin is then performed by an angle theta so that is R of theta and with a desired angle and again put it back at its original position which is translation X R comma Y R so if these 3 are written in notation form now you see this equation here the new position of the point after performing a rotation for an object about a general point in space is given by the equation translation x ry r multiplied with rotation by an angle theta multiplied with translation minus x ry r you must observe that when the steps are written in the previous order like 1 2 3 but here they are written just in the reverse order you should note that carefully they are to be written in the reverse side at first it is this from the right hand to the left hand you should be writing the notation so T of minus X R Y R into R of theta into T of X R we are at the red curly brace for the for the set of mattresses multiplied with the point P the initial point R the point that we wanted to rotate out the object that we wanted to rotate here as P so when you multiply these three matters I see this here 1 0 X R 0 1 by R 0 0 1 cos theta minus sine theta sine theta cos theta 0 0 1 and 0 0 1 1 0 minus X R 0 1 minus y R + 0 0 1 so when you multiply these three what you get is a composite matrix and whose elements are given here as cos theta minus sine theta sin theta cos theta and the third column has got elements which are some nonzero values XR into 1 minus cos theta plus y R sine theta yr into 1 minus cos theta minus XR sine theta now these nonzero elements actually the if you look at the first four elements of this matrix they are exactly the same if you as the original rotation matrix that is rotation about origin but if we are performing rotation about any general point in space we get two additional elements in the third column generally elements in the third column correspond to translation that means the point not only the objects not only get rotated about the pivot point but also get translated by the amount proportional to these two elements that is one element corresponds to the x-direction the other element corresponds to the Y Direction so that is there is a shift not only there is a rotation there is also a shift so let us look at another case of general fixed point scaling so just like we did general point rotation we have general fixed point scaling that means imagine any point in space and perform scaling with respect to that point it is something like you fixed that point you hold that point with your hand and let the object be pulled with respect to let the object be resized in all directions like say we have only two directions in 2d so stretch the object along x direction and stretch the object along y direction but now with respect to another point any general point in space other than origin so you can take an example of say a triangle whose centroid is the fixed point let us say its centroid is the fixed point then when you perform scaling what happens is with respect to the centroid we'll be pulling the object on all sides so the object becomes bigger but while the centroid remains the same so for the bigger object is it is they are the centroid still is at the same place but if you if you recollect the scaling that we did the basic scaling with respect to origin the up scaled object move moves away from origin while the downscaled object moves close to its origin but in this case the object remains there it becomes bigger in size so the effect is what is called a general point general fixed point scaling let us call this as a complex transformation let us break this up into a series of simple transformations and then let us make a composite of it and the composite represents the general fixed point scaling so if you look at these scaling diagrams here general scaling imagine the fixed point is X F and Y F with respect to which we would like to scale this triangle and the first step is to is to translate the fixed point such that it coincides with origin so it is a translation simple translation then with respect to the origin we are actually scaling it the pins you can upscale or you can down scale here in this example it is down scaled and the third step put it back at the original position put the fixed point at its original position so a translation as scaling and then again read translation so put it back at its original position so if we write equations there is notation representation for this the first step is T minus XR minus y our second step scaling s SX sy the third step x ry R so that is our except YF rxry are both both mean the same here just it's a notation so you can correct this as X F + YF here and except and YF just what I change from rotation so the final equation for general fixed point scaling is given by P dashed is equal to TX f YF into multiplied with scaling yes SX sy multiplied with translation - XF minus YF so see always the red curly brace they whatever is in the braces is a set of transformations which are to be composited so when we multiply all the three what we get is a scaling matrix SX 0 0 sy + 2 more nonzero elements in the third column X F 1 minus SX and Y of 1 minus sy so that's how we get the composite matrix so this composite matrix represents the general fixed point scaling the means you can perform scaling with respect to any general point in space so here if you take origin as your fixed point for example so X F + YF becomes 0 + 0 so now the elements in the third column become 0 and 0 so that is how this is a more generic matrix for scaling so let us take another example here for composite transformations general scaling directions so far scaling is being performed one along the X direction the other along the Y direction so we have two scaling factors as X and sy all the time now that means whatever object is of interest we have with us so we'll be scaling it along X direction and you'll be scaling it along y direction as well so here we can also imagine scaling to be being then can be done along other directions also so let us take two mutually perpendicular directions as shown here in this slide s1 and s2 which are actually mutually perpendicular but not along x and y directions not along the standard coordinate directions so now there is a square the square is an object on which we are applying a scaling transformation and the scaling is not done now along x and y but instead along two other mutually perpendicular directions s1 and s2 so that means a long diagonal so see the scaling factors here s 1 is 1 and s 2 is 2 so that means s 1 is 1 means along s 1 direction there is no scaling so the size should remain the same along s 2 direction the size is double so because it is scaling factor is 2 that means it is something like you are holding the two diagonal edges two edges of the square that is 0 0 edge and the vertex and the 1 1 vertex and then scaling it like this so that the length of the edge along the diagonal is now more than the original length so the steps are shown here how do we go with it let us call this a complex transformation so our aim has always been to take a complex transformation break that up into a series of simple transformations and then take a composite of that and then multiply the original coordinates get the final coordinates so the first step is to rotate the to scaling directions such that they align with coordinate directions so the first step is to rotate s 1 and s 2 directions they are already mutually perpendicular so rotate them such that s 1 coincides with X - coincides with y so this rotation is intentionally taken as positive because it is counterclockwise rotation so by what angle you should rotate so the angle is evident here the angle is Theta so s1 Direction makes an angle theta with x-axis so s2 Direction obviously makes an angle 90 minus theta with x-axis so let us rotate this is the second first step is to rotate the to scaling direction such that they align with the coordinate directions that is s1 aligns with X and s to L ends with y the second step is to perform ordinary scaling with respect to origin and third step is to rotate that back so a rotation scaling and then inverse rotation so the steps are shown here R of theta yes s 1 comma s 2 and R inverse of theta so that is that is actually shown here in the notation and in the matrix equivalents for this actually are shown in the next slide before we go to that let us see what is going to actually happen to the shape so this is the square and this is actually a 0 0 1 1 there is a unit square standard unit square and now you are performing scaling on this object along two mutually perpendicular directions s 1 and s 2 the scaling factors along s 1 is 1 and along s 2 is 2 and theta is 45 degrees so what happens actually is look at the resultant shape the resultant shape is actually like a parallelogram and it is slightly up and is not actually the bottom edge is not touching the x-axis it is slightly above that and the coordinates or the except 0 0 all the other coordinates got changed for the other vertices other three vertices the 1 1 vertex has become 2 - no because it is twice is the scaling factor along that direction but along the other two that is other two vertices have become 1 by 2 comma 3 by 2 and 3 by 2 comma 1 by 2 so this is the effect of this is actually a change in shape so that's what we have achieved here at the end so if we take an example let us take an example problem that we can solve easily consider a triangle at 2 comma 2 10 comma 2 and 2 comma 10 so the three vertices of a triangle are given now perform the following transformations in succession and find the resultant vertices now our aim is to perform these two transformations on the triangle and then find the resultant position so the first step is to scale with respect to 2 comma 2 that means the 2 comma 2 is the fixed point with respect to which now you will be scaling the object which is by scaling factors 2 comma 2 and the next step is rotate by 90 degrees counterclockwise so P dashed is equal to R of 90 into s 2 comma 2 so we always write that in the reverse order and the first step is scaling with respect to fixed point which is to come a 2 for that the transformation matrix is to 0 and X F into 1 minus s X if you remember X F into 1 minus s X and 0 s y YF into 1 minus s y if you remember the scaling matrix that is with respect to any general point in space that we have just derived before we have got the matrix SX 0 0 sy except 1 minus s XY of 1 minus sy 0 0 1 so that is what we have applied here and we got a if you are not able to remember this what you can do is translate the fixed point 2 comma 2 to the origin that means minus 2 2 T of minus 2 minus 2 then perform ordinary scaling that is these two elements are 0 0 the scaling factors are 2 2 and perform a read translation you can do these 3 and still you get the same matrix as that of the fixed-point scaling matrix so if you don't remember in any case the general fixed point rotation matrix you can take these steps in three steps and multiply get a composite and that represents the same matrix and next step is to perform a rotation so rotation is 90 degrees counterclockwise and so what we get is a standard rotation with respect to origin and we know the angles that is 90 degrees is the angle and cos theta minus sine theta sine theta cos theta zero zero one zero zero one we got a resultant matrix here for rotation and the last step is to multiply the scaling matrix multiply the rotation matrix get the final composite so do not do anything to the triangle just get the composite matrix and the next step is to take each vertex of the triangle multiplied with the composite matrix get the new vertex take each vertex one by one there are three vertices take the first vertex say 2 comma 2 and because that is actually you are getting minus 2 2 and the second thing is 2 comma 10 and the next thing is there is the equivalent so multiply here the 210 and 1 with the composite matrix you get minus 18 to take the third vertex 10 2 and multiply with the composite matrix and get the third vertex new vertex here minus 2 18 so this is how you should be solving problems so now we have learned here a simple sequence of steps to solve complex transformations like take a complex transformation break that up into a series of simple transformations and then multiply the simple transformations in the reverse order get a composite matrix and have the composite matrix with you take each vertex multiply the composite matrix get the new vertex so that is what we have learnt in this module so we have learned how to perform composite transformations we have also have seen examples on how to perform what is called complex transformations by simply decomposing them into simple steps and then getting a composite and then solving problems so you can solve any number of problems you can take simple exercises and solve problems and you can try for yourself all this thank you 
kKNb3WoRtPk,27,"Subject:Computer Science 
Paper:Computer Graphics and Visualization",2016-10-27T07:12:42Z,Visible Surface Detection,https://i.ytimg.com/vi/kKNb3WoRtPk/hqdefault.jpg,Vidya-mitra,PT35M25S,false,1003,10,0,0,4,[Music] welcome to the epod cello lecture series and computer science for postgraduate students we are in this 17th module of comforta graphics so we have learned in the previous module about 3d viewing which is an important topic where we have learnt projections where we have talked about a parallel projection we've talked about perspective projection and we have derived some the mattresses that correspond to each of these projections so let us quickly go into the next module which talks about which where we'll discuss about visible surface detection which is an important aspect of comforter graphics okay here in this module we talked about we will be fully thinking about the 3d world so we imagine that all the objects are in the 3d world are all placed in the 3d world and then say given a vantage point or assume that we are standing at one position and we are viewing the 3d world so we see some of the surfaces and we don't see some of the surfaces we see some objects we don't see some objects because of their arrangement in the 3d world and not only due to that one object that is bigger or maybe one object that might obscure the other object so there are possibilities that an object is hidden by another object so from a given viewing position some objects are visible and some objects are not visible and to be more specific some surfaces are visible some surfaces are not visible so what we will see in today's module is about visible surface detection and in graphics terminology this is also called as back face removal our hidden surface removal our back face culling and there are many names used in the literature so then to remove some thing that is a back face what we will do here is we will consider a face that is visible from a given viewing position so what do we do let me repeat that again what do we do in this is we select faces that are visible and we ignore faces that are not visible so that will be the discussion today so let us see what are the various so these are the various are the team members who are involved in this exercise so the objectives of this is to understand the need for visible surface detection in computer graphics applications and we will look at the common classes detection methods of visible surface detection methods so some of the common techniques that are used for visible surface detection and the keywords are image space object space visible surface detection hidden surface removal so we can classify these visible surface detection algorithms into a their object space or as image space and we can combine the object space and image space and call them as mixed methods so we have three classes here one is object space the other one is image space and the other thing is combining both we have a mixed method a mixed set of methods so what is object space so object space says that we imagine that we are in the 3d world and we identify objects that are visible within the 3d world and which are obscured or which are hidden in the 3d world by other objects and then we identify only those surfaces that are visible and label them as visible so we compare each object in the 3d world with respect to other object and determine or what is the frontal face or what is the back face and how do we so how do we remove them so that is completely in the object space whereas in the case of image space what we will do is will take a projection of the 3d world onto a 2d plane so that means what do we do is we assume that we are viewing from some position and at the position where we are standing are we are viewing we imagine a 2d rectangular plane and we assume that the 3d world is projected onto the 2d plane and we then try to see what should be the final value at each and every pixel position from the given viewing position so we check which phase is to actually should be applauded on the 2d map on a 2d plane so we look at the projection of the 3d world onto a 2d plane which is all about the image space methods so they they made space methods rely on this technique so mixed methods use a part of comparison in the object space a part comparison in the image space so that's how these mixed methods work so we will see examples for object space and image space as they are generally most popular most common methods exist and let us you can you can you can ask me one question like say why should we remove a surface that is not visible why should we remove back faces so the fundamental question is why should we do this at all the answer is why should we include faces or surfaces in the from the viewing position are whichever are visible from a given being version why should we include those faces are surfaces which are not visible from a given viewing position when they're not visible we don't have to apply we don't have to manipulate the object surface at all we don't need to manipulate that at all so we can save lot of resources a lot of time lot of computational capabilities and the operations are much quicker so the essence is identify faces that are not visible and we don't want them at all in the scene and only take those faces that are visible and do whatever operations we want to do only on those visible faces so that's where we save a lot of time effort and operational requirements and resources and so on so let us start with let us see the classification of the methods as we saw the in the previous slide the visible surface detection methods are classified as either object space or image space our mixed methods the classification goes like this a simple back phase detection method the a buffer method so we call it the accumulation buffer the a buffer method the BSP tree method the binary space partitioning tree method the oak tree method are they are classified under object space methods the other class of methods are depth buffer method which is fundamentally a famous example for image space method the depth buffer and in literature it is also popularly referred to as this Z buffer method the scanline method and array casting is a technique used to used in the image space methods for visible surface detection and finally the mixed methods their depth sorting and area subdivision or more complex methods we will not focus on them in this session but we will focus on the on at least one example for each of the object space and image space methods okay so fundamentally all these techniques whether they're objects based methods image based methods or mixed methods they rely on two fundamental principles their sorting and coherence so sorting is to sort faces from as per their depths from a given viewing position so sort faces in the 3d world faces here is actually phase can be a surface or a face so a face is a plane which is a part of an object you can consider say if you imagine a 3d queue if we imagine a cube in a 3d world one of the faces of a of the cube is actually what we mean by saying calling it as face or you can also call it as a surface okay so sorting is like say how do we sort or how do we arrange these faces as per an order in some order and coherence is like take advantage of a kind of similarity irregularities within objects are within planes are within surfaces and within parts of a scene let us look at the very first method and for visible surface detection which is this simple back face detection which is an example which is a which is categorized under object space methods as you can see in the slide there from a given viewing direction if a face is not visible it is considered as back face so the important observation is given a viewing direction so the you can imagine a position in the 3d world and from that viewing position if something is not visible we call it a back face sometimes the name back face culling is used in if you look at the terminology in different books you will also find that the word culling it's called back face culling okay so as you can see the example there in the slide a cube is given and imagine you are your cube is oriented in such a way that you can see only the three faces of the cube the remaining three faces are planes of the cube are not visible so do not include them at all in the picture so that we can avoid lot of processing and lot of manipulation and time and so on and the very first visible surface detection method is the back face detection which is a category of object space methods as you can see there's a in brackets it is given as ouais ouais indicates object space method so we will take examples for object space method and later we'll see examples for remain space methods as well so the very first thing is the object space method so what does it say it is the simplest most method imagine you have you're given a 3d a three-dimensional viewing coordinate system so always where we are standing from there you erect three mutually perpendicular directions and that forms your viewing coordinate system okay so imagine you are you can you can choose your right handed coordinate system as you can imagine a the three coordinates which are the right-handed which are the three first three fingers of the right hand where the negative Z Direction is always the viewing direction so imagine drugs so many objects placed in the 3d world as you can see in the example shown there and the diagram shown there God there is a pyramid like object and we can assume that a plane or a face or a surface of a 3d object can be if you imagine that to be a plane then we can assume an equation for the plane as ax plus B y plus cz Plus D is equal to zero can be the equation of the plane okay so if imagine a pyramid like thing so there are four such and five faces for it and we have the equation that defines a plane as ax plus bu a blesses at plus D is equal to zero and a normal vector to the plane is nothing but the components of the equation you can take the a B and C the coefficients and they automatically are the normal vector components for the plane so a normal vector is very important attribute for a plane a normal vector identifies the orientation of an object in the 3d world so the essence is that when you are viewing direction and when the normal vector direction of a plane are aligned with each other are almost in the same direction then we say that we are actually seeing the back side of it or the back face we call it a back face that means you are imagine you are sitting in a classroom okay what you see is actually what you are what you are seeing is the inside face of a so because assume normal vector is always an external outside and perpendicular to the plane that we consider so a normal vector is actually the direction of the normal vector and if your viewing Direction are aligned so that means you are inside a classroom and you see actually the backside of the walls okay so that's how you can imagine so imagine that this is or the room is closed or the classroom is actually fully closed and imagine it's a closed box like shape it's a cube like a cuboid like and you have the normal vectors which are external and outward so the normal vector direction and you if you are inside you are seeing the backside of it so that's how we can classify objects our faces as either front face or a back face so from the discussion given here it is evident that it is given there as the if where the direction is along the viewing direction is along the normal vector direction to a face and they're seeing the backside of it a point P X Y is an inside point as you know given a plane equation an inside point is something that lies on the plane okay an outside point is away from the plane okay if this inside and outside should be understood carefully a point P XY is an inside point if it if it satisfies the condition X plus B Y plus cz Plus D less than zero if it is equal to zero what we say it is a point it is the equation that defines the plane and it is less than zero is a point on the plane you can also include P XY and Z you can have that Z coordinate in the point so when an inside point is along the line of sight to the surface the polygon must be a back face what is that observe that carefully when an inside point is along the line of sight to the surface the polygon must be a back face okay so if you can define the normal vector components as ABC because the equation of the plane is ax plus B a plus cz Plus D is equal to zero so the normal vector components are obviously ABC and the viewing vector as we know the viewing direction is along the negative Z direction if you use the right-handed coordinate system so along the negatives are Direction x coordinate is 0 y coordinate is 0 and z coordinate is actually negative so VZ if you take the V vector which is a viewing vector direction the components are 0 0 VZ where we said is the third component of the viewing vector which is in fact negative okay so when you or take the dot product so the polygon is a back phase if the angle if the dot product between the two vectors is greater than 0 so when the our product will be greater than zero when the when the VZ is in is negative or we have to also consider the that is because it is negative V dot n is equal to VZ into CE as you can see because the a into zero dot product it is simply dot product a into zero zero being a zero zero then Ouiser into CE is the dot product so that is what is left out of the dot of the dot product they are this dot product has got VZ which is negative in fact so if C is negative the dot product becomes positive visa D is negative if C is negative the dot product becomes positive so V dot n is greater than zero so whenever C is less than or equal to zero we can safely conclude that we are seeing the backside of a phase we can ignore the face so we can call it as back phase oh that's the important discussion in the very first and the simplest method for back face Dataquest detection the other back phase detection method that is most popular in the visible surface detection methods is the z-buffer or the depth buffer method which is categorized in the which is in the class of image space methods so in the previous example we have seen an example for the object space method in this this is an example for image space method now what is an image space method again as I as I said in the beginning of this discussion we take a projection of the 3d world onto a 2d plane and there we we check for each pixel what is the possible visible surface so that we can color that pixel with the color of that surface ok that we see so that's how we do it for all of the pixels for all the pixels in the 2d plane we take each pixel at a time and we start with the first pixel the corner say the left corner pixel top left corner pixel and we try to sort the surfaces as per their depths and then we'll see which surface is the front most surface and give the pixel that color color of that surface so that's what we are going to do in the said buffer our the depth buffer so depth the that itself is generally understood as depth okay as you can see in the slide there the object depth is measured from the viewing plane along the z axis of viewing system each surface of scene is processed separately one point at a time across the surface so we take one surface at a time okay the method can be applied to both cleaner and non planar polygons surfaces again planar polygons is of interest to us non planar polygons are like one of the vertices of the polygon are not aligned with the other vertices of the problem or not in the plane of the same as that of the other vertices so we can call it as a non planar polygons so they're still polygons plane there but they're non planar okay two buffers are used one is the depth buffer and the other one is the Refresh buffer so depth buffer is used to store depth values for each X Y position as surfaces are processed the important statement is they're given their for this Z buffer algorithm depth buffer stores depth values and refresh buffer stores are the intensity before stores the intensity values at a given X Y position so as we process a frame so the the third buffer method is clearly given in this picture as you can see the picture there so we are viewing from a viewing direction or from a viewing coordinate system along the negative Z direction always imagine this keep in mind we're viewing the world along the negatives R direction okay now what do we do is we have chosen a view plane which is a bigger rectangular plane and we start with we take one pixel position at a time on this rectangular view plane we take every pixel position which is an X Y position Z is constant so that means we are taking only the X Y so because if we imagine this view plane to be the XY plane of the viewing coordinate system then the Z coordinate is obviously zero so the XY coordinates on make sense here for assuming that the view plane is some plane that is either Z is equal to 0 plane or Z is equal to some constant a plane as you can see there surface s1 s2 s3 there can be n number of surfaces imagine we are viewing exactly along the perpendicular direction assume you are firing a perpendicular direction from a given pixel position the direction is perpendicular to the view plane so imagine a view plane and the direction is perpendicular to the view plane so s 1 s 2 s 3 and s n can be n number of surfaces and you can order them as per depths okay the important point is you can order them as per depths okay so one surface may be obscuring the other but initially you first order and later what do we do is whichever surface our face is closest is visible is closest to the view plane is is the the color of that is to be taken for that pixel so the algorithm is as simple as initialize the buffers we've got two buffers one is the Refresh buffer the other one is the depth buffer so Refresh buffer is initialized to the background color and depth buffer is initialized to the is initialized to a value 0 so for each polygon so take one surface at a time so one face at one surface at a time or the of an object okay you can imagine many 3d objects in the 3d world and take one polygonal face at a time and compute the depth value for the polygonal face again imagine this there can be planar polygons or there can be non planar polygons as well so take one polygonal face at a time compute the depth values that how do you how do we know at what depth the polygonal faces okay it is also interesting that at every pixel position on the view plane when you process the same polygon that might be at different depths so it is also possible okay so sad for every XY position may be different okay if the affair is exactly parallel to the view plane okay then the z4 for all the pixels of the face will be exactly the same okay we don't have to really worry but if the face is oriented like this and if the view plane is like this then you have for every pixel position you have a different depth value so as for each polygon do this processing compute depth Z for each XY position on the polygon if Z greater than depth X comma Y that is take each XY position and keep processing the entire thing for every XY position what you do is compute depths okay if the depth is greater than the previous position so default is 0 default depth is 0 and if it is greater because we are in the negative Z direction the negative values that are larger is understood that they are backwards so they are not in the friend they're in the back so the smaller the magnitude the closer is the is the object on the face so as per depth we can keep comparing for every pixel position on the view plane take a polygonal face take one polygonal face at a time and start with the XY position of the first pixel position on the view plane and fire a line into the 3d world and see where it hits the polygonal face compute depth and then keep doing this for all the faces and take the color so that's how we do it and finally what color the pixel has is exactly the color of that phase that polygonal face that is closest from that position for that XY position so how do we know what is the depth of a polygonal face given a polygon faced with the equation ax plus B by plus cz Plus D is equal to 0 how do we compute depth depth is this Z is the depth for a polygonal face how do we compute Z that is equal to minus ax minus B Y minus T by C and the weekend we don't have to really do this for every what is called pixel position instead you can use coherence instead you can use what is called similarity that is for the next X position for the same face at the next X position on the view plane for the same polygonal face you can easily compute replace X with X plus 1 comma Y you consider a scanline replace X with X plus 1 comma Y and wherever there is X if you replace that with X plus 1 X plus 1 what happens is minus a times X plus 1 minus B Y minus D by C and you can you can expand that inside and minus a X minus a minus B Y minus D by C so already minus ax minus B by minus D by C is the previous depth Z X at X comma Y so we can conveniently replace that with X comma Y so we have recursive equations here the depth at the next X position is given by the previous X position minus a by C the depth of the previous X position minus a by C so we have recursive equations here which are very faster when in implementation in a program so imagining we have got one scanline so we go row by row wise one row at a time so we take we fix a Y and we keep doing this across the Y and then take the next way on the view plane and do the same thing and we keep doing this for all the pixels in the view plane okay so we can also do this recursively along an edge of a polygonal face by taking Y minus 1 and we can easily do this using because as we know the next X X dashed is equal to X minus 1 by M you don't have to really computer the news again recursive equations if you do a computation on the previous step you can use the computation the subsequent step using recursion has given there the next X position is X dashed is equal to X minus 1 by M minus there is a substitute in place of X X minus 1 by M in the previous equation for that and what we get is minus a X minus 1 by M minus B into y minus 1 minus D by C which is Z X comma y plus B by C as we know M is negative for this for the edge that is like this so M is negative so the equation is X minus 1 by M so that this is how we look at the depth buffer method a very important thing in the visible surface detection methods it requires two buffers the depth buffer in the Refresh buffer it deals with only opaque surfaces so there are some drawbacks of it obviously it takes up only one face at a time for processing it doesn't take multiple faces at a time well that's one drawback a major drawback so but the advantage as you can see this is simpler it is easy to understand no sorting of surface is required polygons may be processed in any order it is easy to implement yeah the next important method which is very popular in the visible surface detection methods is the scanline method okay we have seen the simple back face detection method which is an example of object space methods we have seen one example for image based methods which is the Z buffer at the depth buffer method another interesting example is the image 1 of the image space methods an example for image based methods is the scanline method okay so the scanline method it works like it assumes a scanline across a polygonal face and the advantage over the previous the depth buffer method is that we can process a number of polygonal faces simultaneously so we don't have to take each polygonal face so there can be too many polygonal faces in a scene so we cannot refer to take each and every face at a time and sometimes there can be opaque faces there can be transparent faces there can be any type of faces so we need to process multiple faces at a time so this scanline method is advantageous as we can take care of multiple faces and faces that overlap on each other as well so the there's an extension this this algorithm can be used for polygons that are intersecting across a scanline okay process from left to right and depth calculations for each overlapping service so we can have n number of overlapping surfaces like this and we can process all of them at the same time that's the advantage of this method the intensity of the nearest position is entered into the Refresh buffer so let us see how does this work so as you can see in the picture there we have two surfaces we can call them either a phase or surface so imagine imagine they're all planar so both of them are planar the first surface is identified as s1 the other surface is identified as s2 and where s1 and s2 a part of s1 is overlapping honesto that means there is a partial overlap between the two phases now s1 is determined by ABCD and s2 is determined by EF j is identified by the four vertices a of GH okay now the first scanline as you can see it is intersecting the edge a B of s1 and edge H of s 2 and also edge BC of s1 and edge F G of s 2 so it is intersecting four edges of these two surfaces of this two faces so but if you look at scanline 2 & 3 the number of intersections are that it does is still 4 but the but the difference between scanline 1 & 2 is that as you can see scanline 2 & 3 there is no difference here as you can see scanline 2 intersects ad scanline 2 intersects the eh as the next intersection point is on the ehh the next intersection point for the scanline 2 is on the BC edge the next intersection point is on the F G H so this the the intersections are exactly the same for scanline 3 as well so 2 & 3 we can use the principle of coherence okay we can use the principle of coherent so whatever we do for 2 can be exactly copied for 3 and we can simply I do not have to bother about the rest of the computation so we can exactly copy the same set of operations that we did on two for three but one is different from the two entry because one intersects a be a different edge than BC then eh then F T so what we do is we note these intersections and then between one edge to the other edge we take the color of the pixel a color the surface whichever is being intersected say s1 between a b and b c s 1 is to be selected for scanline one between eh and FG 4 scanline 1 select surface s2 between the edges bc and eh there is no intersection or there is it is it is like an open space so we don't have to bother about it so don't take anything there and beyond so that's how we try to select each scanline and we prepare an active list here what is an active list active list is the edges across the current scanline so whatever it is that the scanline touches and they are also sorted in the order of increasing X as the scan line intersects each edge see the X order so put them in ascending order that is increasing order flag each surface and indicate whether it is on or outside of the surface so as I said earlier it is s1 as long as we are between the two edges of scanline of a surface the surface should be on when we are outside of the surface it should be off the surface should be either on or of honor of here means we are taking the color of that pixel the surface pixel or we are not taking the color of it that's it it is on or off means that so at the leftmost boundary of the surface the flag is turned on at the rightmost boundary of the surface the flag is turned off so that this is an interesting method here no depth calculations are really necessary and for the active list one for the scanline one but for the scanline 2 & 3 we may have to compute also the depths okay scan line one is to be treated differently from scan lines 2 & 3 but scan line one nor depth calculations are required intensity of either s 1 is on our s 2 is on as you can see for the discussion in the now given in the slide for 2 & 3 we need to also look for what is the what is the combined color so for scan lines 2 & 3 there is an overlap so they are going across an overlap region the overlapping region is between eh the overlapping region is between eh and the BC edges so though for the overlapping part of overlapping region for the scan line 2 we need to combine the colors of both surfaces s1 and s2 and then we can give a combined color there so that's the interesting point so if s1 is prior ok we can if they're opaque if they're opaque we can take the color of the surface that is overlapping the other so the color of surface that is to the front if there if it is a transparent surface what we can do is we can take the combined effect of both and we can take the common color there so it's very efficient algorithm as we can process multiple surface at time only when overlapping is there we need to calculate depths otherwise we don't have to oh it takes advantage of coherence and the advantage and disadvantage are does not work for surfaces that cut through or cyclically overlap each other takes advantage of currents many overlapping surfaces can be processed so here we have learnt in this module how visible surface detection czar classified and we have seen examples for each of them one is for objects based method we have seen and we have seen two examples for image based method so you can you will be able to you can explore more on the on our books and other literature thank you 
NAXxo1sWMnE,28,,2020-05-28T03:06:45Z,EG / EDU 3 / Visualization Literacy / Wednesday 15:30-17:00,https://i.ytimg.com/vi/NAXxo1sWMnE/hqdefault.jpg,EGEV2020,PT1H32M8S,false,275,6,0,0,0,"we are life okay good I need to mute YouTube alright so hopefully everybody can hear me and I see some heads nodding so thank you thank you so much for being here we're going to be talking about disposition literacy and we will start with a paper and then we will continue with the panel we have both rating and I will be chairing the session I will also be moderating the panel my name is Mario Romero and I'm an associate professor at kth the paper that will start discussing is a true mapped literacy a classroom based investigation so as soon as you ready you can cue the video thank you I may be from University of Nottingham I'm going to be presenting our paper treatment literacy at colostrum is investigation this is a kind of view of what I'm going to talk about today first I'm going to give you an introduction to the topic and some related works also I'm going to talk about challenges of interpreting three months and three American through the assessment then I'm going to introduce our three math literacy tests and pedagogical three map tool I'm going to talk about classroom evaluation and results of the quantitative and qualitative analysis finally I'm going to talk about some limitations and fee to work I would like to start with the question of what is visualization literacy a simple definition is the ability to interpret and understand visual designs visualization literacy has gained recognition in the educational and information visualization communities because visualizations are becoming a fundamental part of the education however enhancing the educational process with graphical representations and promoting visualization literacy are important goals we wanted to study three map visualization is an efficient way to represent hierarchical data and requires a special layered algorithm but displaying the large hierarchical data set increases the complexity of the three map causing difficulty in three-month comprehension contributions we aim to identify barriers to enable a completely twisty of three Maps be investigated the barriers to trim of understanding ended twisty we developed a tree map literacy test also we designed a novel pedagogical application this application facilitates both teaching and learning of three maps and advances tree map visualization literacy related words there are several works focused on improving visualization literacy I will mention some of them as an example Boyet all developed a method to identify users visualization literacy level I felt all introduced an online platform to improve visualization literacy for early education another work by one and Li focused on teaching parallel coordinates while folks at all introducing a tool to use for both learning and teaching classroom algorithms using scatter plots and the last one is Liat all presented visuals a from the pc test containing the most frequently used visual designs the challenges of interpreting tree maps be identify and studied the challenges that prevent users from interpreting and comprehending tree maps correctly we came up with five barriers to the successful tree map interpretation the first one is hierarchy one of the barriers to the tree map literacy is the days on the fact that the tree map conveys hierarchical data the tree map displays the relationship between hierarchically structured data attributes the second one is layout it ends to increase the visibility of small items in a single image however the complexity of the layout algorithm can make it difficult to visually explore the data and comprehend it three-month size the larger data starts at size is more difficult to understand because more rectangles cause higher visual complexity labeled absence of Nod labels or limited display of the labels in screen space can cause difficulty in understanding entry map legend a color legend can be used to represent value ranges visually the options of a color scale can lead to barrier entry map interpretation in this image shows most frequently used visualizations and v-loc paper it's an evident from this video that the three-month design features several characteristic that distinguish it from the other most popular visual designs first of all three maps are not based on a simple Cartesian coordinate system and features labeled and number dances like the other visual layouts tree maps use a layout algorithm to guide the placement of rectangles also tree map is the only design that presents hierarchical data and can be used to display most individual data samples because of presented differences prima can be viewed as more complex to understand and the other designs three map literacy in the classroom the Explorer hub affected students were at creating a tree map by looking at the historical results of the information visualization assignment in 2018 and 2019 we gave out homework assignments to the students for our data visualization module they were required to create five different visualizations for a given dataset research to find evidence of the students and weaknesses in generating the three months as well as their level of comprehension and interpretation the drive criteria found on the left side of this image enable the assessment of tree map it will see the criteria consists of questions examining which tree map features are understood by the students such as the data hierarchy internal node leaf node labels and legends and color mapping we concede on the histogram in 2018 68 students out of 85 submitted a tree map design and 58 of them stated correctly what color was mapped to in their design however only 33 students could describe what the internal node size was mapped to in this one in 2019 we asked students to create a tree map image for a given data set in addition to creating five different visualization familiar to 2018 results students answer questions about the data hierarchy leaf nodes and color related questions correctly more than questions on internal nodes only 26 students could describe internal node size correctly also they were not really successful in providing unique observations and the correct name of the tree map layer this investigation on tree map literacy provides insight into students tree map literacy skills and enhances our knowledge of what they struggle with the most during the three-month construction this evidence eliminates identifying the barriers to treatment literacy and guides the development process of our dreamer educational application we develop a tree map visualization literacy test to measure a user's - mm literacy skills and identify the barriers to tree map comprehension I'm going to show you the video to introduce our tree map we developed a tree map visualization literacy test to measure a user's tree map literacy skills and identify the barriers to the comprehension of a tree map research for a tree member examples to establish a task with diverse tree map designs for users with varying level of tree map literacy answering tree map literacy test questions required the evaluation of multiple factors on the tree map simultaneously therefore questions will classify to identify how users perform in interpreting the tree map features each example is accompanied by a brief explanation of the tree map tree map image and multiple-choice question we design a novel pedagogical application this application tested States both teaching and learning of tree maps and advances tree map visualization looks with fee I'm going to show you the video of the software the three map application aims to facilitate understanding of hierarchical data structure and support correct observation by displaying the data correspondence between a traditional tree structure and a tree map layout simultaneously on this software we display a historic health dataset called Project Tyco provided by Pittsburgh University on this tree view the US is divided into five region to build the hierarchy when the rectangle is highlighted via mouse over on the tree view and the corresponding rectangle on tree map is highlighted the internal node can be expanded by subdividing the region to individual states in the region this gives a feel the layout process of the tree map also these are subdivided to different years the number of people diagnosed with the disease is shown and on the tooltip we can navigate to see the different corresponding I move around different levels of the hierarchy moreover we can display another disease and change the color scale colors represent a number of people with disease map two years states and regions we designed a colossal raise user study to evaluate the participants three monthly twisty and effectiveness of our pedagogical three-month software we provided our treatment visualization literacy tests as pre and post-test some 25 students participated in the study we described the procedure of our study and provided all participants with the pretest remap questionnaire after the completion of the pretest we randomly sample half of the participants to be allocated in the software group and a slice group the participants in the software group were provided military map software demonstration and given time to interact with the educational tree map tool the slice group was shown only traditional tree map slides used for teaching treatment concepts after completion of the two individual sessions all participants were giving the post-test questionnaire both pre and post-test sessions will twenty minutes long before completing the user study participants answer twelve interview questions referring to their backgrounds to test questions and the tree map software according to our quantitative analysis of test data the pretest results didn't differ significantly between two groups of the students students attended two slides session answered correctly on every 62% of the pretest questions and the students in the software group answer 72% of these questions correctly however the results of the process were significant they depend between two groups students attended this light station answer correctly on the average 79% of the post-test questions while the students who interact with the software perform much better they answered correct 89% of the questions overall there was no significant difference between these two groups of the participants the regards to the incremental de treemap literacy level both groups have seen on average 17 percent improvement in their results from pretest to post-test however participants in both groups and so the process integration test questions faster than the pretest question be classified questions based on the tree map features such as hierarchy leave notes color label and layout algorithm to test where they struggle at most to comprehend three months I will show the question classification on the table in the next slide results don't show any significant difference between the two groups taking three tests for any of these five categories but for post test participants in this software group perform much better in the questions related to the color leave notes and layout algorithms while there was no difference in the questions testing hurricane labels for both groups we conducted a semantic analysis using the feedback gathered from the interview about the literacy test and between that tool we identify five teams for the literacy test however I labels color is loud and the size that shows strong links with our hypothesis one of the participants that for the three map images provided in the literacy tests the more data being represented translated into more than three maps which made certain things hard to spot that refers layout algorithm the three map contains many boxes that are hard to see that refers the data size and other students said it wasn't clear how to compare the note and sometimes too many colors that refers color from the feedback on the tree map to two teams identify hierarchy and interaction in active learning a participant said about the software he braced the tree down so he can only me you what you want to see and I can see the relationship and the categories of different data and that refers the hierarchy shown on the tree map tool another participant said the visual feedback when hovering and did pop up were helpful and hands-on approach was effective that shows the interaction and after learning the table indicates questions ranked from the most difficult to the easiest based on the number of correctly answered questions also I mentioned earlier it shows classification of every question based on the treatment aspects that are necessary to comprehend for answering the questions correctly contrary to our initial belief questions might focus on one aspect actually question require a user to understand three or four tree map features so no tensley some participants with data visualization background and availability bias might have play a role in shaping our findings as the participant recruitment happened over the summer period future work improving the literacy test with a wider variety of data and dreamer visualization design can be a good future research more studies to reinforce the educational tool can be conducted with a diverse group including more participants can be another feature work as a further research with participants from non computer science field for investigating the influence of users familiarity with tree maps will be very interesting for the educational 3-methyl providing labels for each rectangle directly on the software and enabling to move large data set with a different layout algorithm would be a good feature work thank you so much for your attention [Applause] I saw that you added some applause that was great that was great because I was just about to applaud you thank you thank you for doing that for you thank you alright great so we have questions on the YouTube channel and I will start with Jana Smith's question and probably pronounce Schmidt do you think there is a bias in the data if only computer science students participate in the study actually this is possible because computer science students are more familiar do concept of tremont but this is our future work to impart space to include include broader backgrounds and from different departments or different a different from current people I can say I have a follow-up question to that you were using these tools to evaluate people's literacy where you also use them the tools to evaluate or assess their learning in class did it have a connection to their grades no actually first of all we tested this in a classroom environment so we basically gave this one gauge the software to the student to enable them to interact with the software I have and octave a learning experience however we couldn't test their results whether they that effects on their assignments were test results is this something you would do in the future exactly give them the task of learning how to read information out of tree maps and then as I said with the tool that you have created this is the aim for future all right great there are a few more questions but I want to go through the audience questions first because I wrote down a few for myself we got DataViz bald let a me we know some of us know database pop literacy includes construction creation and interpretation it's a little discussion that we've been having about what is literacy and perhaps you can join the discussion and particularly we're talking about does it include programming does it include interacting when we talk about visualization literacy sorry can can I get a question again because I couldn't hear properly I'm sorry I will repeat that so on the YouTube channel we've been having a little discussion about how do we define the Association literacy and should we include programming in that definition actually the definition of visualization literacy is ability to interpret understand and construct visualization itself right so basically our software includes construction and also understanding of mutualization especially the tree mapping in this case so yeah we can say that and the follow-up question of course is did you address the construction and the interaction because when you interact with the tree map you change it significantly you change the way that it looks and you change what you can read from it I know from the video that you should you did measure interacting with it for example so meaning to lower levels in the dream but also did you test in any way the construction of a tree map not in the evaluation in the classroom raised evaluation but earlier we kind of tested our students with the data visualization assignments so we asked specifically asked them to create three maps in the classroom so and then we prepare a bunch of questions to check their and tree Maps and whether they understand or they could construct the tree map properly so this is our evaluation for the 2mm construction exactly and which brings me to my next question which is almost to follow up can you talk a little bit about your questions because that matters a lot I have done evaluations with treemaps and I asked simple questions for example how many branches are at a particular node or I ask questions very specific questions about the value the numeric value of in the area within a branch for example so I asked different types of questions and I give multiple choice options and then of course I have to design it in such a way that there are sort of occluders confounders distractors so that within the multiple choices there are possible answers but they really need two other stuff to get the right answer so can you talk a little bit about those those questions what do they look like we basically have to test pre and post-test so we created pretest to kind of evaluate their treemap literacy level previously so this test is pretty much similar with the post questionnaire process questionnaire so we provided 30 questions and we provided a tree map and different tree map designs with varying level data with varying difficulty level and then we also provided some multiple choices as an answer to the question so yeah this is the answer but those some it's I'm in a little bit more curious is there for example are you asking for a numeric value like a specific like a 17 exactly yeah some of the question also asked some specific numbers in the leaf node or the internal nodes yeah and plus we also ask questions about two shorter itself so basically we have two groups slicing software session for the two the students who took to participate in the first first session we asked questions about the software so they basically could discover the data and use the tool to find the specific number and shown on the tree map application and we have a question from Jonathan Roberts the question is there are different ways to slice and dice tree maps and render them for example crucian tree maps he said you may have said this and I missed it but did you look at these different methods and ways of doing or operating tree maps yeah actually analyze different tree a tree map layout algorithms but we decided that this fight and dies algorithm is the most suitable layout algorithm algorithm to teach three methods receive and initially good I have one more question and and then I'll leave it open for for a couple of minutes for the audience to ask more questions are your tools available for others to use actually this tool is developed for using in the classroom environment for instructor and students however we can find a solution for that so we have a video tutorial that shows all the features of the treemap requital application so I think we can provide this video tutorial to the students or instructor if they want to use it learning to remap genovese Bob is saying there's a demo online yeah so perhaps we can either on your paper or as a comment here in the YouTube channel we can have the link to that tool yeah this will be great all right we have four minutes and I think we have covered most of the of the questions we have a lot of applauses I don't know if you're also checking the the YouTube chat so people are commending you on your great work okay so let's give people a few seconds to think of a final question and then we can move on to the panel Thank You Alice thank you so if there are no more questions then what we can do is move on to the panel on visualization for data scientists how specific is it and for this I will be sharing my screen I am multitasking so if I make a mistake somebody needs to say call me on it very quickly so that I don't continue talking all right so there's a lot going on here so the first thing is to share my screen so I will do that and I need to share the right screen the one that has the camera so that I'm looking at the camera and then so basically I'm thinking on loud so that I don't make any mistakes and then as you are seeing my screen I have you split it into a number of things and I need to have the cameras for all my panelists ready here on the right and I need to have the slides I need to get the slides ready it almost looks like I'm ready to start talking I want to change this view here perfect there we go it is almost four o'clock and I will go ahead and get started welcome to the panel on visualization for data science we're asking the question how specific is it my name is Mario Romero I will be most I'm the chair of this session I'll also be the moderator and I'll start by introducing all of the organizers and panelists Daniel Vanina old Kim she develops and conducts data analysis education programs at Siemens her work focuses on interpretable machine learning and visual analytics she received her PhD on visual document analysis from the University of Constance I mean Chen developed his academic career in Swansea he is now professor of scientific Association at the University of Oxford his work focuses on the theory of the Association video Association visual analytics perception and cognition Paolo Chow is at my alma mater where I did my PhD Georgia Tech he's an associate professor there at the College of Computing he could erects the master's program on analytics and his work focuses on machine learning and visualization for interpretable and secure AI Aton Adar is joining us from the University of Michigan where he is an associate professor of information and computer science his work focuses on HCI and very large scale data mining which also includes methods in teaching information visualization Adam he's an assistant research professor at Carnegie Mellon University CMU his work focuses on human centered data science research and education he's also working on interactive and visual data science interpretable machine learning and data driven healthcare Patrice also Santos who is a Corgan Iser of this panel and by the way Adam is also a curve and I sir Beatrice is an associate professor at university either they are they do her work focuses on data and information visualization in virtual and augmented reality computer graphics and visualization education I am from kth the Royal Institute of Technology in Stockholm and I'm an associate professor in graphics and visualization there recently I've been focusing on Bertrand augmented reality and how to do this visualization and graphics in this media I also do some research in pedagogical methods in learning and computer graphics and visualization I've done panels on visualization literacy as well and today I'm moderating with that I give the floor to be a threesome so hello everyone first I'd like to thank the panelists for having accepted our invitation you are all experienced researchers in the field and also indicators so I am sure that we can learn a lot from you and thank you Mario for coordinating and moderating this session which are not easy tasks these guys as you know data science it has been widely used to support activities in diverse domains that the scientist is currently a position much in demand in the job market this creates vast research opportunities and the need to better understand how to prepare people to become professionals and researchers able to keep working in a very difficult to anticipate future it is reasonable to expect that the market demands we'll continue and that visualization research will keep producing results which with interesting industry applications all these suggests and needs to adapt in the light visualization core courses to prepare these people there are many visualization courses some recommendations also however they are not very specific to data science programs so I suppose many of us now have these new audiences different from the computer science students we are used to teach and would appreciate some help on the best way to adapt so that was the main motivation to propose this panel okay so please can you show the next slide we are on slide number 10 it says may not made any data and information visualization courses do you want the next slide number 11 yes please so in order to to get some insight on the current offer we analyzed 47 MSC programs in the field of data science which are lectured in English worldwide we also analyzed surveys about visualization for data science to companies and to data science programs and it was interesting to notice that most participants of the visualization Society survived were self taught about visualization then we looked for information concerning existing visualization courses in data science programs and we identified the need to discuss some issues so that is why we invited our four panelists who have all been actively involved in visualization education for data scientists so in without further ado here is our first panelist Daniella okay thank you very much for participating so now it is the Neela Stern and the rest of us can mute microphones so that she can continue danila I think you need to unmute your microphone okay okay now I can hear you all right good so hello also from my side and could you please directly go to the next slide okay so what do I do I'm from Siemens and I'm teaching their true basic courses for data analysis and artificial intelligence one is mainly about machine learning artificial intelligence five-day course so professional education course and the other one is social analytics which is three days yes so whom do I teach it's actually a quite diverse audience so as I said it's all professionals you go on please you see that we have well many engineers are in there then also computer scientists mathematicians sales staff project managers business administrators and so on everything that you can think of every roles it basically tests date on and what is like for me a distinguishing factor two classes that you may have in university is that our participants usually have quite a clear goal that they want to achieve with the training so for example they may say that they need the training to analyse the data of throw rinds oh or they know that they have to understand stand data analytics and artificial intelligence whether to manage their projects or to talk to customers or maybe they have to report some numbers and want to become more in position than that thanks slide please and I was thinking of if I maybe have a couple of things that might surprise you I'm not sure if it's really surprising you but it's maybe a little bit different again from other classes so the first one is that we hardly don't teach sophisticated visualizations as they are for example presented at nervous this week second thing is that we do not use d3 in our trainings although this is of course very good language a very good library for producing visualizations our participants teaches well in the training at least partly and last but not least an important issue that is often overseen is that often the visualization itself is not the main challenge of the participants I don't want to go into detail here if anything is arousing your while making you're curious then just feel free to ask a question we can discuss it later in the panel so now it is the turn of mean to give this opening statement okay and hopefully you can hear me and my name is Ming Chen and thanks to the organizers for inviting me and the sanctum area for the Coordination next slide please so in terms of a specific I can talk about briefly about the course I just told investments and this is a mmhc level calls for on the topic of visualization it has only four lectures four hours and the in addition it doesn't have four hours tutorials to support the legend in the form of discussion because of lockdown we have a slides and a video for the lectures and then we have assumed for the tutorials and because of lockdown is quite daunting for everyone and so I designed the four exercises completely on the topic of curve with 19 and there's also a assessment for half of the students and there are two MSC degree schemes involving odds ways the MSE social science of the internet under the MSE social data science and if anyone won't see the slides of the the course the lectures including the datasets for the egg sites and and you can go on to that particular webpage next please and so I guess most people would be interesting how the four exercise will be and the four exercise was designed particular for the social scientists and the the course contained roughly about 2/3 of students coming from social science the arts humanities background in the Windsor from mathematics and engineering computer science and other scientific discipline they roughly have about one-third people who had the experience or programming using are using various of pison type of environments and there's a some farmer whether the woman student raised his or her hands and indicating had the experience who will have a p3 experience so the first exercise I designed to ask people to go have a look a number of visualization online about a kovetz 19 data then I asked people to provide their critique and the focus I wanted the students to fully aware there's a difference between visualization create a visualization for the general public and the creative visualization for themselves as a data scientist and the that difference quite often get confused by people working in in the data or in the academic area environment because people have both the road to disseminate information as well as to analyze the information received second exercises are give students a synthetic multivariate data set and for the kovat nine scenario and i creates a land of regions with the squares and with attaches variable populations and the transports and other information involving that and i I really encourage the student to use parallel code in the process to analyze the potential correlation involving that the survey exercises I'm giving a design exercise under although the social science students are not your quality developing software but we kind of encourage them at least be able to involve in designing the software specify the requirements and see what could potentially be useful to them the last exercise exercise for is of course a lots of social scientists data scientists are involving to be modeling so I'm taking the modeling as a problem and ask people to consider a visual analytics workflow working on that so I'm not going to detail you can look at the slides to see all the specification of these four exercises next slide quickly and so I just quickly show you that the date sets are created all for a length of four squares it has many many variables which is a in the form of a typical spreadsheet and they have a temporal data involving that so they have of course the the possible connectivity relation and so naturally we have the codes confirm the cases and the case of fatalities and I encourage people to use variety of visualizations thinking but the main thing I want everyone to do which I believe every single data scientist should learn how to use color coding and so that was my kind of force the introduction of this techniques to them next slide please Nexxus yeah so and for the PPE and the exercise of course many country encounter the difficulty with PPE and logistics so I'm I made up a summer window 95 style and the PPE software and ask a student to improve it and under that was really just exercise ask them to use different visual visualization to improve that again the detail is that next slide please so in general and I my teaching style tend to give a fair amount of information and encourages students to learn themselves and if they become interested in and also like encourages students who crashing the common wisdom so here's a list of a common wisdom I get a student to crashing them see whether they are always correct and if you are interested in some of them are already being discussed extensively in this guide web page and I encourage everyone to participate this guide so they can thank you thank you so much now we go to poodle yes so Georgia I teach a class called data and visual analytics conic slightly and it's very related to what I do for research so I draw my research lab is called a probe of data science like your name thing sometimes I'm sure myself and what we work on is to do that scalable interactive interpretable tools for understanding large amount of data and also the come back machine learning models and so on slices the data and visual analytics class at Georgia Tech because they are a design introductory data science class and the size of Master students will also have a PhD student and other graduate students is quite large the reason is that now is a required class for our Masters of Science in analytics program we started the program in about 2014 and now extend it to online follow the following the model of our successful OMS program where a stands for online necessary science so start at original and computer science and now extend it to analytics so now this classes require both on campus and online program and because of demand don't go by please desire and user demand and offer every semester and the total number of students every semester can be pretty high so for example in the past two semesters three semesters so it's about roughly about 1,000 students slightly thank you yes and the course schedule is based on what I call the analytics building block so he gives various is covering data analysis and visualization all the way from data collection and into cleaning integrating model data sets and ended in an analysis visualization and then how to present the result and convinced before that that the result dissemination and I go there is to help student learn about how to develop techniques that we complement each other and main focus is on how to work with real data and real problem and thinking practical know-how which I think will be really helpful for their jobs and research so key focus here is on the breath so we cover a lot of things and student need to learn very quickly next last thing and in terms of learning activities we don't have exam students need to like it a lot I personally like it a lot when I learned as a student there are four major homework assignments and they focus on example first one is on an TN analysis how to do data collection and some cleaning and all the way to visualize position and in some homework on what specific on the topic my visualization using these three different charts creating visualization and therefore one big assignment on the potato technologies by sparking AWS and so on there's also a main component on doing this group project so a project-based learning where students will work in teams of four to six students and do it work on a project for a half a semester next one please and for the good project they can pretty much do anything they want as long as the topic needs three core requirement one instead they need to work on large real data that cannot be twenty two a nice very nice data they need to be messy and large and on top of that they need to develop the non-traditional computation so it cannot be just their computing the mean or medium they need to actually think about okay so how do I solve a problem using the best way possible and also has an interactive front-end so that's their user part so how they interact or if the user gets a feedback and they effectively improve on the results based on engine operating so we have a quite a few deliverables over the course of half a semester starting with proposal they do presentation document proposal and then we have targets checkpointing progress report for checkpoint and then finally they do a longer write-up and that puts the percentage all right here thank you thank you so much it is now a ten story um hi it's it's a pleasure to be here and delighted to be part of this panel so thanks for inviting me and organizing it I'll talk briefly about a couple of classes that I'm teaching so I have two one is a residential class it's called si 649 it's taught mostly in the school of information but has a computer science cross-listing it is a graduate class with sixty to eighty students per semester we teach it twice and it's about three hours of contact a week about an hour and a half where it's a lecture and an hour and a half of a studio section where we do a couple of different things which I'll talk about in a second it's mostly School of Information students so people who are doing HCI or information analysis but really it's kind of the only info vis class across campus so well we have things like visual exploratory data analysis which is more statistics focused if you want to do information visualization this is largely the only class so it's it's it's recommended as an elective across lots and lots of different programs including statistics and computer science the other thing that I'm teaching now is a online class which is part of our online masters of applied data science maths curriculum what we did there is we divided our classes into four week chunks and so there's a lot of them but for information visualization specifically we have four or four weeks to on enter information of visualization and advanced information of visualization communication using visualization and then uncertainty and visualization I'm teaching a couple of these right now it's about 80 students per semester but it's intended to grow this is our first year running this program so these are graduate students learning remotely and our goal is about 250 students okay so I want a little bit about the residential program which i think is kind of the more interesting one just because I've had a longer time to develop it it's a flipped classroom first by choice now a little bit by necessity there are video lectures that the students watch about an hour to an hour and a half with a high-stakes quiz that's really actually quite easy so every time they come back to class so once a week they have a very high stakes quiz me ting it's 25% of their grade so we actually ensure that they're watching the videos lectures have now changed into this active learning environment so we split up students randomly into groups of five to six students and what I'll do is all based on whatever the topic is of the week I'll present some examples or walk through a problem and then I'll have the students work on it in their group and then we'll come back together and have a discussion the lab sections this is the other hour and a half the students are in class the first few weeks of the semester and our semesters about 15 weeks the first five weeks they're learning some kind of programming or tool so we've oriented around tableau for one week and Vega Lite and Altair for four weeks we used to do d3 and while students are allowed to still continue to develop their projects and that we don't teach it anymore and I'm happy to discuss that and for their other ten weeks the lab sections are something called visit cards which is a workshop format that I developed so if we go to the next slide I can show you a little bit about this so the visit cards is a is an idea and we presented this at a paper in viz I true believe is in 2016 I think so if you're interested you can go to the website or read the paper it's a structured workshop format or basically we give them a problem every week related to whatever the topic is so if the topic is something like hierarchical visualization I'll tell the students who are working in a group to visualize a tennis match so they have eighty minutes where there is switching that's very structured and guided between individuals drawing as many different sketches as they can and coming together as a group and building their visualization so it's very guided they have to figure out what the domain tasks are and so on at the end they produce one visualization that's sort of the representation of their group on a poster so this is all hand sketched what they did with that and if we go to the next slide is I will give them then a actual paper to read that is the quote-unquote professional solution where they have not been exposed to it before so they have not seen the professional solution before their their design activity and that's on purpose they will have to read the professional solution and then create a critique or self critique presentation contrasting their solution to the professional ones so it encourages sort of thinking about why they made certain choices and why the choices were good and bad this has led people to sort of think through the trade-offs one has to make in designing visualization so instead of deciding why the professional solution stinks which is what they default to without that exercise they have to think it through so I'm happy to talk about that I'm also happy to talk about my somewhat strong opinions on education so I've written various blog posts on this some of you may have seen these I've done things like banning the word exploration and my info of is class and I'm happy to talk about why I also believe they should be quite good at using command lines so yeah that's it for me I'm happy to talk about any of these and thank you thank you so much this is my favorite slide right here and with that I thank everybody and now we can go to a view that has all of our faces and we can also go to the YouTube channel and now we can I guess we can all unmute ourselves as well so I want to go to the YouTube channel to see if there are any comments okay here we go I found it alright I don't see any comments right now on the YouTube chat I'm also going to check the the chat here on okay good so in that case the first thing I like to do is invite the audience to write their comments and participate with the panel I want to start with a question that is close to my heart what's up would be three so two of the panelists said we don't use d3 so that was the Nayla and mate and everyone else can join as well so let's start there I'm sure Daniel do you want to go first okay so in our case it's pretty simple it's because of our eatery genius audience of participants that we have because we cannot inspect expect that all of them are able to program travel script actually we can't we even cannot expect that everyone is able to program and it's it's not possible just to start teaching and programming as well in addition to visual analytics in just a couple of days so for us it's related we do have a broad set of programming skills but we I found that the learning curve for d3 it was quite high and so students were able to create sort of simple things at the end but the reality was that other tools would have allowed them to create and iterate over the simple things much faster so there are students who pick d3 for their final projects that's totally an option we give them resources on how to learn it and so some some students who are quite strong programmers will opt to do it and they'll create sort of new visualization techniques new interaction techniques and so d3 for them is great but for most students we found that the kinds of visualizations that they were producing were best served through other tools where they could rapidly combine sort of existing chart types and just modify them a little bit add new kinds of interactions and so we thought we would give them the tools that they would need to iterate quickly and produce lots of different options and we thought that was at the time more important so there are two projects in our class one is a individual project on communicative visualization where they build an explorable explanation and another which is a larger group project and so we often see in the larger group project some students opting for d3 I really like this this answer first because I was a little concerning to that we have been left behind by better tools and I know that there are newer tools but d3 is still very powerful and it also addresses the issue that the audience in data science is more diverse so you need to you need to adapt to that you can't expect everybody to have the programming background that just the computer science audience would have which I think brings me to the next question that I want to throw out the panel and then let you know you can just raise your hand or stop start talking either one is fine I want to pinpoint if possible a bullet list of issues that need to be addressed when learning visualization for data scientists in particular we've addressed one you cannot rely on strong programming skills for example you need to cater to a more diverse audience so that's one bullet point can we come up with more that specifically tailors education of Association to data science and anybody want to go first I'm looking at all your videos Jimmy so can go okay pull oh yeah I think one thing about data science is to to help students develop the thinking and data science often is about problem solving I think Bob is the same for many disciplines to and developing in mindset that visualization is part of the ingredients needed to help solve the problem Ronna and I also I make things pretty I think that's still still true I think a lot of times before student and if you shall I say in class often when they come into the home why do I need you like I have machine learning algorithm I come in why do I need to do data cleaning house visualization helpful for their cleaning things developed and developing that mindset and showing concrete examples about how visualization is not about just making fitting for this X is important but making that an important part of the solution I think that that the mindset it certainly needs some help it's not like just okay one lecture on one video and then everyone gets it it usually is you tell them first and then they do some exercise and then tell them again or they ask them to tell us and then so that devising that would be one important thing would anybody like to comment on that mean and I agree with power completely and and I think is part of that and there's a fair amount of misunderstanding in the amount data scientist about what visualization is for and they there is a a very large proportion of data scientists will consider visualization it's just the end products of all the process data mining machine learning and so on and it is and it's out of changes this mind decides to consider the visualization is the integrity integral parts of data mining and including machine learning and all this part of the process in fact the most important thing is observation and under the initial data coming how can you quickly observe the data under under quite often because the data scientists don't have the capability to observe data quickly you don't have really effective visualization they have basic since Parcher the time series and the saw scatter plot they they they feel the visualization doesn't really help them so they end up over the give up visualization in the early stage of their work but that H is the most important part if you ask any physical scientists with this finished citizen with this barrages with his chemistry and observation is the first thing you collect the data you observe data and the the the second part of the data scientist challenging is a lot of data scientists where their main purpose of their work is to use machine learning algorithm or using data mining algorithm is to say you don't need to use visualization you don't need to see the data anymore my algorithm is gonna tell you what it is no I mean there's no in some way there's nothing wrong they want the automation and the self but there's a fundamental misleading thinking is they also by saying so much about it they also mislead them self to thinking they don't need to see the data either which is a really dangerous part of the the data science and under so if you're looking all the data science definition they tend to define data science is machine learning plus data mining and the visualization is like a carbon side line products if they may be useful so so we have the changes as a community to to really say why visualization is useful and under soap of that is is our own problem because we way create and MA so far the wisdom we identify a lot of wisdom fundamentally they are damaging visualization in the long run I I was thinking a lot about danila and then sort of her focus on machine learning and I don't know if that's what you have in mind but you were raising your hand vanilla wanted to say that I first of all I agree with what Elaine and Paul said I want to add something because I think visualization can also be extremely useful for data say scientists in the process of finding out what exactly has to be done with the machine learning tasks is that has to be solved because that often involves talking to domain experts and that's really I are usually in my class I tell them that this is like a gap that you have to cross okay it's not you they are not going to surf you the data analysis tasks on the silver platter and they don't know exactly what you can do and what is in the data but on the other hand you also can't specify the questions data analysis question without them so in my experience data visualization is a great means also for bridging that gap helping you to talk to people just by showing them first effect and getting getting into a discussion with them absolutely thank you we have our first question from the audience and it is Martin scrotes key data is often collected in specific domains where the data scientists lack the specific domain knowledge but the domain experts lack the knowledge of data analysis the question is how does the Association help here it was exactly what I was trying to say by yeah exactly else want to comment on that a quick comment so exactly whatever is that and and the observation experience on some research project where I took project me so it doesn't have any me or visualize is not written as part of the deliverable but then interestingly usually when we do the development and even is machine learning and then we said that help we want to look at most really happening what have we learned and then the visualizations that output eventually I could help the project a lot because once you put in from the same screen everyone have the same same space looking at it same language and that really helped the project a lot so that's interesting observation that sometimes you so that is not the initial plan and I'm perfectly happy of that and I wouldn't say always individualize it you just threw the process and everyone start to see their value yes it's a very good question marketing and and the so I I think the short answer is collaboration and and a part of our education in terms of giving visualization courses is to teach or to make people who may not be like social data scientists and all physical data Sciences to be aware they can call for help when they need be aware what can be done under what these be done and the data scientists some data scientists are wonderful and I work with a US team in Chicago a few years ago and and I would the way they've been using machine learning for doing some text analysis for five years but the results wasn't great and then I said could you give me some examples of machine learning kind of failed or they say how many you wanted a within a day they poured out fifty examples and the email me and email us so so we can start to see why from visualization point of view for visualizing can help the solver the the force positive force - results attitude to help them out in a sense and but uh sometimes they also you we almost encounter the data scientists would say oh my machine in the alchemy is always good and it can't be anything better and my mother is the best model in the world how dare you challenge it to say you can try to improve it how much you know and so so it is a kind of an education to to really let people aware how powerful visualization is a - too young able people thank you that reason Adam have been very quiet and this is the panel they organized so please take this opportunity to share what's on your mind because again pretty much all the panelists agree that there is this misconception of when data visualization is useful but when Beatrice and I were kind of analyzing data science programs throughout the world it's pretty much a rarity for this course to be requirement sometimes an elective often times is not often offered at all and so I guess the question is is this a problem and and how do we fix it if we feel that you know people who don't really understand the true benefits of one database is appropriate so I think that's an interesting question first we do require it but we have actually multiple classes where visualization is embedded as part of them so we have like you know what we call an exploratory data analysis class which I don't love the name but that's what it's called where that is for people who are specifically applying visualizations in the process of doing some kind of statistical analysis so we teach them how to do the proper kinds of histograms QQ plots how to read them what they mean and so that is a tools on the service of that statistical progression that a data scientist might have so they have a hypothesis they need to or need to a decision point about which algorithm to use and so that that kind of class is like here's a very traditional set of plots that will serve your needs but the other thing I guess really broader question and maybe the specific one is we try to emphasize this layering we use tomorrow monster and Amara Myers model that there's domain tasks abstract tasks algorithm and so on so we emphasize this and this runs throughout all our courses at least the ones I teach where like you basically have to isolate what the domain task is and then find the abstract representation so domain task might be whatever the biologist is doing and their questions the abstract task might be oh they're trying to do a correlation between two variables over time and then they have techniques that they've learned about that sort of solve this but by forcing them to find like what the domain tasks are which of the techniques they know about what the abstract representation is and so on they're able to build a collection of techniques and algorithms and methods that then they can apply in different scenarios so that's a way that we try to emphasize that you need to do this process of separating out these different things because for data scientists we're trying to train them to work broadly right they're not often just being trained for doing a very specific thing like some of them will want to be in learning analytics some of them will want to do game analytics some of them will want to do whatever but it's our job to give them the set of tools I think that will help them do you know work across these different spaces so that creates interesting challenges I'm curious if other people have have encountered that but you know there's always a little bit of resistance and our students like oh I only want health datasets and it's like now I'm sorry like we have to do you know across all these different areas I'm gonna go back to the audience Cheeta don't make is saying hi girlies and she's interested in in sort of the differences between pure data visualization and what we call the Association in data science she's given an example here for example data Association emphasizes spatial data stronger and in data science we emphasize multivariate time varying graphs more so this is one example of a difference between pure data Association and data visualization for data science can you comment on that and then perhaps expand it I mean I guess I'm the oldest the chap there so this is a there's no such things as a pure data visualization and under there's a historical visualization was developed for scientific application seen in the 1990s and under then the info base which really emphasized our multivariate data set the graph network a text and largely has become popular in the you know around 2000 ish and that nowadays they you can see all this different type of data types and they all mix together in very some applications and and the most importantly alongs like the early but to some importance on the finish the the news area introduced into looking into the interaction between the algorithm and all the visualization essentially looking at into the between the human centric process such as a visualization interacting and ultimately the process which is a statistics and algorithms so that is the visual analytics fun good things is a next year and 2001 and the the three major conferences the cyber is in focus and the past is going to be merged properly and there will be become six areas and we'll concentrate on the serious application and visual representation out devise systems algorithms and the visual analytics the name is not exactly the same but that's the that's what mostly that's the six topics thank you we have one more question this is from honkey and it says there scientists are working under time pressure standard of associations are powerful and easy to make by this I think he means he or she means it's simple you know like a bar graph it's simple scatter plot is simple why go to the trouble of doing parallel coordinates for example so they are satisfied with these simple visualizations what are some research opportunities to the panel to see here what are some of the research opportunities that the panel see here would anybody like to make a point there and I think some of your opening statements had these points mean you raise your hand but you spoke last was like the cover letter a letter Dan yeah Daniel did you also raise your hand yeah yes then I go first you can go second so first of all I I can agree with that statement in many cases the standard visualizations are enough especially if you combine them in like in a way that there's an brushing and linking or interaction possible and that's basically also what we teach them to do first but my experience is also that people are also quite open for what we would say are more more sophisticated visualizations the problem here is indeed usually s was said that they are in the time pressure or they cannot spend a lot of time in programming things so if you offer them a possibility to easily use these more sophisticated crucial eyes Asians they are probably likely to use them and you mentioned parallel coordinates for example parallel coordinates are available they are easy to produce and they are used people also like these pixel based visualizations a lot this is something that you can almost do in tableau yourself and they are really yeah they are used if they can be used easily so that's maybe something it's not a research challenge or a recent search question but something that I can say to the research community so the easier you'd make it to use your stuff the more likely it is that it's really used in practice me so it really depends on the needs of the user and some users use visualization occasionally and there are many users involving big data they use visualization really intensively so some example one project I working on we have a six analysts that use data visualization eight hours day five days move it non-stop and and for people like that if you can use a visualization to improve their performance as daniel said speed and identify the problem identify the patterns and you only need improve them a little bit better and with a specialized the visualization and and then it would be much easy another thing is when the user I have a lot of work to do they are more willing to learn specialize the visualization so they that is also difference so when typical visualization is like glyph based visualization is very special January is not cost-effective develop a cliff face the visualization because the cost of developing cost of learning is very expensive but when people are doing it every day every week then they suddenly become effective and so there's a cost-benefit analysis related to the visualization self yeah thank you Adam you want to add yeah just a related question so this week we're all at your of is and there's lots of these exciting new techniques being presented so I guess the question is is how applicable is it to show these and these data science courses is it better to focus on the traditional Cisco plots because they can do them in a cost-effective manner or do you think there is still value to kind of exposing the students to these latest and greatest techniques my belief is is yes the that we should expose them I think it's my job as in teaching these classes is to expose students to a broad set of tools and let them build a toolbox that they can apply now most of the time they'll reach for a scatterplot and like just like you would reach for a screwdriver because it solves most of the things or hammer at it or whatever it is but right like there's a set of things that are very common in your day to day life and you will want them but I also want you to understand like if there is this rare tool that occasionally you will need or if that's your entire job like your plumber right like here's the set of tools that you will need in that in that role maybe people don't like this metaphor much but anyway the you know I think it's our job to give to give people an exposure to different things because we don't we don't know what they'll need to use we should teach them the things that they'll use most often and be very good at using them so scatter plots histograms whatever you're gonna use that a zillion times a day and so I'm gonna teach you how to make those than how to understand them but I'll also expose you to these research projects and but you know in in talking about that we try to pull out like broader lessons as well as specific things so if the tool was only built or presented as something that was only built for biologists we can still look at the things that tries to solve and pull out the more abstract lessons like oh this is a great technique for looking at time series data and you should put that in your toolbox for later if you need it I have Birds going crazy outside the window there's something you mentioned and it caught my attention you want to you want the students to use the basic techniques but use them correctly and you will be surprised I mean everybody is sort of tired of seeing graphs that don't have the right labels don't have the right legends don't have the right colors or size of the text you know simple details like that make or break the graph so I think it is an issue to teach people to use the tools correctly we have another question from Jonathan Roberts with literacy one good teaching method is to get students to reflect realize what they have done and and applied in your resources to you and if so how do you get students to reflect carry their laureate area when saying to so showing before-and-after is a very powerful way to help train them to do reflection usually we'll start with doing some accounting so because my one class is because the titles like do's and don'ts and visualization so show them first okay so this is what you see anything wrong or anything what I actually would change the running is what can you improve on is that really all reading very good initially in the beginning of class users in the oh no that's fine nothing no problem right and then you kind of start a program and some students at eraser hell I think this can be better it's the ending and then this is actually using the kind of problem driven way to help them to think and through the election which are more examples okay so this origin no this is better it's a better why is it better and then that so that's one way more like a sit if you would but then in the assignment we also asked them to do okay so here's the beginning so now think about everything that you learn or have seen you don't need to come out perfect way but about what can you make it better so hands develop help them develop that that kind of thinking sometimes you also need to provide samples do for example before where I student and doing research sometimes there was them maybe spending one hour or two hour just to say okay this is your initial design so this I would change it like this because and so they see both before after and then also my rationale and then they can add all kinds of things so that seems pretty effective at least for me yes thank you a them I'm going to you because you said something that I I found very interesting you have them think about a design problem a challenge before you show them the literature and then you try to make sure that they haven't seen the literature although you know dedicated students may actually have done the literature review for the design challenge so though so this is a follow up because when they compare their project to their to what the pros are doing they're doing a self-criticism they're doing every flexion so first how do you ensure they're they haven't seen the paper because you know they could go out there and do and use Google Scholar and find it or something else and and then also this goes back to the question about reflection from Jonathan some comment a little bit on there yeah so they don't actually know what the what the project will be like the many design exercises will be until they show up to class so if they're pretty rare papers like the things that they have to read in advance I give them enough stuff like learning about tree maps or learning about like why you structure trees and hierarchical design this way or that way so they get enough reading anyway they're not going to go digging for like really obscure applications of these things and then when they come to the lab session is when I actually give them a sheet that says your design spec for today is this this and this so none of them have thought about it or I mean if they have it's it's often in very vague terms and so they haven't seen many solutions so the other thing that we emphasize heavily is lots of iteration so the way that workshop is designed is like you have to spend some number of minutes making as many like crappy design sketches as you can on paper then you talk about in your group then you have to go back and make as many new crappy design sketches as you can and we have them log it like they basically put it up into a slide deck at the end of all the different choices and ideas that they've had so we emphasize this notion of trying lots and lots of different things and comparing and contrasting like given that our design spec was this and we decided on these domain problems to tackle is this visualization better than this other one how will this one scale relative to this other one and so on so that's the kind of thing we emphasize as a kind of local self critique and then globally for the next session they have to read the paper or look at the project and compare their final solution and sort of make a clean presentation that they can do in front of class so there are the many critiques that happen often and then the larger critique as well and we give them feedback - you also said that sometimes they say that the professionals are not doing the right thing is that is that really happening it used to be that they would just say oh the professional is like they made a mistake like it's bad but when they have to do it themselves like in that exercise they realize it's a trade off so this is like the wicked design aspect of information visualization they realize that you can't serve all the different visualization tasks you might have you often have to make decisions about prioritizing this versus that and they're forced in the way we structure this to take a subset of domain tasks so in the tennis example right there's like 50 million things you could visualize about a tennis match but I tell them you can only pick five so you can only pick five that you will tackle and then they realize that their solution is limited because they're not solving all these other things so it's become less of a criticism of like oh these people did something wrong but these people pick different trade-offs than we did we have four minutes left and we have had a panel that at Greece for the most part on everything so it's you know it's an interesting panel but I wanted to I want to see if I can get some contention going on what's up with no exploration yeah okay I get to be the troublemaker so I've banned the word exploration in my class because I don't believe that you know scientists or pretty much anyone that the goal for these people is ever exploration that the goal is always finding so I prefer a language that's focused on finding so what is it that you're trying to find in the data and then they're not allowed so students are no longer allowed when they're making a project proposal to say oh I want to build a tool to explore birdstrike data or whatever it is that they've found like out in the wild I forced them to say what is it that people are trying to find in the data and then are your visualization so supporting that and so that doesn't allow them to sort of build very open-ended tools that they throw it into the world and say this is a great solution they actually have to face the fact that like their tool might not work given the specific data finding needs of the analysts for them they're building it so that's a thing that you know I've decided to do in my class the students don't love it because it means more for them and I've had some resistance to this like some people don't like think that this outright band is a little bit much like both in the in the pedagogical infovis community and in my students but I vaunted for this I guess I'm curious if anyone has a negative or positive reaction to this photo quickly yeah quickly comments all right and then when the universe hahaha so I'm gonna get this fire at some fire channel and I read the article okay I agree completely I think this is the cost the class right and and students don't necessarily know what what exploration could could help with and yeah that happened in my past years or a large team project I'm gonna bill just to Anna's okay why do you feel this order to visualize this data I think okay so and for what so I think that's a problem they're like what do you want to discover it like what's a goal and they often this is not very clear so I'm actually yeah sorry there's no fire I mean I completely agree so we end up agreeing again I want to give everybody 15 seconds to close say goodbye and then I will close at the end please let's start with the organizers Adam MD threes is there anything you'd like to close with just a good handshake anybody else would like to give it a close or otherwise I will give it the general close I think I go so I would like to first thank the panelists for you know dedicating their valuable time and effort to doing a great job I think everybody has done it and the organizers of course who have dedicated the most time and then the audience who have been active and asking really good questions thank you so much and finally I want to thank the organizers and the technical team today Jonathan is joining us and making sure everything is running I can see on my left with the YouTube video looks great and he's almost reading in our minds thank you so much and enjoy the rest of the conference good bye you Mary o for organizing this monitoring and coordinating my pleasure thank you "
Crww1_eIhg4,22,,2020-03-22T15:19:08Z,Lecture video 17CS62 Module 3 Line Clipping1 SharonRoji,https://i.ytimg.com/vi/Crww1_eIhg4/hqdefault.jpg,Sairam CS Video,PT22M58S,false,215,7,1,0,0,hello everyone today we'll discuss Cohan pseudonym line clipping algorithm right you all know what is clipping clipping is a procedure that identifies the portion of an image is either interior or exterior of a specified region this specified region is known as clipping window straight dipping is a procedure that identifies whether the portion of an image is either inside or outside of a specified region this region is clipping window and this clipping window I can design in any size any shape and in any orientations does it not necessary I have to design a clipping window in one li rectangular shape can be of any size any shape and it can have any orientation okay and today we'll be discussing about this go home sooner none line clipping algorithm to find the visible part of a life that is if our line passes through the clipping window like this right the portion of that line that is inside to my clipping window will be made as visible in my output the portion of the line that is outside the clipping window will be made invisible in my right and this algorithm uses region quotes region quotes to find the visible part of my life to find the visible part of my line that is inside the clipping window the region codes will be for binary zeros now this algorithm explains how I can find the visible part of a line using this region codes right so I'll be having four bits 'but one with to the thing and beautiful now i have to find the region codes of these regions right inside my clipping window the region code is for binary zeros right now let's see what is the region core to the left of my clipping window right in the left side to find the left side region code I'd make bit one less one remaining bits will be zero so the region code will be zero zero one to find the right region code I should make bit two as one remaining will be zero so it will be 0 0 1 0 to find the bottom region code bit 3 will be 1 remaining will be 0 so it is 0 1 0 0 to find the top region code before will be 1 remaining will be 0 now to find these region codes I can take XOR operation of these two values way to find this region code I have to take extra operation of these 2 values right so to find this region code I have to take it sir operation of 0 0 1 and 1 0 0 0 so what will I get I'll get 1 0 0 1 so it should write here 1 0 0 1 right to find this region course either I can do 6 or operation or I can check like this right here you check bit 2 is 1 here before is 1 so I can make before s1 and bit two as one remaining will be 0 right hey then I can take X or operation of these two or I can find with oneness one and bit 3 is 1 so remaining should be 0 here it should be bit 3 and bit too right remaining should be the so you sue these region courts right this algorithm : sue that landline clipping algorithm finds the visible part of my like here I have three cases right suppose if my line is like this you all know to draw a line I need only two end points so first end point I take as P one second I'll take as Peto I have drawn a line and the end points of both and them both end points of the line lies inside the clipping region so the line is interior and the line should be made us visible in this case right next cases my clipping window both the end points of my line lies outside the clipping window right but this line passes through the edges of my clipping window so what I have to do I have to calculate these intersection points to find the visible part of my life so in this case I have to calculate the intersecting in the city points next case 3 I have a clipping window both the end points of my line life outside the clipping window in this case line is exterior to my clipping window and it should be made as you come into this algorithm I'll explain case one right you know in case one both the end points of my line lies inside my clipping window and you know inside the clipping window the region code is zero zero zero right that is a P 1 and P 2 has zero region quotes right - interior and it should be made us less it but right now next keys to keys to waste up and explained with this suppose if my line is like this right now first can point us in this region second and point us in this region right you can see both the end points right has a nonzero region codes right one limb self the clipping window I have zero region code right test everywhere and have non zero region code so if I have non zero region called the end points lies outside my clipping window right suppose if both the not endpoints have non zero region core what I have to do is like I have to take logical and operation and I have to check the result whether it is the non zero value or zero value right so here p1 and p2 has nonzero region coats in this case what I have to do I have to take logical and operation right so what is the value here 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 0 take logical and operation it is 0 0 1 0 and if the result is again non zero it shows Linus exterior and it should be made us in listen this is my case - right next is case three in case three again I have two subdivision the first subdivision is I have a clipping window right one in point life inside the clipping window other endpoint lives outside the clipping window that is one point will have a zero region goal you know only inside the clipping window I'll have zero region code right are the endpoint right since it is outside it will have a nonzero have nonzero region code oh this is one case they said something like this right you can check only inside the clipping window I have zero region code rest everywhere I have nonzero region code that is if one point has zero region code and another point has nonzero means one point lies one endpoint lies inside the clipping window other end point lies outside the clipping window this case three Yankees big cases right both the end points p-one and p-two has nonzero region codes right you know if both P 1 and P 2 has nonzero region codes I have to take logical line here also I have to take logical and take logical and operation and check the result if the result is 0 right it shows Linus interior interior and it should be made as - interior right and I should calculate intersect P intersecting points if P 1 and P 2 has the non-zero region call take logical and if the result is the 0 value right calculate intersecting point so in case 3 I have to calculate in the city points I have to calculate in the city points case 3 has two subdivisions either for this case right one endpoint has 0 region core another endpoint has nonzero region code for this also I have to calculate intersecting part for this B solution both the endpoints are non zero value I have to take logical and and if the result is 0 right I have to calculate intersecting points right now we will discuss how to calculate this intersecting points coming to the calculation part of this intersecting point I have to calculate the intersecting point now calculate calculate intersecting points I take this case suppose if my line is like this right this is my first endpoint p1 this is my second endpoint p2 right you know both the region codes are non zero right if both the regions are non zero what should I do I have to take logical and take logical and zero zero zero one one zero zero zero wait what about the result the result is zero so in this case I have to calculate the intersecting points so how many intersecting points I will be kidding I'll be getting in the sitting here one intersecting point and here another one in the city point no this is my case right so coming to the calculation part right I take this line in points line in points as line endpoints as x1 y1 and x2 y2 right and this intersecting point I take us X comma Y that is I am supposed to calculate this X comma Y right so I take this case if you consider this case right this is my clipping window right and if you take this vertical line this in this vertical line only this y value keeps on changing here what about this value X min Y maybe right so why men why well it keeps on changing and at this point Y value will reach the maximum right so here and here the x value remains the same so at this point right anywhere in this line x value remains the same I have to find out one Li the Y value right so I have to find only the Y value right now to find the Y values of vertical line y values of vertical lines I use my slope formula you know slope M is equal to y2 minus y1 by x2 minus x1 right I draw this line here right this endpoints I have taken as x1 y1 right and this is x2 comma y2 this intersecting point I have taken as X comma Y and you know throughout this line X reminds the same and y keeps on changing so here I have to calculate only wife right to calculate this Y value I'll use this slope formula M is equal to y2 minus y1 by x2 minus x1 right and substitute this lo formula for this part right x1 y1 here in the place of x2 y2 I have X minus X comma Y so what will I get this for young Y minus y1 by X minus x1 from this can I calculate Y so Y will be young window X minus x1 which is equal to Y minus y1 from this Y will be y1 plus M into X minus x1 right coming to this x-value height all throughout this line y X reminds the same God this line X reminds the same right so yes value can be yet smell X is equal to X min right or X is equal to Y X max so if it is left boundary ex-girl be X Men if it is right boundary X will be Y X max suppose if I have a line like this if it is intersecting with the right boundary for in the place of this X I should take the maximum value of yes here in my example my line is intersecting with the left boundary so X will be yes method X is equal to X min for left boundary and x is equal to x max for right boundary right similarly I have to calculate what X values of horizontal lines right so here next cases yes values of horizontal horizontal lights right I take this case see now again my line it is intersecting with a horizontal line for the turn the line of my clipping window right here how to draw this diagram I draw the diagram like this right goody this sir this so how to find this young y 2 minus y y PM formula is y2 minus y1 by x2 minus x1 right so here I will consider this is x1 y1 and this point intersecting point all the ways I consider this X comma Y right so Y minus y1 by Y X minus x1 from this right if you take this horizontal line right horizontal line y it reminds the same only X keeps on changing yes starting from X min it keeps on changing and it will reach x max so X reminds the same what I am supposed to come right x3 X I have to calculate Y reminds the same so here I have to calculate yes right so how to calculate Y X Y M into X minus x1 which is equal to Y minus y1 from this X minus x1 which is equal to Y minus y1 by ya right from this if I calculate X X is equal to x1 plus y minus y1 by yeah now coming to this Y value right Y value it can be Y is equal to Y min for bottom boundary of my clipping window or Y is equal to Y max for top boundary of my flipping window that is see here my line it is intersecting with the top boundary of my clipping window this is left boundary right boundary bottom boundary and top boundary my language intersecting with the top boundary my line is intersecting with the top boundary right so what Y value I should consider I should consider the maximum maximum Y value Y should be WiMAX in this place maximum Y value I should substitute so first if my line intersects like this right it is intersecting with the bottom boat so in this Y value what value I should substitute minimum value if it is intersecting with the bottom boundary right so these are the two formulas to calculate y x and y for my intersecting point wait until once again in this point my Y value in this point my Y value changes so I have to calculate Y are not next reminds the same throughout right coming to this case here Y it reminds the same throughout to all this line y remains the same throughout this line boy reminds the same so which value keeps on changing X keeps on changing X keeps on change so if it is intersecting with the bottom boundary next minute I should take right if it is intersecting with the top boundary right I should take my I should take maximum value value right now with this formula I'll be explaining it some in next video 
BVC4tWBo6X4,22,,2020-03-27T18:33:33Z,Lecture Video_17CS62_Module3_3DTransformation2_C.Sharon Roji,https://i.ytimg.com/vi/BVC4tWBo6X4/hqdefault.jpg,Sairam CS Video,PT14M13S,false,86,2,0,0,0,[Music] hi everyone as a continuation of previous video we'll see shearing weight we'll discuss a song in shearing concept right so I'll write the formula so shearing I can perform along its axis along Y or along said so we'll write the formula for sharing along x-axis so new value of y ex is equal to ex old when I perform sharing along its axis y nu will be very old plus since I am performing sharing along x axis it should be X fold and shear factor along Y axis right next said new will be said old plus sharing along x axis so it should be ex rolled into shear factor Allah said axis right similarly I can write the formula for sharing along Y axis so it should be X nu is equal to it's old plus my old Hindu shear factor along its similarly y nu is equal to Y older said nu is equal to said old plus y old indle shear factor Allah said axis I'll write the formula of shearing along said axis it should be said nu is equal to said old x nu is equal to X world plus said old Hindu shear factor along its axis similarly y nu is equal to Y world plus said old Hindu shear factor along Y axis right so this is the formula of 3d shearing shearing along x axis sharing a long way and sharing along set axis now we'll discuss a sum great given a 3d triangle with points 0 0 0 0 1 2 & 0 1 3 a place shear parameter 2 on x axis 2 on Y axis and 3 on said axis and find out the new coordinates of the object right so first I will perform shearing along its axis so before that I'll write shear X is equal to 2 given in the question shear y is equal to 2 given in the question and she has said is equal to 3 right now we know the formula that is y X nu is equal to X fold y nu is equal to Y old plus X fold into a factor along Y and said nu is equal to said world plus X old window shear factor Allah said right so first in point and write it is an assumed the first point 0 0 0 + 8 0 0 0 right so yet nu is equal to X fold which is 0 y nu is equal to Y old so Y value is plus it sold a 0 into shear factor is 2 so what I will get I get 0 said nu is equal to said old said old is 0 plus X older 0 in to shear factor along said axis it is 3 right so the new coordinates new coordinates will be 0 0 0 right next up they consider the next end point which is 1 1 2 pitch so B is equal to 1 1 2 so here Y X nu is equal to X fold so it will be 1 y nu is equal to Y old plus X old Hindu shear factor a long way which is 2 so if I calculate I get 3 so said nu is equal to said old 2 plus X oldest one into shear factor along said axis it is 3 3 plus 2 5 so the new coordinates will be this one three five right next endpoint will be 1 1 3 beta so it is C is equal to 1 1 3 so X nu is equal to its world which is 1 y nu is equal to 2 I hold 5 oldest one plus X oldest one in the shear factor along Y axis it is 2 so when I calculate I get 3 so said nu is equal to said world sell gold is 3 plus X oldest one into shape factor alongside axis it is 3 so I get us 6 so the new coordinates will be new coordinates is equal to 1 3 6 right so for the given triangle when I place shear along x axis and get these three new coordinates right next I have to calculate for sharing along Y axis right so sharing sharing along y-axis right I'll rate the formula y nu is equal to Y old right X nu is equal to X world plus while old Hindu since it is X nu shear factor along x axis similarly said nu is equal to said old plus since sharing along y-axis I should write boy old Hindu shear factor Allah said axis this is my formula now I have to play this formula for the three endpoints my first endpoint is EA is equal to 0 0 0 right so Y nu is equal to Y old my oldest 0 this is X Y and said right similarly Y X nu is equal to its nu is equal to X 1 plus y old into share factor along its axis it is 2 so I get 0 similarly said nu is equal to said old plus y old 0 into shear factor along said axis it is 3 I'll get us 0 so my new coordinates is new coordinates will be 0 0 0 the next endpoint is given in the question it is 1 comma one comma two wait so it is 1 comma 1 comma 2 wait what is my formula y nu is equal to Y hold up so y nu is equal to Y would who I hold us one next X nu is equal to X hold up wait 1 plus y boldest one endo shear factor along its axis it is two so when I calculate I will get us three next said nu is equal to said old 2 plus y oldest one winter shear factor alongside axis it is three so I will get 3 plus 2 5 right so coming to my new coordinates it will be its Y set so it will be 3 comma 1 comma 5 right next in point will be 1 comma 1 comma 3 right so again why nu is equal to Y world why world is one its nu is equal to its world is 1 plus y oldest one in to share factor along x axis it is 2 right so it is 3 similarly said new said new will be said world 3 plus y world one in Ducie factor along said axis it is 3 right so it is 6 coming to my new coordinates it is it's Y set so 3 comma 1 comma 6 next I have to calculate for sharing along shearing along said axis rate and rate the formula said nu is equal to said world x nu is equal to X world plus said world and shear factor along x axis similarly y nu will be Y old plus said world in do shear factor along Y axis right so for the first endpoint it is a is equal to 0 comma 0 comma 0 it will be said nu is equal to said old a0 its nu is equal to its holder 0 said holder 0 into shear factor along x axis it is to write y nu is equal to which is equal to 0 here y world is 0 plus said world is 0 in the shear factor along Y axis it is 2 so I'll get my new coordinates us new coordinates us 0 comma 0 comma 0 coming to the next endpoint it is 1 comma 1 comma 2 wait said nu is equal to said old which is 2x nu is equal to X Y old its oldest one plus said the oldest to induce shear factor along its axis it is 2 so 4 plus 1 5 right similarly y nu is equal to R a nu is equal to Y oldest one its oldest two plus shear factor along Y axis it is two so again it is fine so when I write the new coordinates it will be it's why I said so it is Phi come up I come up to similarly for the next endpoint it is 1 comma 1 comma 3 right said nu is equal to said world which is 3 and it's nu is equal to its oldest one plus said oldest 3 intership factor along x axis it is to write so it is 6 7 y nu is equal to Y old Y oldest one Plus save oldest tree in the shape factor along Y axis it is 2 6 7 so my new coordinates will be new coordinates will be X Y and set so these are the new coordinates after sharing along its white and said axis for the given triangle where the end point 0 comma 0 1 comma 1 comma 2 and 1 come on three thank you 
RIUGbim6Gy0,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-09T05:38:53Z,Line Clipping (CH-10),https://i.ytimg.com/vi/RIUGbim6Gy0/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT33M43S,false,47,1,0,0,0,come to the 'part Chawla lecture series and computer science for postgraduate students we are in the series of lectures on computer graphics and visualization have been learning it's going on very well and and let us look into the ninth session so we are in the ninth session of this lecture series on comforter graphics and visualization so in this lecture we will look into more details about the important concept in 2d that is line clipping and where we've got two interesting algorithms one is Co hence other landline clipping algorithm and Liang Barsky line clipping algorithm so this session is going to be a very interesting session pay more attention as this is an important topic as far as the 2d graphics is concerned so to start with as we discussed in the previous lecture we talked about point clipping and then we proceeded to line clipping it is similar to point clipping line clipping is just an extension of point clipping where a line that is inside completely there is a both end points of the line are inside completely the lines should be selected for display if both end points are outside and the line is completely outside the line should be discarded so we have to make some tests so initially the algorithms actually make some simple tests to say if a line is completely inside or a line is completely outside so can be discarded okay so the algorithms for them to be more efficient with few simple checks they should be able to say that the line is completely inside so selected the line is completely outside so discarded and a portion of the line is inside and a portion of the line is outside so intersections are required so an efficient algorithm should give us with few checks tell us the trivial reject and trivial accept cases so how a line clipping proceeds as you can see here there are various possible lines and you see here for p1 and p2 is a line that is completely outside both endpoints are completely outside for the case p7 and p8 by p1 and p2 p7 and p8 both have the endpoints completely outside but line p1 and p2 is even with the endpoints are outside the line is also set but a portion of line p7 p8 is inside so for p7 p8 we need to calculate intersection points at the most there will be two intersection points so there is a the one intersection point sometimes you would require to calculate for line p5 p6 for line p7 and p8 you will be calculating two intersection points so let us see the first algorithm the cohan's are the land line clipping algorithm which is the rudimentary level procedure and how cohan's are the land algorithm solves this problem of say selecting lines that are inside and discarding lines and that outside Cohen Sutherland procedure conducts some initial tests to actually decide whether we need to go for intersection calculations or not so it is an efficient algorithm in that sense so with first few checks it will be telling us whether the lines are completely inside are completely outside and if intersection checks are really required or not so go hence of the land were very clever in actually assigning a four bit binary code and which is called the region code four regions at the on the regions around the clip window that is an in and the wind also as well and the four regions around the clip window and also the region which is the clip region so cohan's of the land have assigned a four bit binary code which is called the region code that identifies the region around the central window that is actually our clip window if you look at this what we see is a region that is the central region is given by he is identified with a red bold line that identifies the central region and that is actually our clip region okay that is actually our clip region so whatever that lies inside this region will be selected whatever that lies outside will be discarded okay so what are these codes here there is there are zero zero zero zero one zero zero zero so there are the whole region in and around the central clip and origin is divided into nine zones and let me repeat the whole region the whole of the region around the in and around the central region that is the clip indoor region is divided into nine zones so say this zone with the region code one zero zero zero is the top is on top of the central window region the top zone this is the bottom zone zero one zero zero is the region code for the bottom zone zero zero one zero is the region code for the right zone zero zero zero one is the region code for the left zone so there are four zones are identified now four more zones are to be identified so this zone on the right corner is actually top right region with the region code one zero one zero this zone on the bottom left bottom right corner is given the region code zero 1 1 zero so how do we how did we give the region codes so how did Cohen so the Sutherland gave the region codes four bits are assigned this is a binary code as again as I said before this is a four bit binary code binary code means there are only zeros and ones and four bits only are there in the region code so what are the four bits each of the bits identifies one region so the rightmost bit okay there most weight here identifies the left region the next bit identifies the right region the next bit that is the third bit position identifies the bottom region the MSB bit that is the leftmost bit identifies the top region so left right bottom and top so you remember the sequence the left right so bit one left bit to right bit three bottom and bit for the top regions so that means for the central region the region code is zero zero zero zero indicating that it is the central region for the left region the left bit is set c0001 the one indicates the left region so L left right bottom and top this is left to the central region so this bit position is set so that is why it's region code is zero zero zero one here to the right region zero zero one zero indicates that the right bit position is one that is set indicating that the region code for this region is zero zero one zero so similarly the bottom region has got region code zero one zero zero and top region has got region code 1 zero zero zero and now the top right bottom right and bottom left and top right regions are actually the or operations of the neighboring two regions okay so whoring 0 0 0 1 and 1 0 0 0 gives you 1 0 0 1 which is 1 indicates the top region this one indicates the left region so top left region so this region code identifies uniquely a particular region around the central region which is the clip pinned or region so now why do we go for region codes and what is the fun in going for region codes that is what did Co hence other lando is they took each end point for a lie so take one endpoint for a line identify its region code so take this other endpoint for the line identify the region code so check if both the region codes for the two endpoints of a line are zero zero zero zero that indicates that the line is completely inside so our aim is no compute region codes for a given endpoint so for line endpoints of the lines so we will be making some stride conclusions or maybe we'll be taking some obvious decisions by computing region codes for the line endpoints so how do we compute region codes for the endpoints of a line so if you see this again this is the central region each bit position in the region code is used to indicate one of the four relative coordinate positions of the point with respect to the clip window bit one left B to right bit three bottom bit four top so now given an end point say of the form X comma Y so the line has got two end points take one end point X comma Y and take the x-coordinate what is that you do is if X is less than X W min make a check if X is less than X W min then set the left bit so also take one position of one endpoint of a line take the x-coordinate check if X is less than X W min the left bit set if it is true if it is false reset it that is keep it zero so set it only if this condition is satisfied so if X less than X W means set the left bit if X greater than X W max set the right bit similarly if y less than Y W min set the bottom bit if y greater than Y W max set the top bit so if if the condition is not satisfied by the x and y coordinates then accordingly reset that is keep that 0 or than to check if X is less than X W mean or if X is greater than X W max what do we do is because in computation in program you will not be actually checking the magnitudes of two values than to check the magnitudes of two values what we can do is we can check the sign of the difference operation that is check if X is X minus X W min is less than 0 that means X minus X W min is less than 0 that is if the difference of X my and X W min if the difference gives the sign bit is set for the difference operation then said that left bit if the sign bit of the difference operation X minus X W mean is set then said the left bit so that is how for a given end point we can compute the region codes see the bit 1 bit 1 is set bit 1 corresponds to the left bit and the sign of the difference operation X W X minus XW mean if it is set set the left bit otherwise reset the sign of the difference operation X W max minus X if it is set set the right bit so bit 2 corresponds to the right bit otherwise reset the sign bit of difference operation the sign a bit of difference operation Y minus y W mean is set set the third bit that is the bottom bit if the sign bit of the difference operation Y W max minus y is set set the top bit so or reset else reset so that's why that's how we check and identify a region code a four bit region code for a given end point of a line now that is how Cohen's Sutherland actually with for some trivial accepts and trivial rejects we'll be doing this now take for example a line here whose region codes are given as say that for both the endpoints the region codes are computed and the region codes are obtained like this 0 1 0 0 0 0 1 0 is the region code for the other endpoint of the line now you see if you perform what is called a bitwise what is called a bitwise and operation if it is if it is zero that there is what you get here is my bitwise and operation you get a bitwise and operation what do you get is all zeros isn't it similarly take a line that is a vertical line take a line that is vertical and is outside on to the right say it's region codes are 1 0 1 0 and 0 1 1 0 1 0 1 0 and 0 1 1 0 so what does that convey is of for this particular line one bit position is commonly set that bit position is the right bit position let me repeat that again imagine a line that is vertical and is to the right of the clip window region so it's region codes let us say R 1 0 1 0 for one end point and for the other end point the region codes are 0 1 1 0 now if you take both the region codes only one bit position one bit is commonly set for in both e for both the end points for the region code so the end points that is the second bit that is from the right second bit so that bit position is the right bit position and if you take bitwise and operation it results in a non zero value so it it results in a non zero value so what is that we can conclude is any line for which take the two end points of the line and if one bit position is commonly said and if you take what is called bitwise end operation for both the region codes and if you get a non zero value what we can say is the line is completely outside and can be discarded and the line is a parallel line to the boundary represented by that bit position that is commonly set for both end points maybe there's a big sentence let me repeat for lines that are outside and are parallel to either the boundaries for them one of the bit positions will be commonly set okay that is if the line is actually to the right of the clip window region and is vertical assuming its region code is 1 0 1 0 and 0 1 1 0 in both the region codes if you observe one bit position is commonly set and if you take bitwise and operation for the region codes it will result in a non zero value so what do we say is take bitwise and operations and if it results in a non zero value we should assume that I should assume that the line is completely outside and is parallel to that boundary represented by that bit position which is commonly set so here the line is a vertical line and is on to the right because the right bit position is commonly set and his outside hand can be discarded so with just by checking the region codes of the two end points we are able to conclude the line is inside or outside so similarly compute the region codes for both the end points if you get 0 0 0 0 for both the region codes or the end points we can confidently say that the line is completely inside and can be selected for display so such trivial checks ought to be trivial conclusions are to be taken and the region codes are very helpful in that case so if none of the checks are satisfied that is both the region codes are not zero zeroes and after taking the bitwise and operation you are getting say a zero value then we should be calculating the intersections for sure because then the line is assumed to be actually cutting through the window boundaries and a portion of the line is inside and should be and should be calculated for what portion of the line is inside so for that we need to do intersection calculations so for performing intersection calculations now we can take the slope point form of a line what is the slope point form of a line a point slope form of a line the intersection points with a clipping boundary can be calculated using the slope intercept form of a line we know that slope can be calculated by this equation y M is equal to y2 minus y1 by x2 minus x1 assuming x1 y1 and x2 y2 are the two endpoints are the two endpoints per line the y-coordinate of the intersection point at the vertical line see for a clip window for the two vertical lines so the clip window is made up of four infinitely extending lines the clip window is made up of four infinitely extending lines for the two vertical and say for example if a line is coming from outside and is intersecting a vertical line intersecting a vertical line so for this at the point of intersection you need to just compute only the y-coordinate you don't have to you don't need to compute basically the x-coordinate why why do we need to compute only the y-coordinate is because for the vertical line we know the x-coordinate of the vertical line that is X W min or X W max isn't it there are two vertical boundaries that make up the clip window assuming a line from outside is cutting through the vertical boundaries of the clip window at the point of intersection you need to compute only the y-coordinate you need to just calculate only the y coordinate because x-coordinate is either X W min or XW Max because that makes up the two vertical boundaries so the equations here show that the y-coordinate of the intersection point at a vertical boundary is given by the equation y is equal to y1 plus M into X minus x1 we know this equation from y minus y1 is equal to M into X minus x1 from the slope point form and for X because y1 is known and Yummie is known x1 is known then what is this X for X you substitute X W min or XW max depending on which of the boundaries the line is intersecting okay sometimes it might intersect both so once you substitute X W min and next time you can substitute X W max you will get two intersection points okay so the y-coordinate of the intersection point at a vertical boundary is given by this equation okay similarly when they line from outside cuts through the window and enters the window region cutting through horizontal boundaries what is that you can do is at the intersection you need to calculate this is a horizontal point there are two horizontal boundaries for example so a line from outside cuts through one of the horizontal boundaries and enters the inside at the intersection you need to calculate only the x coordinate because the y y values are known which is a the YW mean or by W max for the Y boundaries of the clip window so the y coordinate is known at the intersection point and the x coordinate only needs to be computed when a line intersects the two horizontal boundaries how do we compute the x-coordinate of the intersection point when a line intersects the horizontal boundaries is by this equation we rewrote that equation for x that's the only difference in the previous case you take in the case of Y we know we need to compute the X so take y1 onto the other side divide that with the M and x1 to be taken on the other side it becomes a plus so X equal to x1 plus y minus y1 by M where Y is the unknown parameter so if you want to compute intersection of the line with the top boundary substitute for y by W max if we want to compute intersection with the horizontal boundary substitute for y YW min so that is how we perform intersections in this example there is an example to explain there's a Cohen Sutherland algorithm and see this it is actually there are other on the right you can see that the window boundaries defined by for infinitely extending lines X equal to 1 X equal to 7 Y is equal to 2 and Y is equal to 6 are they for infinitely extending lines that make up the clip in Dorrie okay given a line with n points P 1 0 0 P 2 8 comma 5 so given two end points for the line P 1 0 0 it is extending from 0 0 to 8 comma 5 now what do we do is we first start with the left boundary find the intersection of the line with the left boundary then go to the right boundary then go to the bottom boundary then go to the top boundary find all intersections and then we discard all the portions that are outside and we can we'll be taking only the final portion of the line that is actually inside see these lines are infinitely extending lines again let me repeat the window is made up of four infinitely extending lines so any line that cuts through the window region obviously any bigger line obviously cuts through the left boundary bottom boundary top boundary and right boundary and so on so at the most there will be four such intersections that will be computing because one with the left one with the right one with the bottom one with the top for a longer line so take a longer line and at the most how many intersections you would be calculating is four but out of which only the two intersections are actually the intersections with the clip window region and the line that lies within that intersections only to be selected for display so you will get four intersections out of which you need to take only the two intersections that actually are the intersections with the clip window region so we start with the we start computing the region codes the region codes for the position 8 5 is say 0 0 1 0 the region code for the other zero zero position is say 0 1 0 1 now taking bitwise and you are actually getting 0 0 0 0 all zeros so you are not sure none of the region codes are that is 0 0 0 0 so we'll be going for intersect so you cannot have trivial except you cannot have trivial reject so we have to compute the intersections so compute em first Yummie is nothing but Y 2 minus y 1 by X 2 minus X 1 and now a 5 by 8 M is actually 5 by 8 take the left start with the left then go to the right then go to the bottom and then go to the top first find the intersection of the line with the left boundary so left boundary is actually vertical boundary left is represented by the vertical boundary X equal to 1 so four intersections with vertical boundaries we need to compute only the y coordinate of the point of intersection the x coordinate is actually 1 x equal to 1 the x coordinate is 1 the y coordinate of the point of intersection with the left boundary is given by the equation you can use the equation that we took before y is equal to y1 plus M into X minus x1 so Y P Y y - 2 YP you can take YP or whatever y1 plus 5 by 8 into 1 minus 0 it is 5 by 8 so p1 dashed is the first intersection with the left boundary whose coordinates are one comma Phi by 8 now with the right boundary compute intersection with the right boundary compute the intersection what is that we do is take the same equation because right boundary is a vertical boundary at the intersection point the y-coordinate of the point of intersection is actually to be computed the x-coordinate is known for the right boundary ok so the right boundary is represented by the equal on X equal to 7 so the x coordinate is known for the intersection point only the y-coordinate needs to be computed so use the equation for y y is equal to y1 plus M into X minus x1 for X substitute 7 earlier we substituted for x1 now you substitute for X 7 that's the only difference between the previous and the current equations so y1 is 5 by 8 already we have computed a y1 5 by 8 plus 5 by 8 into six you get 35 by 8 so the p2 dashed here gives us the intersection point 7 comma 35 by 8 okay now we got 1 comma Phi by 8 as 1 intersection point 7 comma 35 by 8 is the other intersection point now with the bottom boundary compute the intersection points no bottom is the y-coordinate of the intersection point bottom is a horizontal line the y-coordinate of the point of intersection is now known it is just enough that we compute the x-coordinate of the point of intersection so the x-coordinate of the point of intersection can be computed by X is equal to Y 1 plus y by minus y 1 by M plus so if you remember the equation so this is the equation X 1 plus y minus y 1 by M so X 1 plus y minus y 1 by M for the bottom boundary and so what is this X 1 here X 1 here is the already computed line already computed point position the 1 plus already computed position is 1 ok 1 plus y minus y 1 by M y is 2 for the bottom boundary 2 minus 5 by 8 so what is the 2 minus y by dy minus y 1 by M okay 2 minus 5 by 8 multiplied with 2 minus y y minus y 1 by M is given here which is which is computed again 2 16 by 5 so the for the intersection of the line with the bottom boundary the y-coordinate is 2 which is known which is y is equal to 2 the x-coordinate is computed using the equation X 1 plus y minus y 1 by M by substituting for y YW min so we got 16 by 5 and finally the top because the top it is inside so check with respect to the top boundary the point 7 comma 35 by 8 which is the intersection point and p28 comma five both are actually inside points so you don't have to compute any intersections further yeah with respect to the bottom boundary if you perform intersection as we got the p1 double dashed so we started with the left boundary intersection which is p1 dashed then we computed the intersection with the right boundary which is p2 dashed then we computed the intersection with the bottom boundary which is p1 double dashed where we got 16 by 5 comma 2 and finally when it comes to the top boundary the top boundary it is P 2 and P 2 dashed and all the the whole of the line is actually is within the top boundary that is if you imagine an infinitely extending top boundary the entire line is within the top boundary it didn't cross the top boundary so we don't have to actually compute the intersection of the line with the top boundary okay so for the top region p1 double dashed is inside p2 dashed is inside so terminate so when we compute P 2 dashed p2 p1 double dashed and p1 dashed and everything is actually inside the top boundary so we need not calculate the intersection of the line with the top boundary ok so finally how do we conclude this is when we when we compute intersections we get double dashed and triple die if we go for that the most there are four intersection points now as I said there will be maximum of four intersection points we need to bother only about the two intersection points that actually cut the clip window region which is inside these in the exact region so we are interested in only the line part between p1 double dashed and p2 dashed the line part between p1 double dashed is inside and p2 dashed is inside so that is the end of it so discard the portion remaining portion of the line that is outside p1 dashed and outside p2 dashed so that is P 2 2 P 2 dashed and P 1 dash 2 P 1 dashed P 1 double dash 2 P 1 dashed and P 1 dash 2 P 1 then can be discarded so consider only the line between p1 double dashed and p2 dashed so how did we go with is we took the endpoints of the line and we computed the region codes for both the endpoints and then we checked whether we can go for a trivial except are trivial reject none of the cases have worked so we had to compute intersections and calculations are to be taken up so we started with the left boundary computed the intersection of the line with the left boundary then we computed the intersection of the line with the right boundary computed the intersection of the line with the bottom boundary and we understood that the line is not crossing the top boundary so we don't have to compute the intersection with a top boundary and we got finally two positions with between which the line is actually inside the clip window region so that is how we perform intersections and we take all the four regions in order and perform intersections all the four boundaries in order and compute the intersection points so there's how we can solve we solve a problem using cohan's of the land line clipping procedure you can try other problems taking trivially except cases to will reject and taking other intersections you can try simple problems based on this an example problem his solved here you can try other problems in this module what we have learnt is we have learned how line clipping is done using Co hints of the land line clipping procedure which is a very rudimentary level procedure where region codes are being employed and for every end points we perform region codes and we compute region codes and go for trivial reject and trivial accept and finally compute intersections using simple slope point for me equations using the line equations so this is what we have learnt in this module hope has been this has been useful to you and it is self explanatory if you solve more problems on this you will be able to appreciate and take up more such similar problems ok so let us come this session with this and in the next class we will look into the 3d part with this because the clipping part is over a major part is over we will look into the 3d object representations which is an interesting topic to follow thank you 
yReIQWSnwys,27,"Subject: Computer Science
Paper: Computer Graphics and Visualization
Module: 3D Transformations
Content writer: Dr.Raghuveera",2016-03-03T04:45:50Z,3D Transformations,https://i.ytimg.com/vi/yReIQWSnwys/hqdefault.jpg,Vidya-mitra,PT25M54S,false,24905,166,16,0,11,[Music] welcome to the 'part Shallah lecture series and computer science this is the 14th module of the course computer graphics and visualization so we have had last 13 sessions in the past in the previous session we have learnt how 3d objects are represented and in this session we are going to look at 3d transformations as the topic okay let us proceed with the content of the today's module these are the people who have contributed to this course and let us look into what we are going to see today in this session our aim our objectives are to understand the 3d transformations which include translations rotation scaling shear and reflection the other transformations like transformation between coordinate systems also will be learnt in this session so let us look at each of these in detail so in this the first and the foremost thing that you should learn is the convention so what are the conventions in computer graphics as far as 3d graphics is concerned so imagine we are in a 3d world so like we need to understand some conventions or fundamental which are fundamental to understanding how or things happen in the 3d world let us take say a coordinate system in 3d world so as we know a coordinate system in 3d world is made up of three coordinate directions or three mutually perpendicular directions which are the XY and Z now we know that we have we can imagine the coordinate system at various positions at various in various orientations and so on so for this we need to know some conventions so let us imagine or let us consider our right hand okay so take our right hand open there is the three mutually perpendicular directions and how do we get AZ convention from the right hand is take the first three fingers of your right hand the thumb the index finger and the middle finger now let the middle finger point towards you the self okay let the index finger point upwards let the thumb point in the right hand direct that is right side because this is a right hand the thumb points the right side the index finger points upwards and the middle finger points the self so these three directions are considered as the positive x y&z directions respectively that is the thumb points the positive x direction the index finger points the positive y direction and the middle finger points the positive Z direction so the opposite of this that means it is important that you should understand that we are seeing into the world along the negative Z direction an important observation is that because the index the middle finger is pointing towards the self which is the positive z direction and we are looking into the world along the negative z direction so that is the convention that you should remember always we look into the 3d world in the negative Z direction so if you take your left hand for that sake you can formulate similar a coordinate system which is something like this okay so here for our understanding it is enough that we consider one convention which is say the right handed coordinate system so the difference here is that in 2d and 3d 2d we do not need to consider such conventions but in 3d we need to consider such important conventions so the transformations in 3d or which are fundamentally object transformations which are extensions of transformations in 2d let us start with the first and the foremost transformation in 3d which is translation as we know translation rotation and scaling are three fundamental transformations followed by that we have are the other transformations like reflection and shear so let us start with the very first transformation in 3d which is translation translation is simply change in position as we know from the 2d transformations and we have got an extra coordinate direction and axis extra axis here so we need to add for the matrices an extra a row and column so thereby we have we see all the matrices that we see for the transformations are all 4x4 matrices because of the homogeneous coordinate system inclusion of the homogeneous coordinate system we have 4x4 matrices for any transformation in 3d ok so if you start with translation translation is change in position of an object so take an object in 3d and move it to another position so it is translation so it is a simple extension of 2d translation with an addition of one more direction which is the Z direction so the equations are very much evident as you can see X dashed is given by x + TX X - is the new x position Y dashed is the new Y position and Z dash - the new Z coordinate or the third position and txt ytz are the translational distances along x direction along y direction and along the direction or how much you move along each of these directions are the T X T y TZ so that is where the matrix is also you can easily formulate as you can see there x - y - Z - 2 1 is equal to 1 0 0 TX 0 1 0 T y 0 0 1 TZ and the last row happens to be the 0 0 0 1 for the homogeneous coordinates so multiplied with the initial position X Y Z and 1 so that is a simple extension of a 2d translation but rotation in a 3d is much more complex than rotation in 2d if you look at 3d rotation it involves rotations are understood to be done about standard coordinate directions initially so for example say for rotation we would require an axis of rotation ok in 2d if you correlate that with 2d is fine try to always like link you are thinking with 2 whenever we are discussing something about 3d you can link that with 2d as well in 2d for rotation we require a single point of rotation or maybe a position for rotation which is called the pivot point but in 3d we would require an axis of rotation that means an object is considered to be rotating about an axis an axis here is any infinitely extended line for our initial level of understanding the axis that we would consider are the three coordinate directions at the three standard axis the x y&z respectively so a rotation about x axis so rotation about Y axis and rotation about z axis so if you see the names given in the technical names for rotation about x axis is pitch rotation about Y axis is y and rotation about z axis is a roll now which rotation is considered positive which rotation is considered negative as you can recollect the discussion on 2d rotation you have a rotation with respect to there is rotation with respect to any point in space and in the anti-clockwise direction is considered positive any rotation which is considered in the anti-clockwise direction about a pivot point in 2d is considered as positive but now how do we consider positive rotation in 3d okay so further again there are conventions the conventions again which are shown here the conventions are such that when you are standing and watching the object getting rotated in anti-clockwise direction about an axis and you are actually looking along the negative direction of that particular axis and that is the positive rotation again let me repeat this you imagine you're standing and you are along a particular axis imagine you are along a particular axis so you are on some axis say X Y or Z ok if now you imagine that you are standing on the axis and viewing the axis along the negative direction there is your view is along the negative direction of the dye axis that means if you are standing on x-axis you are actually looking at the negative x-axis the direction of look of view is the negative x-axis and consider an object being rotated about the axis in anti-clockwise order consider the rotation about the axis when you are viewing the negative direction of the axis and in the anti-clockwise direction so that is considered as positive rotation so similarly if you have to consider positive rotation about Y axis imagine you are standing on y-axis and you are looking at the negative Y direction and now the anti-clockwise rotation about the axis is considered positive so otherwise the clockwise rotation is obviously the negative rotation so these are the important conventions and the Z is just as similar to any other axis first we will understand how the z axis rotation is done so third axis rotation is imagine you have an axis passing through origin and is perpendicular to the coordinate system so that is what we know as imagine you have a plane like object plane like thing and your Z Direction is actually the direction that is perpendicular and is passing through the origin of the coordinate system now it is exactly similar to that is the rotation in 2d it is the 3d rotation about z axis is exactly similar to rotation in 2d with respect to origin now let me relate these two again let me repeat this z axis rotation in 3d is exactly similar to rotation in 2d about origin how it is now the z axis rotation is what is rotation about that axis now how do we do this that is what is positive rotation there it is nothing but when you are seeing along the negative z direction that means you can imagine again the three mutually perpendicular directions the X positive x positive Y and positive Z for the right-handed coordinate system and now you are viewing along the negative Z direction now imagine this rotation the reason anti clockwise rotation is considered positive so if you look at the equations are there this ad coordinate has not undergone any change X dashed is equal to X cos theta minus y sin theta same equation for 2d which we saw the same equation the same equation exactly and y dash is equal to X sine theta plus y cos theta and Z dashed is said now what has happened to Z coordinate when rotation about z axis is being performed now the question is what happened to the Z coordinate when the rotation is being performed about z axis and is positive is that is no change in the Z value but the X and the y values have changed so that is whenever we perform rotation about a particular axis say assume now x axis okay when you are rotating about x axis the Y and the Z will change what the X will remain constant when you are rotating about Y axis the X and z will be changing while the Y remains constant so these equations now there are three and the corresponding transformation matrix in 4x4 form is given there which is the homogeneous transformation matrix cos theta minus sine theta 0 0 sine theta cos theta 0 0 and 0 0 1 0 and 0 0 0 1 is the matrix ok so it is shown there I think in a diagram as you can see there in a diagram which shows what is positive so when you are viewing along the negative Z Direction the anti clockwise rotation about that axis is positive which is indicated with the matrix which is indicated the notation are rotation Z z-axis theta is the angle of rotation now to get to derive matrices our equations for rotations about other two directions like other two axis say x and y you do not have to really derive equations but rather with a thumb rule you can simply formulate the matrices or the rotation transformation matrices for rotations about the remaining two axis the X and the y how can we do that is the simple thumb rule as you can see there X 2y y 2 Z and Z 2 X so this thumb rule you remember x 2y y 2z z 2 x the means you take the first set of equations for rotation about z axis ok and in those equations you replace x with y y with z and z with x in the equation set of equations you will automatically obtain rotations about the other axis how that is is you can watch this here and x dashed is equal to x cos theta minus y sin theta y dashed is equal to x sine theta plus y cos theta and z dashed is equal to Z so these three equations or water rotation about z axis now how do we get the rotations about x axis and y axis is simply wherever there is X in this equation set of first set of equations take the replace them with y Y with Z and Z with X so now first equation becomes y dashed is equal to Y cos theta minus Z sine theta which is there in the second equation in the second the diagram Z dashed is equal to Y sine theta plus cos theta which is the replacing Y with Z Z with X X with Y that is the thumb rule and finally for Z dashed is equal to Z Z to be replaced with X so X dashed is equal to X so when X dashed is equal to X that means there is no change in the X values it is understood that the rotation is performed about x axis so for that you can easily formulate a matrix when you write X Y and that is X - 2 I dashed and dashed in that order now rotations about Y axis similarly can be formulated can be transformation matrix can be easily obtained by rewriting these equations for x axis rotation and using the thumb rule that is replace X with Y Y with Z Z with X and so that is how you get the third set of equations which is which are rotations about now the two matrices are given there easily like you can formulate and write the equations in the order X dash y dash and Z dash so that you can formulate the homogeneous transformation matrices observe the notation used R suffix X of theta okay is the x-axis rotation R suffix y of theta gives the y axis rotation and the diagrams are self-explanatory you can just have a look at them you will understand better so if we require to perform an a rotation in 3d what is that we assumed is we require an axis of rotation and an angle of rotation now the axis of rotation here if we imagine that to be any general line of direction in space we can imagine okay any line in space can be an axis for rotation so that need not be the coordinate directions x y&z it can be any imaginary direction in space so let us assume a scenario where we need to perform rotation about say an axis which is parallel to x axis as shown in the first diagram there okay that you are seeing a rotation about an axis which is parallel to x axis now what is the extra step required so what is that how the matrix transformation matrix would be again that would be a composite matrix of as we as you can remember from the discussions in 2d transformations we had composite transformations now similarly what is that we are going to do here is we are going to take the rotation axis that is imagine any direction here our axis of rotation is aligned parallel to x axis now what is the first step our aim is to actually bring this axis on to any of the unknown directions and apply the rotations with respect to those known directions and then put the axis back at their original position that is the usual procedure so let us translate the axis which is the rotation axis on to either of the known axis like XYZ for convenience we can simply translate that access to onto x-axis so that it coincides with x-axis now perform a rotation with respect to x axis and now translate the axis back to its original position so that is a composite transformation and you can see the equations P dashed is equal to I can come in the reverse order always a translation rotation about x axis and a translation inverse so that completes translation here so you can read the steps here so in general if you have to perform rotation about any general direction in space so now we have gone to a more complex scenario that is the rotation axis is no more a coordinate axes are is neither aligned parallel to the coordinate axis it is some randomly oriented line in space now how do we perform rotation of objects about that kind of axis so we need to perform so many steps as you can see from here what is that we're doing is imagine an axis of rotation is given they're shown in the red dotted line and that is an a randomly oriented axis now about which we need to know rotate objects so now what would be the rotation matrix for such a kind of complex in area now in this scenario imagine two points on this randomly oriented axis in space which are say P 1 P 2 so P 1 P 2 are two points identified on the line now perform a translation such that P 1 is brought on to the origin so that means we are basically translating the line such that the line now passes through origin that is the rotation axis that is randomly oriented initially now passes through origin what is the next step the next step is perform a rotation about x axis first again let me repeat this first you do a translation so that the line now passes through origin line passing through origin does mean that a point on the line that we have considered is to be translated so that the line automatically passes through the origin now that becomes no p1 - p2 - - the two points now perform a rotation of this randomly random axis about x-axis till the time that the line now a line now is in the plane XZ so that means you do a rotation of this line about x axis till the point it is a part of our it falls into the XZ plane ok so that is the important step here so by what angle you should rotate is again a lot of mathematical derivation that goes there so imagine for the time being you need to rotate that first about x axis so that the line now falls into the XZ plane now perform a rotation about Y axis now such that the line in the XZ plane is now rotated till the point that it aligns with the z direction always our aim is to align anything any randomly oriented line with the z direction okay now the second rotation is with respect to Y axis and you align that with the z direction by some angle by if you rotate by some angle so the next step is to perform rotation about that axis the standard rotation about z axis which is our z of theta the standard rotation matrix is x dashed is equal to x cos theta minus y sin theta y dash is equal to X sin theta plus y cos theta and is a dashed is equal to Z or the set of equations that you can consider the matrix for that you can assume now after this rotation is done simply go in the reverse order so first do a rotation about Y axis in the reverse by by the reverse angle that is the opposite angle for the angle that you rotate it next do a rotation about X ax and opposite angle and do a translation so the steps are complete so the matrix the final composite matrix for the rotation about any general arbitrarily oriented line are randomly oriented line in space is the matrix T inverse R X inverse R Y inverse R Z our way our X and T when you combine all these what you get is the composite matrix or the 3d scaling involves just an extension of 2d scaling an additional third coordinate or third scaling factor along the Z direction which is SZ and the rest is all the similar thing and reflection in 3d is exactly similar to the reflection in 2d but here what is happening is a reflection in 2d was being performed with respect to lines now in 3d reflection will be performed with respect to planes reflection in 2d was being performed with respect to lines and reflection in 3d will be performed with respect to planes so reflection with respect to X Z plane reflection with respect to XY plane the reflection with respect to Y Z plane and so on so now the matrix that you can see for reflection with respect to XY plane what is happening imagine an object here and this is the XY plane okay imagine an object here and this is the XY plane okay this is the XY plane and this is the negative side of the plane that is the negative Z direction now this object has to be reflected and so that it is here now okay this is the plane this is the object and this object is now here after reflection so what is happening to the object is its x-coordinate is not getting changed its y-coordinate is not getting changed it is Z coordinate is getting it is in the negative side now so that is why the matrix has got a minus 1 in the third row and the third column a position where it is it is called Z is equal to Z X Y is equal to 0 is nothing but this is Z is equal to 0 plane we call the XY plane as the Z is equal to 0 plane okay so the Z coordinates alone become negative so shear in 3d is an extension of shear in 2d where we have got the coefficients a and B as extra coefficients and that this is the extension of 2d where B is the additional coefficient and it is shear with respect to the Z is equal to 0 plane our here we consider not access but the now planes here for shear so with this we come to the end of this module here the summary is that that is what we have learned here is that what are the conventions for a coordinate system in 3d the right-handed quad convention a right-handed coordinate system you can imagine rotations in 3d are the complex things then and the other rest of the transformations are exactly extensions of that in 2d so this is what we have learned here and reflection and share our other transformations which are simple extensions of a 2d transformations instead we consider there is called planes then access for reflection and shear the source for this book is the Hannon baker computer graphics with OpenGL is the source for the book for the module ok thank you for being in the session 
j0kFWwhUPKM,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-09T05:08:24Z,Module Introduction (CH-10),https://i.ytimg.com/vi/j0kFWwhUPKM/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT44M1S,false,49,1,0,0,0,"welcome to the 'part saleh lecture series and computer science for postgraduate students in this session we are going to learn computer graphics and visualization so the basics of this subject will be introduced to you in this session so we are going to start with the basics in the module 1 and and some more basics as part of module 2 and this session gives you the brief introduction to this subject and and further we will discuss more details in this subject so to start with we have the basic terminology we have to understand this as part of the course then we need to look into the graphic types we have to also learn about the coordinate systems and other basics in this so the keywords that are meant for this our resolution refresh rate color depth scan conversion graphic standards and many more so in fact this subject gives you a brief introduction to this graphics and the visualization we are going to start with the basic terminology then the important definitions and we will look into what a display processor is and what is its functionality so what is a raster and vector graphic or what are the graphics types and coordinate systems that are very much important to graphics and the graphics standards here in this we have the basic terminology and as you can see terminology is listed here there which is which are pixel dimensions resolution aspect ratio refresh rate scanning modes you have dot pitch color depth viewing angle scan conversion and the other terminology includes graphic systems graphics types and graphics software standards and coordinate systems so we are going to understand what a graphic is or why the subject is so important as far as far as part of computer science is concerned so without anything that we see on the monitor more anything that we see on the monitor on a display device is actually a graph isn't it so we cannot live without it and every day starts with seeing something on a display device either it is a mobile phone or it is any laptop or an iPad or whatever we see actually a graphic so anything that we see on a display device is a picture or a graphic as the definition goes so this subject of computer graphics and visualization actually is all about learning the storage representation display and manipulation of pictorial information so we call it pictorial information because it is about pictures so storage is one important thing representation is one another important thing and a display so how do we render pictorial information on screen is another important thing and finally how do you manipulate a process pictorial information also takes importance so the definition of graphic is actually anything that we see on a display device even a dot even just a dot on the monitor or a screen on the screen is actually a graphic okay so with the basic terminology as I introduced to you earlier so we have so many definitions without which we cannot go further so the definitions include say the first definition which we have to understand is pixel dimensions a pixel is a picture element we call it picture element in short form it is called as pixel so if you see your monitor is actually a collection of pixels your monitor is a rectangular array of pixels your monitor has got say for example generally your monitors are set to pixels like say 640 480 resolution set to 320 240 resolution set to 1024 768 resolution and so on and so forth so you might have seen on your display devices that these are some of the standard display settings I think you would change it on your monitor you would you would Rick you would often require to change these things on your monitor depending on the requirements of the application so here the number of pixels along the width and the number of pixels along the height make the pixel dimensions so it is important that you understand that this number here on the left 640 480 say our 320 240 the 320 indicates the number of pixels along the width and 240 indicates the number of pixels along the height so always this is important that for a rectangular display like generally the left number on the left side will be more and the number on the right side will be less so indicating that it is a rectangular display so we have some display standards as you are aware of VGA is one of the standards long back it is video graphics array so there it is basically a standard that talks about the number of pixels to be there on the horizontal side and the number of pixels on the vertical side so it is 640 into 480 so SVGA is super video graphics array so it is another standard so it is 800 by 600 so xga extended graphics array 1024 by 768 and HDTV nowadays we say we have HDTV at home so HD supporting video at a tower on our laptop on our display device on our say all our display devices like television and everything comes now with HD support so we call that standard as HDTV and it is 1920 by 1080 so there are so many pixels in a HDTV on HD standard so another standard for HD itself there are two standards one is 1920 1080 the other standard is 1280 by 720 and we call it progressive so we will learn more about what is actually progressive and other details later so here as we have learnt pixel dimensions now it is the number of pixels along the width and number of pixels along the height now you should try to understand the difference between resolution and pixel dimensions both are not the same as we take it the same most often but they are not the same resolution is the number of pixels per inch actually the number of pixels per inch are dots per inch is resolution so when we say resolution actually we mean to say that how many pixels are there in an inch space as you can see here a high-resolution display has got many pixels packed within an in space so so many pixels with an in space while a low resolution display device has got few pixels packed within and in space so that means we can pack more information in a high resolution display but we cannot pack more information within the same in space in a low resolution display so that's where the difference is and the standard resolutions some resolutions are given here like 76 pixels per inch and 80 pixels per inch and so on and generally your printers also have got resolutions like say DPA which is measured in dpi which is dots per inch your printer resolutions are far far larger far for higher values than the monitor resolutions for example your printer resolutions are two thousand dots per inch and even higher resolutions are available for printers whereas for display devices your resolutions are generally like 10 20 like 76 PPI 80 PPI and so on so that is 80 pixels per inch so that means now you should be able to compare resolution and pixel dimensions which are so important generally we say that resolution is 76 pixels per inch and say pixel dimensions are 1024 by 768 that means that you have so many pixels packed in an in-space like resolution 76 pixels in an inch space and you have 1024 by 768 that means the quality of a picture is not determined by the number of pixels but actually determined by the resolution an important quality feature of a fix of an image is actually resolution okay so of a display device the quality feature is actually resolution so the more information the wire the resolution the more the information you will be able to see on the display device so in fact you can ask for a high-resolution monitor or a display device when you go and buy and then to ask for a high pixelxdimension monitor so let us understand the next definition which is aspect ratio aspect ratio is the ratio of width to height and generally you might have noticed that the aspect ratios are standard aspect ratios are 4 is to 3 16 is to 9 and these settings you have it on your television set on your display device you can change these settings so aspect ratio gives us the ratio of width to height of a display device then the next important definition that we have to understand a depth is the refresh rate how are the frame rate so refresh rate is the number of frames our screens scanned in a second so every display device has got this parameter which is called the frame rate or the refresh rate so whenever your device or your display device has to throw something on screen it actually displays the image our scans the screen image on the screen 60 times a second so it displays the same image 60 times a second it redraws the image 70 times a second 75 times a second and so on and so forth your monitors have got these settings you can change these settings like your monitor can be changed to 60 heads monitor our 65 heads 70 heads 75 heads because the refresh rate is measured in heads so as you see here the diagram here shows that when you the monitor is scanned like this this is a horizontal line this is called a scan line so the monitor starts scanning the picture from the top left corner and then it proceeds towards it proceeds towards the right and this is a horizontal scan line and as we it retraces there is a dotted line that you could see there the is a retrace there is this called a horizontal retrace and then again the next line is scanned again there is a horizontal retrace during the retrace process it doesn't draw anything so it just waits for the next scanline to be redrawn so it keeps doing this and when it comes to the last scanline here it does what is called a vertical retrace this vertical retrace again is the electron gun or what is called the pixels that are actually not drawn nothing happens on the screen when there is a vertical retrace simply it is rearranging the position of the electron guns inside so that the screen is again redrawn from the top-left corner and this is how there is a horizontal scanning and at the end of the frame it is vertical scanning again the position of the cursor starts from here so that is the screen is redrawn again from the top-left corner so that's how we that's how asking a screen gets redrawn this is called refresh it so this the screen gets redrawn 70 times or 60 times or 70 times or 75 times in a second is a standard refresh rate for your monitor you can do this even change the setting because even at 60 heads if you have an olden day see a tea monitor for example if you're using a CRT monitor of the olden days now they're being replaced by all the flat devices our flat panel flat screen devices so if you have a CRT like device you can better adjust your refresh rates to 75 heads 70 to 75 heads because even at 60 heads our eyes are able to detect the flicker of the screen so we tend to feel a lot of strain on the eyes even at 60 heads so please you can change the setting to 70 or 75 heads if you have an olden day CRT monitor like device display device okay so next important thing as far as these are these are important to understand here that is refresh rate is actually the number of screens our frame scanned in one second measured in heads and here these scanning mods if you look at there are two ways in which a screen can be redrawn a screen can be actually the image on the screen can be reproduced so which is interlaced scanning and interlaced scanning is one where we have a screen the same screen is actually is actually drawn in two passes that is as you would notice here it's a technique used to increase refresh rate that is we do this so as to increase the refresh rates because as we know that our human eyes are so sensitive even to small changes and flicker on the screen so we want higher refresh rates so our aim is to increase the refresh rate so we go for this mode which is called interlaced scanning so in interlaced scanning in the first pass all the order lines are scanned and in the second pass all the even lines are scanned so in two passes the whole of the screen gets redrawn so that means it is actually an interlaced monitor so how do we know that is if you happen to buy a HD display device for example a HDTV for your home you may be the when you go and buy the specification says like this say for example 1920 by 1080 is one standard as we know the 1920 indicates the number of pixels along the width and 1080 indicates number of pixels along the height and there is one important character down by the side of 1080 which is I the I indicates interlaced that means if you go and ask for HDTV they might show you like say we have 1920 1080 I display device so that means this I indicate s' interlaced and that means the display device uses interlacing technique to actually refresh the screen as many times as per the refresh frequency so here the other kind of scanning mode for a display device is progressive scanning so in progressive scanning the image is actually not scanned as unlike your standard interlaced scanning here the picture the course details of the picture are displayed first and final details are only displayed later here course details here means the important details that make up the image are displayed first and the final details appear later so with passage of time that is slowly the image before you gets clearer and clearer that's what is called a progressive scan so here if you see in the example here the HD 1920 1080 P indicates that generally it is colored red to indicate that the standards when you go and buy a C in a shop like say 1080p they say 1080p is our display device 1080i is the television we have so 1080p indicates that P stands for progressive and the scanning mode that it uses the television uses is progressive scan so how these two are different now which of these scanning modes is better so if you look at this the progressive scan and the interlaced scan if you could closely if you identify if you look at these things at close these two images are close you would see that the progressive scanned image is much more better and superior in quality to the interlaced scanned image or picture so that means if you go to a television shop you better look for a display device or a monitor or a television that offers you progressive scan okay but these are obviously a little costlier than the interlaced scan models so the progressive scan is much more superior in quality so the next terminology is that we are going to learn is dot pitch the next definition dot pitch is the distance between centers of two successive dots or pixels and measured in mm so millimeters so if you see here the dot pitch is the distance between the Centers here so a color pixel is indicated or his position in the shade of a triangle and here you have the red dot the green dot and the blue dot so these three are positioned like a triangle in the shape of a triangle and the centers between two successive dots is called the dot pitch so the smaller the dot pitch the better the resolution the less of the dot pitch the better the resolution so the higher the dot pitch the poor of the resolution so that's a straightforward relationship between the two next definition is about color depth color depth is the number of pixels that we the number of colors that a display device can reproduce I think some of the olden day display devices could produce only say 256 colors later with improvement in technology they were able to produce like say 10,000 colors and 16 million colors and later and later even beyond that now if we say the number of colors that can be produced by a display device is called the color depth and the number of bits that we assign per every pixel so it depends on how many number of bits we assign per pixel so we can assign 24 bits we can assign 32 bits so it depends on how many vibrant colors how many variety of colors that we want for our display device so 24 bits per pixel indicate that it's 2 power 24 colors are possible on the display device and if you see 4 is 24 bits per pixel it is red eight bits blue eight bits and green eight bits so all the three are given eight bits each so that total put together it is 24 bits per pixel so for 32 bits per pixel you can still distribute the number of bits among the three colored dots here so that makes the color depth and now we are able to see so many colors on the display device because of the higher color depths so the next definition is about viewing angle so viewing angle is now some of the LCDs a flat panel display devices the LEDs and so on all the flat devices if you see they have a specification called as viewing angle that is if you see only straight perpendicular 90 degrees orthogonal if you see the device only from 90 degrees a perpendicular direction so you'll be able to see that at the best possible viewing experience you will have so but if you try to see it from an inclined angle so you will have a different color sitting and all the things appear differently than what when you notice when you observe when you are exactly the sitting straight so when you deviate yourself from the display device automatically the colors the everything appears differently so that's where the viewing experience is lost so for acceptable viewing there is a limit to the viewing angle so that viewing angle is an important criteria so that's that comes with a spec of a display device another important point is the display processor actually this is the hard Hardware element of your machine so graphics card we call it our we call it the display processor you can call it you might have heard of these names like Nvidia graphics processor the these devices actually are made to enhance your graphics capabilities for the display device and if you see that here the display device that is the graphics processor actually what it does is it takes all the pictorial picture information from the program or in the form of a program say for example a picture is to be displayed and the pictures information is actually stored as part of a program our is in the form of a representation this representation is given as input to the display processor what the display processor does is it converts the pictorial information that is given there into equivalent pixel intensity values so this process of converting the information of a picture which is not in the form of pixels into some pixels or a rectangular array of pixels is called scan conversion and that is what this display processor does so if you see the architecture of this processor of display processor it is there is a system bus there is a display processor and it has got the display processor has got its memory its dedicated memory display processor memory and there is a frame buffer the frame buffer here stores the information that is to be actually thrown other pixels intensity of pixel intensity values are actually stored here in the frame buffer while some other images to be shown the display processor already calculates the amount of the intensity values required and that is again stored in the frame buffer which is then fed to the video controller and then again finally it is fed to the monitor so the display processor does an important job called scan conversion so as you see this in the definition here it is the process of converting or digitizing a picture definition given in an application program into a set of pixel intensity values so that's where your scan conversion process takes place and that is your that is done by the display processor let us understand the types of graphics systems based on how a picture is displayed so if you look into this there are two ways in which a graphic system can be a picture can be displayed on a device on a display device one is the raster type and the other one is random type in raster type a frame is scanned completely starting from the left top left corner and ending at the bottom right corner so in raster graphic system what happens actually is the screen is drawn starting from the top left corner and the picture gets redrawn till the bottom right corner without bothering about whether there is some picture to be drawn in between or not it just starts scanning right from the start top-left corner till the bottom right corner whereas in the case of random type only the part of the frame that contains the picture definition is scanned so you can now understand the difference here in raster scanning a picture is drawn straight from the top-left corner of the monitor to the bottom right corner even without bothering about whether there is the full screen has some picture or maybe a part of the screen has got some picture so it keeps scanning while the random type of scanning is it just scans where the exact picture is to be plotted or is to be drawn next important thing which is to be understood is the graphic types so based on how a picture is represented so we we most of us have experienced so we don't generally find a difference between the graphic types we just take it for granted actually a picture can be either a raster graphic or a vector graphic so if you see something on your screen a picture or an image on your screen it is made up of either a raster graphic or maybe a vector graphic so a raster graphic how it is different let us try to understand the difference here if you see the difference between the two here a raster is basically a rectangular array of pixels so which is a matrix of pixels that is how they are a raster is represented and it is resolution dependent so let us look into the raster attributes of the raster graphic so it is resolution dependent to understand what is this resolution dependency we have to look at an image that is displayed okay say for example if you stretch an image what actually happens if you stretch an image if you shrink an image what happens is if it is a raster graphic if you stretch an image the quality is lost the image gets pixelated or maybe the image looks blurred are and many more so the pixels actually get expanded and now it leads to loss of information so what we mean to say by that is raster graphic is resolution dependent that means if an image is created for say 640 480 pixels that make up an image and if you see it in a 640 480 resolution this device so then what happens is the image exactly appears as it was done but if you stretch the image beyond that it gets distorted are we call it pixelation so so that is why it is resolution dependent so then the next attribute is the next property is file size so file size is huge for raster graphic because it is a resolution dependent if you create high quality images obviously the file size is larger and they are easy to edit and manipulate as you know there are many software's so much of software is there to so many software tools are available proprietary software open source software are available to edit a raster graphic for example to name one proprietary software you have the most popular the Adobe Photoshop one of the one of the popular image editing tools which is meant for raster graphic editing and to name one vector graphic editing we will come to that later but so too it is easy to edit and the open source equivalent of Photoshop you can take one of the open source software as the jimp the jimp is an open source image editing software meant for editing raster graphic and here we have the example raster graphic types which are the BMP and jpg some of the formats and one of the popular standards of of raster graphic is OpenGL OpenGL is one of the open graphics library it is one of the popular standards for raster graphics there are many other standards which are not mentioned here and let us come to the vector graphic type and how it is different from raster graphic any picture is represented as a set of mathematical equations so a picture definition is stored inside as a set of mathematical equations so how a picture is stored is for example a picture is basically made up of many points so you can also imagine a picture to be made up of many mathematical equations like squares like circles like rectangle like many other standard shapes so a combination of all these for each of these we have mathematical equations so when you combine them to form shapes so we have various pictures so you can you can you can break up a picture as a combination of various mathematical objects so any picture is represented as a set of mathematical equations so one of the important difference that you would notice between raster graphic and vector graphic is it is resolution independent that means even if you scale it up as much as you want even if you enlarge the image even if you stretch the image image as much as you can but still that's quality of the image the display quality doesn't get disturbed and doesn't get deteriorated but it but the quality is again and again it's much more better and superior with with change in size there is no change in quality so that's where it is resolution independent so and another important difference that you can notice is it is the file size is much more smaller but due to this difference due to this very feature of vector graphic raster graphic is actually much more popular because of this very reason a vector graphics are difficult to edit and manipulate so for example you can take a vector graphic editor software like coral draw and you can also you might have heard about flash flash is one of the most popular vector graphic software tools so you have one of the important standards that define that are that gives the vector graphic that supports vector graphic is the SVG stands for scalable vector graphics this is where we have to understand how a picture is made up of and how the raster and vector graphic are different so let us look at these graphics software standards a software standard is actually a set of algorithms defined for drawing graphics so whenever we say a standard actually it does mean that how a picture is to be redrawn a picture definition is to be represented how a picture is to be drawn or what are the various of what is called standards so a set of software standards is basically a set of algorithms a set of some pseudo code is always available and what you can do is as if as take a standard and you can integrate that with one of the programming languages are popular languages so there are many standards available for example G KS is graphics kernel system so you have figs programmers hierarchical in fact if graphics standard you have CGI computer graphics interactive you have VRML virtual reality markup language you have opengl open graphics library you have SVG - scalable vector graphics you have DirectX by Microsoft so these are many of the graphic standards so what do you mean to say by graphics standard is they contain representations of images how and images to be drawn how a line is to be drawn how a circle is to be drawn how the basic shapes are to be drawn how to create the attributes how to actually combine them to form various pictorial elements so is all defined in the standard and our job is to actually use a programming language to actually implement the algorithms in the standard so the algorithms have been implemented and you can now find a lot of libraries which you can use straight away in your programming language and you can call these functions and within the programming language and now you can run and execute so the beauty of these standards is that they are they have a language binding so what is a language binding language binding is that suppose if you are good at Java I suppose if you're good at C as supposed to be good at C++ what is that you can do is you can download the required libraries corresponding to the standard and you can actually integrate that with your programming language of your interest for example take OpenGL OpenGL has got language binding with C OpenGL has got language binding with C++ OpenGL has got language binding with Java and so on so if you're good at or C what is that you can do is download the OpenGL libraries the dll's the header files for OpenGL with C plus with C and then integrate that that is in the environment you integrate them you add it in the header you add these libraries in the header and then while you write your C program you can embed the opengl statements in between so that is called the language binding and every standard here most of the standards here have got a language binding with the standard so graphics programming you can use opengl one of the graphics programming environments you can use DirectX these are meant for 3d the OpenGL DirectX are meant for 3d so CG graphics for see the VRML popular markup language for the for graphics on the web for 3d graphics particularly a virtual reality markup language the for an functional reactive animation processing processing is one of the recently emerging languages and allies Java so Java is well-known open source platform for 2d as well as for 3d so Java 2d and Java 3d there are many methods and libraries available as part of the Java 2d and 3d packages so you can call these libraries while within the Java program so at the last we can come to the coordinate systems which forms the most important part of graphics study so that is every standard or every program that you write in graphics actually deals with a lot of coordinate system transformations so if you take for example 3d graphics it starts first with modeling the objects so what is that first you do in a in 3d graphics a for example if you have tools like 3d studio max if you take tools like Maya what is that first you do is first you open the interface of 3d studio max or Maya then you have various views of the 3d objects that is you drag and drop some standard objects that are available on the interface you will be throwing them on the screen and then you will be actually repositioning them wherever you want and then later you would give them kind of shades you would give them a lot of textures you would give them a lot of what is called some reflection and other properties you would later find a suitable viewing position and then capture that as part of your 3d now animation are a 3d image or whatever you wish so the final step is what is rendering so in a typical graphics program what actually happens is as a lot of conversion of coordinates from one coordinate system to the other so we need to understand what a coordinate system is first first we need to get a have a feel for what a coordinate system is as we know as we have learnt that a coordinate system is nothing but two perpendicular straight lines and we call it Cartesian coordinate system and basically to have a better understanding a coordinate system is actually a reference position in space what is the reference position a reference position is something but a position that you have chosen in the space and with respect to which you measure the world are with respect to which you locate a position other position in the world so it is basically a reference point R to be more precise it is basically a reference frame in space so a coordinate system fundamentally is a reference position in a reference frame that is in space so if you see here we start with the modeling coordinates so that is imagine an object is first and dragged and dropped on screen imagine there's a 3d object what is the first step that we do is drag and drop an inbuilt object place it on the screen and the next step is to extend it or maybe you can stretch it or you can maybe scale it or you can orient it rotate it or whatever you do okay when you are doing all that what you are actually doing is you are doing all that with reference to one of the coordinate systems which is called the local coordinate system are also called the modeling coordinate system okay what is a local coordinate system or a modeling coordinate system it is actually the coordinate system that has got its origin which is at the center of the object and with respect to which we are actually we are actually deriving three mutually perpendicular directions with respect to the center and that forms the coordinate system for that object and when we stretch or increase its size R may be reoriented everything is done with respect to that coordinate system and we call it as actually the modeling coordinate system are the local coordinate system that means if you have a different object like say here cylinder is one of the objects it has got its own local coordinate system and square r cube is another 3d object which has got its own local coordinate system and also when we say it is local coordinate system every object has got its own separate coordinate system and when we place all these objects in the three-dimensional world that is imagine a reference position imagine a reference position as shown here which we call it as world coordinate system and we will and when we place all such objects in this coordinate system we call it actually the world coordinate system now all these objects assume world coordinates initially they were all the objects were assuming local coordinates which also called modeling coordinates and when we have put them in with respect to another reference position which we call it world coordinate system now all these objects assume world coordinates and the next step is to convert the world coordinates to viewing coordinates what is actually viewing coordinates is again imagine that you are going on a nice picnic you have gone to a are to a nice place or a hill station you are on a hilltop from where you wanted to actually take a snap of the world so what is that you do first is you position yourself isn't it you use you stand at a nice vantage point and you position your camera that is you orient your camera you turn it you bend you rotate it you orient it so to have a perfect picture of the natural scenery there so that is where the viewing coordinates into picture that means when we have placed all the objects in the world the next step is to imagine a viewing coordinate system which is actually a position in space and then a reference position in reference frame from there you are actually capturing the world so that is your viewing coordinate system and once you choose the viewing coordinate system the next step is to convert the world coordinates to viewing coordinates and followed by that is later convert the viewing coordinates to projection coordinates as you can see here it is viewing coordinates and then later it is projection coordinates and finally we convert them into normalized coordinates and which are finally given to the device for display so these are the series of steps that takes place in creating a write from creating and modeling an object till it is actually shown are displayed on a display device these many conversions take place for each of the conversion a lot of matrices are used for conversion from one coordinate system to the other so from modeling coordinates to world coordinates world coordinates to view coordinates viewing coordinates to projection coordinates projection coordinates to normalized coordinates and finally to the device coordinates at the end that you see here finally the device coordinates are assumed by the objects so basically when it is finally shown up on the display device we actually see the device coordinates so that's where the graphics pipeline goes that's how the graphics pipeline goes we call this pipeline because so many series of operations take place right from modeling till it is displayed on the final device so with this we come to the the summary of this what we have learned let us take a recap of what we have learned today in this session so we have talked about some of the basic terminology very important as part of as far as graphics is concerned so we have learnt about definitions like pixel resolution pixel dimensions resolution we have learnt about say coordinate systems we have learnt about the graphics types and raster and vector graphic types the coordinate systems at the end so this understanding of these definitions is very important I want you to actually have a relook into all these definitions because we require this as the background for the next discussions for our further discussions in this course thank you "
vSoa6WccJWM,27,"This is the 5th  Online CSE class conducted on June 8th, 2020 on Computer Graphics and Visualization which is Module 3 from the CSE 6th Semester. The content is part of the VTU Computer Science Syllabus. The  CSE class was conducted by our Professor Priyadarshini. The Class captured the detailed explanation of each co-ordinate reference systems involved in 2D Viewing Pipeline topic.


Module 3|CSE 6th sem | Computer Graphics | VTU Syllabus | CITech",2020-06-08T15:06:02Z,"2D Viewing Pipeline, CSE Online Classes by Cambridge Institute of Technology",https://i.ytimg.com/vi/vSoa6WccJWM/hqdefault.jpg,Dept of CSE- Cambridge Inst of Tech,PT5M46S,false,30,0,0,0,0,[Music] you what is window win the world when we go here we'll come back here so as we have seen her we have many our windows inside where our object will be screening in all the windows and then finally it will be displayed on the device coordinates so model coordinate as have told you it will draw individually so this is a pen this is an arrays so I had a separate coordinate system for each and every object here okay it is drawn separately so like this in the model coordinate system if I want a laptop it's like this so individually the object is drawn and all this object is pushed to the world coordinate system in the world coordinate system I will have a single coordinate system where I will decide where my object need to be placed here so I have this and rubber somewhere top and pencil or a pen somewhere here so from the model coordinate system to the world coordinate system this is how the object is transformed now from the world coordinate system I need to bring back to the viewing coordinate system as I have already told you world coordinate system is an infinite when you just have a simple example if I see your eyes actually if you just turn you can see everything this it's a very very wide angle and you can't keep an angle it's actually not a finite angle right how to find it what I can say distance I can say this almost an infinite distance I can view if I go on top of a hill and then find it or whatever it is yeah I agree for some point me beyond that we can't see but let me see let me take it as a satellite where I can see everything so world coordinate system is nothing but where I can see everything in that when I want to take a camera and then click some part of the portion I don't want to click everything I can't take everything so the view coordinate system I will decide warden is me to be viewed so from these three objects I will tell only the eraser and laptop to be viewed here so what is viewed now only that vo is projected in the vo coordinate system so that is my laptop and of aneurism that is sent to way of your coordinate system so this is my view coordinate system view coordinate system will have some range both my x and y i will have some range there it's based on an implementation or defined range now when it comes to the normalize now this the same thing I have I need to crunch it tilde device coordinate system when I want to project this to the device coordinate system my calculation will be quite difficult because I have some value for x and y and each and every implementation we have many packages opengl packages so each and every opengl packages will have their own measurements x and y values for the view coordinate system even so everything this value what I have a value with a device coordinate system as I have already told you my device can be a PC my device can be or TV my device can be a mobile everything the screen has a different size I can say right so this object need to be Fred in any of this crease I don't want if I say my PC if I select I don't want my arrays it should be either displayed like this or like this will more to know I want the same kind of a perfection or the ratio between the width and height the same kind of ratio to be displayed there in order to maintain that obviously I have one aspect called aspect ratio you will learn later which is very important on top of that each and every coordinate from the object need to be transformed into the device coordinate system so as PC has a different value with respect to width and height or your x and y what I can say coordinate system TV might be a different range mobile by 23 in place for everything the calculation should be a calculation will be little bit difficult if I have a values with respect x and y so what I will have we have they have bought a normalized coordinate system what is normalize coordinate system your x and y your X&Y coordinate either it will be 0 to 1 right 0 to 1 or minus 1 to 1 minus 1 to 1 for the sides so it is very easy from the normalized coordinate system to transfer to the device coordinate system because my multiplication with respect to the the the what I can say a destination system or the screen will be easy with respect to 1 0 or minus 1 to 1 so that's why everything whatever the value I have in view coordinate system will be totally the thought that the coordinate system I'm in the points totally will be converted with respect to zeros and ones so that it will be easy compared to this what this cell review coordinate system to convert to the device coordinate system 
EUD41NkKcBg,22,Derivation of Perspective Projection  coordinates in computer graphics,2020-04-30T16:16:27Z,Derivation of Perspective  projection  coordinates,https://i.ytimg.com/vi/EUD41NkKcBg/hqdefault.jpg,usman khan,PT43M19S,false,372,4,1,0,1,good morning everyone I am Usman kay assistant professor bi TM Valerie first I welcome you are to my seventh video lecture on model for so in the previous video lecture we discussed about perspective projection coordinates and also we discussed what are the various opengl functions they are using to use various types of projections like we are using GL ARCA function we are using GL fresh term function next we are using Glu perspective function next we are using DF look at functions these are the various types of functions we are using in our OpenGL program to project three-dimensional object on the two-dimensional screen of the monitor next we also discussed projection perspective projection transformation coordinates now I also explained whenever we want to determine what are the perspective projection transformation coordinates he is supposed to determine protection of the line segment our position of the given object on the view plane and we also determined what is our position of the projection plane so as we discussed in the previous video lecture you can place the projection plane in three different places and they also discussed what is the position of the projection reference point then they are using synthetic Cambra so these three points clearly specifies how we can implement synthetic camera model in OpenGL program to create synthetic object and also to display synthetic object on this screen of the monitor so what I am Telling is here we are creating synthetic object after creating synthetic object here displaying synthetic object on the screen of the monitor using synthetic camera model so when we are using perspective projections in our synthetic camera model we need to determine all these three concepts so as we discussed already how to determine protection of the line segment on the buccal but as I said in the previous slide we need to derive one equation here to determine what is the projection of this point P on the protection plane that is per meter so this derivation I did not explained in the page previous video lecture so today I would like to determine what is the projection point of this point P on the view plane so determining the coordinate of the projection point on the view plane is nothing but its P by P and set P so as I discussed in the previous class whenever we want to determine position of the object on the projection plane or in other words if I want to translate any object in the space and whose coordinate position is assume that we have XY come X comma Y comma Z if I want to translate this point B in this space onto the projection plane I need to determine what is the protection point on the projection plane that is called XP YP and ZP and here we have a projection reference point so we are considering three things here assume that one point P is present in the space and which coordinates are X comma Y comma Z and we have one projection reference point that is called camera position and it's coordinates are it's Y is that with respect to projection reference point now from this position reference point we are giving one point that is present in the space now we need to translate this point P position from this page to Euclid that is nothing but we want to project them position of this point P on the projection plane with the help of projection lines so wherever this projection lines are intersecting to the view plane view plane with respect to this point P then I can say that that is the projected point of me on the projection plane P - so this will be revision I did not derived in the previous video lecture today I would like to continue derivation of this particular topic that is projection of a point P on view plane that is for P - so Delta will go to that particular topic yeah so this slide I was not explained in the previous video lecture today I would like to continue this topic now we are discussing about determining perspective projection coordinates on the view plane so when we are using perspective projections in our OpenGL program we know that the property of the prospect do projects then two objects of equal size is pleasuring the space listed in this piece then I translate the coordinate position of both the objects on the view plane I will get one object of smaller size and one object of the larger size on the view plane so this size are the projected two line segments it depends on the distance between distance between projection reference point to the view plane if any object that is nearest to the new plane as I said in the previous video lecture it looks larger and then whichever the object is far away from the view plane it looks very smaller but the both the line segments assume that having same size same size but the distance between projection plane and that line segment is different so different distances will create different size of the object on the view plane so now today we will we need to determine what is the coordinate position of those object on the projection plane so this is the derivation so first I return Romanova whenever we want to determine what is the perspective projection coordinates on the view plane first we need to determine what is the projection of the point on view plane that's nothing but I am Telling that only right if you wanted it to my position of the point P on the projection plane here we need to consider three things consider a point P in this space and this point P is we need to assume it is of an object having its coordinate positions our X comma Y comma Z this is the first parameter next to we have a one position reference point this R is called this is called projection reference point our origin our camera position our eye position means we are looking this object P from the direction R to P so capital R represent our origin our camera position means be located camera at that particular position and we are giving this object P from this direction and whatever the dashed line I turn those dashed lines are called projectors our projection lines so whenever this projection line intersect to the projection plane at the point P then we will get P dash now our aim is we need to determine this P dash only that we - having its coordinates XP YP + z BP there z vp is some selected position of the view plane on z axis the discarded VP and please remember whatever they - should line i drawn this - head lines are perpendicular to the projection plane - head line is perpendicular to the new claim so when - Allah is perpendicular to the view plane we are leaving the point P about the z axis I will repeat we are leaving good point about the z axis me that the third diminished third dimension is little user taxes right so when they are using when they are giving that object about these their taxes then whenever that projection line increasing to the projection plane with respect to the point P I can say that that is the projection of the point P our projection coordinates of the object P on the you plane so this is our aim of this particular topic our this is of an L with respect to this concept so as I said in the previous link we have P dash and we have R and we have one point P in the space and please remember this is LD P represent we selected one intersection point on these taxes to this projector our protection lines that will you what is the projection of point P and its position X boy said to thee for a projection point P dash and its coordinates R it's a boy P Z VP so it turned out this dot is there in the space say m dot our same point ie translated on the view plane and its point is nothing but P dash and it's coordinates will become XP YP and said P P so these are the parameters we need to consider whenever we are determining perspective projection coordinates so let us begin with the derivation let's begin with the validation know whenever we want to determine what is the protection coordinates of any given object in the space we are using parametric equation so let us consider we're projecting a point P on the projection plane with the help of position reference point R then I will get one straight line here I will get one straight line here this great thing is nothing but our projection projection lines projection lines now we really need to derive this particular concept only now we are using one parametric equation here with respect to projection line from R to P so R please you can see that R is our projection reference point P is nothing but our object in the space from the point R to P we are using our our parametric equation so I will substitute you will substitute I will determine what is X Dash and y dash and set - by using parametric equation so the padding with respect to parametric equation H dash is nothing but it is a difference between the X object coordinate x-axis object coordinate with respect to the difference of X of x axis coordinate of the given object with respect to the x-axis coordinate of P protection reference point and is multiplied with the some constant called you so this is X dash similarly y dash is y minus y minus y e projection reference point into U and we get third equation Z dash equal to said - said - projection reference point into u so what is this that means this is the z-axis our Z coordinate of the object and zero projection reference point is it is the jet coordinate value of the our camera our synthetic camera our our projection reference point our our origin of the camera so then they're using some constant U its value should rain this from 0 to 1 means your new value in parametric equation it should be greater than or equal to 0 and it's valid should be less than or equal to 1 then we will get the 2-inch then we'll get into it so as you can see that here I reckon clearly whatever it's a - y - D - we're determining this is nothing but coordinate position of any point along the projection line r2p so we are actually we are determining here it's - invitations there - this is the projection coordinates of the point P on the protection way so as you can see that we have the three parameters B is the object in the space V - is this object position is translated on the new claim R is our projection reference form and this whatever the line segment I drawn this line segment is nothing but projection lines but in real camera it is called grace now I will substitute U value with two different values if I substitute U value equal to zero then we are at the one end of the line segment called peak when I substitute U value bunny then we are at the position of P the line PR miss here means we're at the position from the line feed a shot yeah leadership means whenever you were substituting u u equal to zero you were at the position P then you are substituting u value 1 you're at the position R so P and R is nothing but two ends of the line segment we represent first endpoint of the line segment of the projection line R represent second endpoint of the line segment actually it is not a line segment it is a projection line but for exploration purpose I am Telling it is a line segment is it looks like a straight line so I am Telling it is a line segment so let us begin with determining projection coordinates of the point P or P dash that is X dash y dash Z dash then you substitute u value equal to 0 in these three equations equation 1 2 if if you substitute u value equal to 0 in this 3 equation then you will get new equation that is X dash equal to X y dash equal to Y Z dash equal to Z this is it - its I written wrong sir - equal to Z so this is nothing but after substituting u equal to 0 means when you substitute u u equal to 0 you were at the position P means when you are at the position P definitely whatever the x-coordinate is there that will become x coordinate of the P dash whatever the y coordinate is there with respect to P that will become go according the y coordinate of the tech-free - when you substitute u equal to 1 in equation 1 2 3 see the equations when you substitute u equal to 1 in equation number 1 & 2 & 3 you are at the position R that is X dash will become its projection prints point y dash becomes ye projection preference point Z dash will become dead projection reference point means after substituting you value one iwere projection coordinates will become equal into evil camera coordinates this is about D you valid and here I written clearly what is X dash y dash y dash when you substitute u equal to one when you substitute u equal to 1 Y where X dash Y del Z test will become its projection reference point comma Y projection reference point comma Z projection reference point now what is our n here means our main aim is we need to determine projection coordinates of the point P on the UK now we also know that we are leaving that particular object about desert axis when we were giving that particular object about the z axis then in their view claim we need to select intersecting point of the point P we did our P dash value and whatever the position we have been selected here that intersection point P dash with respect to z axis is nothing but Z VP means here said P P represent we've selected one position of the view plane that is nothing but our P dash and they are living in a positive z axis direction are there between two towards me towards the negative z axis Austin Texas is coming outside of the view plane negative z axis is towards the view plane like this now I want to substitute Z dash will become cent DP z BP so then Z dash will become z TP means we selected the taxes value on the view plane Z BP and it will become equivalent to the - then substitute Z - Z equal to Z BP in equation number three so if you substitute this L dash value is equal to Z VP in equation number three here this is equation number three I substituted don't see this here red color see the blue pillar converter will be work here now after substituting Z - equal to z vp in equation number three then i will get what is the new value so as i said in the previous slide you is a sum constant and its value ranges from 0 to 1 now we calculated what is the U value then I substitute I said - equal to Z VP then after calculating you now we need to substitute B whatever the U value you calculated in equation number 1 and 2 then you will get what is projection of the point 3 on the view plane with respect to x-axis and with respect to y-axis so with respect to x-axis I will get X P with respect to Y axis I we get white P so I can say that X P by P are the projection coordinates of the point P of the point P this is called perspective transformation equations I will give one name to this equation called equation number 4 then we'll move to next step second Roman number so as I I said the three Roman numbers I'll pop you remember yeah when I was discussing this topic first time so these are the three roman number first term Roman number Roman number one tells that we need to determine protection of a line segment on the view plane but now what we did we determined what is the protection of a point P on the view plane so what is the protection coordinate of the point P on a view plane means this is the equation V variable this is the equation see the slide this is the Roman number one means we calculated what is the protection coordinates a peak point p on the view plane this is Roman number one see the Roman number two rule number two is here we need to determine position of the projection plane so as we learned in the previous video lecture position of the projection plane can be pleasured in three places three places as I discussed in the previous class see the slide this is the slide for this slide we need derivation so the derivation is like this means we need a equations the equation is like this this is the equation I given Roman number put Roman number two says that we need to determine position of the projection reference point so when you are calculating position of the position reference point this is third I think yeah yeah see the third but I'm not telling second one Roman number two says third point with respect to this slide I will repeat Roman number two in these further slides he's represent Toyota point in this fight means we need to determine what is the position of the projection reference point then we discussed projection reference point where these are the case 1 H 2 H 3 these are the projection reference point position we discussed as the theory but now I am discussing very efficient so derivation is nothing but here is the derivation here he is you see the irrigation woman number 2 means what is the position of the position reference point when you are capturing are when you're projecting in point p on this face into the protection plane then we need case on there are two cases are plane you can place the position reference point with respect to two cases if projection reference point is along is a taxes then projection reference point is along the z axis substitute X the projection reference point equal to Y position reference point equal to zero means when projection reference point is along the z axis we need to consider X&Y coordinate value is equal to 0 hence substitute takes projection reference point boy projection reference point is equal to 0 in equation number 4 so see the equation on the for this is equation number 4 if you substitute its projection reference point this is our X position reference point y protection reference point is this if we substitute 0 0 multiplied by anything is 0 0 is multiplied by anything is 0 then we will get X be equal to this particular equation and YP equal to oh boy to this particular equation so as you can see this edit and clearly it's P equal to this equation will be equal to this is the particular equation so now this XP YP represented position of the projection reference point along the z axis page 2 says that if projection reference point is fixed at the origin if you place the projection reference point at the origin of the world coordinates of the object then it's projection reference point y projection reference point z projection reference point will become 0 all three values will become 0 then substitute if x position reference point ye position reference point Z position reference point in this equation equation number 4 if you substitute this then you will get the formula XP and wait this h2 indicates please you see that this case 2 indicates we kept the projection reference point at the origin are at the origin so if you place the production reference point is at the origin this is the equation you need to remember next we'll see case 3s 3 defines we need to determine position of the projection plane so as we discussed on protection plane can be placed either with respect to Z mean that visit the p-value is greater than 0 ZP is NP p value is equal to 0 z DP value is negative negative value these are the three places you can place the protection plane but nowadays we have place near means his three and four you see that yes three and four with respect to homo number three he has three says that if projection plane on expelling means what it means means when you place projection plane parallel to the XY plane z-axis will become zero so substitute Z T p value is zero in equation number four so if you substitute Z P P value is equal to zero in equation number four then our new equation will become XP and YP these are the two equations you need to remember and you can see this example I think you remember this diagram now with respect to this diagram and with respect to phase three we are placing projection plane at the origin of the world coordinate system so here the see that here the origin is that we are placing with respect to X which I explained at the back when we are placing projection plane parallel to the XY plane when you place projection plane parallel to the XY plane Z value will become zero so substitute the VP value is equal to in zero in equation number four final equation you will get this this is the final equation case for says that if he if all three coordinates are 0 all three coordinates of zero means projection plane is placed at at the origin position very special team origin means it's projection reference point is also zero Y is also zero zero dpl's to zero then this is the final equation we get XP and YP like this now these are the three reservations we need to you know so I would like to repeat then the van would be the mine projection coordinates of the given object on the projection plane we need to determine three things first one is we need to determine what is the projection coordinates of a given object on the projection plane now what we derived here means with respect to this point of view we calculated what is the projection coordinate of the point P on the projection plane so if you understood how to project one pixel position that is present in the space having three dimensions projected on the projection plane into two dimensions means converting three dimension pixel to two dimensional pixel on the two-dimensional plane if you understood this same concept you can apply a image contains multiple are more than one pixels so we did the derivation only for one point so we learned how we can project a three-dimensional object having one pixel having three dimensions in this face if it is projected on the projection plane having two dimensions what is the projection coordinates be calculated that is called P dash and its coordinates are X P and point P so this is the derivation today I discussed with respect to what is the projection coordinate of the point P R of the object on the projection plane next to be determined next we define what is the position of the protection plane when we are using synthetic Kappa so you can place the production plane in three different places and you get different different equations today we discuss to them we'll discuss only doing equations so you can place the projection plane about the z axis value positive is said to be p value positive means that projection plane is closer to the synthetic camera when z DP value is greater than 0 when the VP Valley is equal to 0 it means that you kept the projection plane parallel to the world coordinate system of the object and that projection plane is nearest to the origin you consider other times that value will become 0 third case you can play the projection plane in the negative Z 2 Z 3 p value then you place the projection plane in the negative z axis value I can say that that projection plane is placed it at the four typical if you place the projection plane or the positive z axis it means that you kept projection plane near the near clipping plane so these are the three positions are there you can place the projection plane and we also discussed with the theory you can place the projection plane either between the projection reference point and object are you can place the projection plane after object and after projection reference point third component you can consider it as in a projection plane so we discussed this also third we discussed our V between mind is the position of the our projection reference point so we got to derail two equations is one and case two the case one and case two specifies where I can locate our what is the position of the camera we placed it in the synthetic camera model means the origin of the camera is defined by the projection reference point so today I would like to conclude projections topic so just I would like to summarize what are the concepts we discussed till now with respect to with respect to projections first I explained why we need positions I said whenever you want to translate or whenever you want to displace a three-dimensional object on the screen of the monitor we need protections then the classified positions into two types one is parallel one more is perspective again parallel positions are classified into two types like our book net and object again orthogonal is sub classified into three types like diametric trimetric isometric lights this is the first classification we did with respect to parallel projections next to be classified perspective projections into three types first one is called one-point perspective second is Parenthood two-point perspective third is called three point perspective so these are the types of perspective projections we look at whenever our projection lines are parallel to either one faithful axis are parallel to the principal axis are parallel to three coordinate axis to be discussed what is the shape of the width in volume either in case of perspective projections are in case of parallel projection so as I explained shape of the giving volume in case of parallel projections is like a parallelepiped structure and the shape of the giving volume in case of perspective projection is like a frustum ah it's like a pyramid ah it is like a voltage structure instead of filling one hole is not a right word I can say that pyramid it was like a pyramid type of structure and we beam volume defines whichever the part of the object that lies inside the limiting value between the range of near plane to far plane on four sides of the new claim if the object is present within the four sides of the moving volume and the friend near plane and far plane then only that object is visible on the screen of the monitor this is the shape and structure of deep will be volume in case of perspective projection as well as parallel projection next we discussed what are the perspective projection coordinates today we discussed it earlier and we also discussed what are the inbuilt functions we are using with respect to three-dimensional living so with respect to three dimensional readings we are using four different types of three-dimensional living functions to project three-dimensional object on in two-dimensional view plane so in term that object is translated from you plane to the screen of the monitor like this so we discussed four types of functions like GL also that will take six parameters as input and it will create one parallelepiped of living volume and it generates parallel projections next we discussed two types of perspective projections functions like GL Frost and like GL u perspective these are the two inbuilt functions we are using in OpenGL program to project three-dimensional object on a two-dimensional view plane and the last one they are using one more opengl function or GL look at this GL look that is a one more type of function we are using in case of OpenGL to project three-dimensional object on the two-dimensional view plane so this is the completion of projections topic so in the next video lecture I would like to start visible surface detection algorithms Hank 
BO71zPoWNo0,27,"Subject : Computer Science(PG)
Course : Computer Graphics and Visualization
Keyword  :  SWAYAMPRABHA",2018-05-10T05:33:29Z,Animated Visualization (CH-10),https://i.ytimg.com/vi/BO71zPoWNo0/hqdefault.jpg,"Ch-10 Applied Sc, Allied Physical and Chemical sc",PT28M15S,false,18,0,0,0,0,[Music] welcome to UGC II personal of a lecture series on computer science the courses on visualization techniques and today's module we are going to look at animated visualization so the learning objectives for this module are it introduces the need for animated visualization it is possible for us to know the different types of animated visualizations we can also learn about the evaluation techniques that gets applied over the animation animated visualization and we will also have a look at various examples of animated visualization so now let us look at the need for animated visualization animated visualization is still a new area your two-dimensional image is actually good so that we can understand that a new moving image should be better than a 2-dimensional image moment is familiar and we are accustomed to due to both moving through the real world and seeing things and it move in a smooth manner in a visualization animation might help a viewer to work through the logic behind an idea by showing by showing the intermediate steps and transitions or show how the data gets collected over time changes a moving image might offer a fresh perspective or invite users to look deeper into the data presented an animation might also smooth the change between two different views even if there is no temporal component attached to the data first let us have a look at what current visualization is animation can be applied over trend visualization technique animation has been used to show the trends and multi-dimensional data set this technique has recently gained new prominence notably with the tool named Gapminder trend analyzer in trend analyzer the animation together with the interesting data and an engaging presenter helps the audience understand the results of an analysis of a data the two alternative trend visualization that you stopped in the static depictions of trends are the one which shows traces of all trends which are overlaid simultaneously in one display and the second that uses a small multiple display to show their traces side-by-side it evaluates three visualization for both analysis as well as presentation and the results indicate that the trend animation can be challenging to use even for presentation while it is the fastest technique for presentation participants find it enjoyable and exciting and it does lead to many participation errors this is an example of animation and trend visualization this actually shows small multiple views in which each country in its own tiny coordinate system the dot grew larger to indicate the progression with respect to time this is also another example of trend visualization these are frames of animation from the trend analyzer tool which is used for the study in the tool the image smoothly animates between images at one-year intervals all images share the same axis note the convergence of most countries moving towards the bottom right hand side corner over a high life expectancy low infant mortality the fourth the frame highlights one country which has a counter trend here we can see the difference between this country and the various other countries which move in a in the same manner next one is animation visualization with respect to time series data depicting changes over time in the position are attributes of geographical phenomena form a constant viewpoint that has change in chronological space the most obvious application of animation in both the social as well as the physical sciences time series sequences are ordinarily constructed from scene samples at intervals along the range of the series viewed in a chronological order at a constant rate each scene is viewed for about three seconds and one map gradually dissolves into the next the most elaborate scientific animation known to us which is called as a study of numerically model severe strom explores the physical structure of a simulated cyclone this event has it evolved during a two-hour period the invisible structure of the internal winces artfully represented through the translucent shell of the strom with traces buoyant balls and streamers the video was produced during a la one month period requiring the equivalent of one person full-time effort for more than an year the animated portions of this 7.5 minute tape took about 200 hours to render on a graphics accelerated Silicon Graphics iris workstation that time series can also be created from scene representing such time aggregates as an hour a week or a month they both animated isotherm map the result of such an aggregation procedure the term dove collapsed real time so now we will see we'll have a look at this neighbors animation this is a weibull's animation here we can see the animated display of the entire isotherm map so this is one particular area that we are looking at and each and every color represents a different say the temperature with respect to whether it is frozen or rainy or what is the temperature at each and every location can be identified just by looking at this animated visualization so next to time series data they alternatively the time series data can also be treated as cyclic both aggregate values depicted for positions in the circuit modeling uses is a person who used this procedure to create what he called as a composite week during which accidents very displayed for 15 minute aggregates an aggregate time series in which the locations of 27 catastrophic earthquakes from thousand nine hundred two thousand nine hundred and ninety have been collapsed into five scenes and that is being shown here in the form of a time series animation so this is visualization of the chronological change of the time series data twenty seven scenes each showing about one catastrophic earthquake and are shown as five composite scenes clear they can also look at the attribute change and that can be represented in the form of animation visualization so here in this case the focus was given to the change in position of the object in the attribute space the term re expression is used to denote alternative graphic representation whose structure has been chained through some transformation of the original data simple example from graphing include transforming linear measurement scales to logarithmic and applying smoothing filters to unmask a pattern and noisy point scatters in the context of cartographic visualization now analysts can choose the strategic subsets of Time series sequences which is called as brushing he can alter the order which is termed as reordering and he can also make rhythm of sequences which is called as pacing so brushing is a very high interaction technique which was used for analyzing multivariate data brushing allows analysts to see the interdependence of subsets of data for a variety of variables simultaneously this technique was extended by Mon Moore in the year 1989 to a geographic context he suggested having linked risk after plot and a map on the screen together so that when finds on one part of the scatter plot by selected the geographic location would be highlighted conversely when regions on the map were highlighted points on the plots corresponding to those regions would be identified in the context of animation brushing a looser analyst to select and view changes in a subset of data in Geographic chronological or attribute space reordering next is shuffling the scenes of an animation in a purposefully time can be conceived as a vector that can be divided into ordered intervals if time is employed as a measurement scale as it is in the dynamic mapping any ordered or rank the data distribution can be matched and exchanged but that they exploited the dynamic variable order in the sequential presentation of closed chloroplast maps they created a series of scenes from a single clora pet map by isolating each data category and then they presented the scenes in the next comes an animated 3d visualization the task of managing and accessing large information spaces is a problem in large-scale cognition the emerging technologies for 3d visualization and interactive animation offer potential solutions to this problem one of these information visualization technique is called as a country it is used for visualizing hierarchical information structure the hierarchy is presented in 3d to maximize effective use of available screen space an enable visualization of the whole structure interactive animation is used to shift some of the users cognitive load to the human perceptual system the three corners and hierarchical structure countries are hierarchies which are laid out uniformly in three directions the top of the hierarchy is placed near the ceiling of the room under desert the apex of the cone with its children plays evenly spaced along with its base the next layer of nodes is drawn below the first with their children in cones the aspect ratio of the tree is fixed to fit the room each layer is cones of the same height cone base diameters for each level are reduced in a progression which ensures that the bottom layer fits in the middle of the room the body of each cone is shaded transparently so that the pool is easily perceived it does not block the cone behind it then a node of selected with the most the country rotates so that the selected node and each node in the path from the selected node up to the top of brought to the front and are being highlighted so this is a layout of a simple country this is before the selection and this is after the selection of a specific node so that only the nodes that are attached to this specific node are being highlighted and shown here the rotations of each structure in the case of hierarchical home are done in a parallel fashion following the shortest rotational path and are animated so that the user sees a transformation at a rate the perceptual system can track the tree can also be rotated continuously to help the user understand the sub structure or the relation the display of the note text does not fit the aspect ratio of the cards durable and hence our text is shown only for the selected path and sure as an alternative layout called the cam tree which is horizontally oriented and as texture displayed for each node interactive animation is used to shift from of the user's cognitive load to the human perceptual system so this is an example of the cam tree this is the layout of a simple cam tree before the selection in the case of a country we can see that the text is laid beneath by the side of the nodes itself and this is a counter example after the selection of a specific node next comes the story visualization story is defined as an ordered sequence of steps with a clearly defined path through it each chip can contain text images visualizations video or any combination thereof focus is given on stories that primarily consists of visualization steps which can include text and images but are mainly based on data order is a key feature of the story in traditional stories order roughly corresponds to the time which is crucial to understand the casualty that is the events that happen earlier and influenced later events but not the other way around stories are often not told in a linear fashion but rather use flush woods and other literary devices however within each segment the order is consistent on the order of different segments also needs to be made clear in order for the story to be comprehensible they collect the information through research interviews etc which gives them the key facts they then tie those together into a story that may look very different and not directly use any of the source material like the data that has been collected through recorded interviews in this model the data analyst uses visualization for both the exploration analysis and for the presentation however the way it is being used - can be very different the choice of the technique will differ as just how much and which data is being shown to the end-user visualization researchers often tacitly assume that the tool seems for analysis usable for presentation just a spell for their original purpose there are various storytelling scenarios each of these scenarios is different requirements for their techniques used the way the presentation is structured and the amount of interaction that is being anticipated so based on which the storytelling scenarios are differentiated into three types self-running presentation live presentation by a speaker and individual presentation self-running presentation is to a large audience and this is a typical scenario for news media presentation here a presentation is created once and then viewed by many people independently and without the ability to interact with the author or ask questions some of these stories are entirely self-running for example in the case of a movie and some require the user to click through and some provide more or less limited means of interaction beyond simple timeline control the goal of these stories is similar to that of a return feature story getting a point across and explaining it in sufficient detail for the viewer to understand and to trust that the story is based on the real facts and data in a self-learning presentation the key concern is often to draw the reader into it for this purpose they often present a static view that provides a teaser and a first bit of information that does not require any kind of interaction this is similar to the form of a catchy title that I meant to pick the reduce curiosity and make them read the whole set of article there are also often additional hints or references to direct the user to certain interactions to get the story started or to advance to the next step in addition to informing about an issue a story often tries to raise awareness and create interest in a topic a reader may not otherwise have been aware of to provide a deeper connection with the story it can allow the viewer to dig deeper into the read data or at least find out how it relates to her by providing a map that she can focus on her immediate area the next kind of storytelling scenario is a live presentation by a speaker the live presentation by a speaker is done in front an audience this model which is being exemplified by Hans Rosling has a Gapminder presentation is similar to the way many business presentations are given today the main difference is in it how the presenter can respond to questions which partially obviates the need for an open exploration part at the end but also poses of that challenges a presentation based on our live visualization allows the presenter to pass the story and interact in response to the questions it is even conceivable that the presentation adapt the changes made at one point that carry forward through different presentation steps in addition to the usual kinds of interactions used in visualization there is an additional layer of annotation highlighting that can be useful in presenting the next type of scenario is the individual presentation of results the individual can also be some small group while this scenario may not might not seem different from the previous one it potentially involves more interaction between the presenter as well as the audience this requires a presentation tool to be more flexible than a simple slideshow so other it is possible to answer questions that come up during the presentation for example in a discussion of quarterly results questions about specific sales or marketing measures might come up that were not part of the story but are of interest to people in the audience in addition to being able to ask and answer questions it also appears useful to be able to record these kinds of questions fast so that they can be reviewed later this way the presentation becomes a vehicle not only for dissemination of information but also for collecting and condensing additional knowledge the example of a storytelling visualization the New York Times cope uncommon emissions treaties and impacts the slideshow controls allow the user to move back and forth between the steps and the content is structured like a dialogue in the story on the Copenhagen climate conference when you mean your time and see used slideshow controls to provide a way of stepping through the story walks the reader through those differences and also shows the result of implementing the protocol in countries that has already agreed while the slideshow metaphor is very simple it allows almost any story to be told this particular story as hava he said she said kind of structure with a surprisingly engaging so this is an example of the storytelling visualization we can see their time series data with respect to the slideshow context the next kind of animated visualizations on the animated networks graphs are a common way to visualize the relational data in many systems the drawing of a graph can change according to program or user in action if the changes of big it is usually very hard for the user to maintain a mental map of the graph showing the transition from the initial drawing to the new drawing as an animation can significantly increase users ability to preserve the mental map of the graph an animation as said is a sequence of images but configurative image is different a subtle but highly structured thing if the images are shown to human and consecutive order and at adequate speed the object from the images will be perceived as do it is moving and this effect is also called as apparent motion in graph animation we move the nodes and edges of the graph to transform it from one drawing to the other for any two drawings of a graph there is an infinite number of phase short ones from the initial drawing into the final drawing so these are good examples of animated networks we can see the entire network can be represented and different ways the quality of animation is a huge impact on how well they use it is able to understand the changes the human brain is specialized to recognize and interpret certain kinds of structured moments especially motions that have a physical organizational of biological interpretation this is partly equal aaja chol and partly learned the brain is also evolved aids survival in the world and food tends to perceiver consume biological motions the brain while developing also learns to recognize familiar patterns structure and motion that it encounters in the physical world the next kind of socialization are the algorithm visualization the algorithm visualization we have various examples of various algorithms that can be visualized in an animated manner the basic algorithms on recursion indexing sorting heap like data structures and various other data structures like linkless queues trees graph algorithms dynamic programming algorithms and geometric algorithms can be visualized in an animated manner so let me run heapsort animation here so this is an animation of a heap sort so we can see how the entire heaps art takes place they have various numbers and these numbers are arranged in the form of a heap sort and it is being animated as a heap sort animation so here we can actually see the various steps that happens to sort the entire data set as such so here in the U a we have and we have two buttons for randomized to array for creating the randomized array and for creating the heap sort so if we click the randomized sorry the array gets randomized and if you click the heap sort automatically the animation starts running and right from the first step to the result step it starts running in a automatic manner that is not much more much of interaction in this case so as we have seen in the case of keep sort animation there are other geometric algorithms or dynamic programming algorithms which can be visualized in this manner next one is evaluation of these kind of animated algorithms we can ask where induces and we can evaluate by giving a question as to the end user so here is an example question that has been given to the end user to evaluate the animated visualization that they have seen so some of the questions like the visualization was a helpful to me in answering the questions they try to rate it by giving certain values so this is some kind of evaluation that can be done over the animated visualization there are certain laws like the laws of Gestalt that are supposed to be followed in creating these kind of animated visualizations so the certain laws are like the law of simplicity which states that every stimulus pattern in seen in such a way that the resulting structure is as simple as possible the law of familiarity where things are more likely to form groups if the groups of appear familiar or meaningful the law of good continuation which states that points that when connected resultant straight as smoothly curving lines are seen as belonging together on the lines tend to be seen in such a way to follow the smoothest path some other laws like the law of connectedness there are things that are physically connected or perceived as one full unit the law of proximity which states that the things that are near to each other appear to be grouped together next the law of common fit with states that things that are moving in the same direction appear to be grouped together so these laws are also called as the laws of Gestalt theory which are actually used by the designers in turn for creating these kind of animated visualization patterns so there are certain downsides for these kind of animated visualization patterns some of let us look at some of the downsides of these kind of animated visualization the animation has been less successful for data visualization than for scientific visualization to meta studies has been done to look at different types of animation that is a process animation and algorithm visualizations and they found that both classes of spotted track records when it comes to helping students more about complex processes the animation did not seem to be helpful for process visualization that is visualization that show how to use a tool or how a technique works in no study was animation from to outperform rich static diagrams but these kind of animated visualization did beat our textual representations though and simple representation that simply showed the start and end state without any kind of transitions algorithm animation is in many ways similar to process visualization an algorithm can be illustrated by showing the steps that it takes place some sorting for example or very amenable to animation an array of values can be drawn as a sequence of mass so that the sort operation moves the balls around as we have seen the previous example in the case of heap sort various other downsides of animated visualizations are to understand the effectiveness of algorithm visualization in the classroom half of the control studies they examined and they found that the animation did not help the students understand the algorithm as such interestingly the strongest effect predicting success was a theory behind the animation the visualization was most helpful when accompanied by the constructivist theory what we have seen already in our previous module that is when students manipulated the code our algorithms and watched a visualization that illustrated their own work or when students were asked the questions and try to use the visualizations to answer them in contrast animations were ineffective at transferring knowledge possibly watching an animation was not more effective than other forms of teaching there is a taxonomy of animation that is we can change the view of animation by panning panning over or zooming in on to a fixed set image such as a map or a larger data space we can change the charting surfaces that is on a plot or we can change the axis on a map if we can change for example projection to a globe and things like that filter the data that is remove the data point from the current view for lying a particular selection criteria we can reorder up the data let us change the order of the points but we can change the representation that is we can change from a bar chart to a pie chart chain the lay layout of the graph and change the colors of the notes by just interacting with this kind of animated visualization we can change the rate of set in the case of animated visualization and see what happens that is we can move the data forward through a time time step we can modify the data we can change the values that are being put right and see what happens so this is all for one simple example of an animated visualization we can see this actually an anime image but here it is not working it works it looks as though it is a static image in this animation usually the is not the the color and the numbers will be running through one two three steps and accordingly when it comes to the first tip the first step will be portrayed here and diagrammatically in an animated mood similarly for the second step and for the third step so when it comes to when this color moves to the first meant for number one escalator the first step will be depicted in the form of an animation here these are certain examples of animated visualizations so coming to the conclusion by summary we can see that there is a total need for this kind of an animated visualization which help students study the concepts in a more elaborate and understandable manner and there are different types of animated visualization which can be applied over different types of data set we can have graph data set we can have countries we can have hierarchical data set animated visualization can also be applied on stories and things like that it can also be used for animating the sorting or some algorithms that are available they have also looked at various examples of animated visualization and they have also looked at how was it possible for us to evaluate these kind of animated visualization the evaluations of these kind of animated visualization can happen only subjectively by providing some kind of questionnaires to the end users and by asking and asking those end users to rate the visualizations that are provided to the end users thank you 
-rTFq5qlIZI,27,"A major quest in computer graphics research has been to understand and virtually model the appearance of the real world. In this lecture—the last in the summer lecture series sponsored by the School of Continuing Education and Summer Sessions—computer science professor Kavita Bala talks about the university's pioneering research in this area in her talk ""Virtual Realism and Computer Graphics"" on July 29 in Call Auditorium, Kennedy Hall.",2015-08-25T14:05:46Z,Kavita Bala describes Cornell's pioneering computer graphics research,https://i.ytimg.com/vi/-rTFq5qlIZI/hqdefault.jpg,Cornell University,PT1H10M25S,false,3529,27,1,0,2,this is a production of Cornell University come to the last of the summer lectures that means tomorrow it will start to snow not really if there's an emergency please remember where you came in or exit through one of these exits again I want to thank the College of Agriculture and life sciences for the loan of this wonderful Hall they've been very kind to us my name is Charles Jeremy I'm the associate dean of the school of continuing education we're glad to have all of you here Kavita Bala is a professor in the department of computer science and the program of computer graphics at Cornell University she received her master's and PhD degrees from MIT and her Bachelor of Technology degree from the Indian Institute of Technology KB specializes in computer graphics leading research projects and physically-based scalable rendering perceptually based graphics material perception and acquisition an image based modeling and texturing she has co-authored the Graduate textbook advanced global illumination now in its second edition and she has authored or co-authored at least 90 professional papers Kb chaired the sig graphics Asia 2011 conference co-chaired physics graph yes physics graphics in 2010 and the euro graphics symposium on rendering in 2005 she has served on the papers advisory board for SIGGRAPH and SIGGRAPH Asia and as associate editor for transactions on graphics transactions on visualization and computer graphics and computer graphics forum her 3d work I mean her work but it is 3d her work on 3d mandel list was featured at the Rubin Museum of Art in New York KB has received the NSF Career Award Cornell's College of Engineering James and Mary Tien excellence in Teaching Award in 2006 and 2009 and the Veneto Stewart award KB virtual realization realism I'm sorry realism and computer graphics thank you all for coming in from there's a glorious day outside and yet you're here so I appreciate your coming in here I'm going to start what does it mean virtual realism and why does computer graphics have anything to do with it so I'm hoping to tell you a little bit about this and a little bit about the role that Cornell has played in the field of computer graphics and the impact it's had on the world so it's big broadly about actually all of the research that's been done here at Cornell in the graphics field so last year you may have seen many headlines like this one Facebook buys oculus virtual reality startup for two billion dollars and you may have thought for that kind of money I want to know what the meaning of life is and they're very unlikely unfortunately to tell you that however the buzz has been relentless so I'll try to tell you today at least what they're about and so what kind of buzz do they get things like this how oculus rift one Comicon or bit by bit virtual reality heads for the holodeck you may remember what the holodeck was it was the science fiction show the Star Trek science fiction show it was this immersive environment there that could do magic so are these guys really headed to do magic I'll show you an example of how people use it and you can see I also have actually this is the the gear VR at the end of the talk today you can come and try it out it can you do it with my cell phone and we can show you little demo but let me just show you an example of somebody online looking at this so here on the bottom right you see a user with the oculus rift gear and on the top left some idea of the scene she's viewing as she's viewing it there's a bit of a lag so you'll see that her responses are a bit delayed with respect to the video right at some point she starts so that's that's one video this is a five year old kid I always like to see how kids react to this thing and on the left you see the kind of images the kid sees and you can see it's it's challenging his sense of balance and one of the things I noticed with kids versus adults kids will actually spin around the full 360 degrees that they are supposed to adults like to face forward so kids actually get how you're supposed to use this better than the grown-ups so this is the kind of technology that's a five year old this is the kind of technology that he's just going to expect as given 15 years from now and that's the world we are going to live in let me just tell you briefly how it works just a little bit they're called they provide these these goggles supposed to are supposed to provide stereoscopic 3d vision so what does that actually mean what it means is in this device each of your eyes will be shown an image and these trained mages might look almost like they are exactly the same they're not actually exactly the same they're a little different different enough so that your brain just like your visual system works and you get two different images in your left and your right eye and you fuse that together to get a sense of 3d in the world that's what this device does it gives you two different images for your two eyes and your brain fuses it together to get a 3d image that's one aspect that makes them so compelling the other aspect is of course this whole 360 aspect of it which is immersive you have sat in front of screens all your life and you know that the field of view is kind of limited and small there is in these things you turn around and you see the scene there and that sense of immersion is called presence by the the true believers of we are and that's what they want to achieve the sense of presence where you forget where your are in the real world and you're actually in this virtual world so how these devices work is they look something like this as I said I have that's the cheap version that's just a two hundred dollar version of the gear VR but they have a little strap that you put on your head and the thing is you stake in your cell phone which gives you two different images and there's a bunch of circuitry and that's it the projects to your eye and it it tracks your head it can look where you're looking that's a $200 device so as I said it's a cheap version there's a cheaper version still not to be outdone Google has the cardboard version of this that you can take and cut out and bake at it at make it at home and then stick your cell phone in that so if you want to go home and try this for $17 you can have the experience but you can feel free to come up at the end and also try it out games are a clear application domain that has it's been touted a lot as games as being the ultimate domain but there's actually other more serious applications that people are thinking about which I also think make this a particularly exciting time so for example clinicians are going to use this for example to simulate how somebody with Parkinson's what what they experience visually and use that to develop an understanding of what their patients are going through so that they have more of an understanding of what they're dealing with that's one example here's another area that you know you might not think of say you want to visualize the world at nanoscale you're a scientist who wants to understand the world wouldn't it be great if you can strap on these goggles and have a first-person view of what it is to live at that scale that's another example that people have raised this is a training application they do it for troops but also this is an emergency training application the claim is that the sense of presence because you're so immersed in it you actually will experience the stress of in this case say a crash landing and we'll be able to work through your stress levels and stay calm and get trained up to do the right thing in such conditions and more recently this is an example from actually yesterday where people are now using it to develop virtual cal cultural heritage type of applications or tourism but you can wander around the place that you will then take a vacation to and go to so there's a lot of buzz around it and the hope is that this will actually get to play out in your lifetime and you'll get to enjoy all of these benefits I want to step back and introduce another term so this is virtual reality everything is virtual that you see the content is virtual there's another phrase called augmented reality which you might have also heard and I'm going to now show you give you a taste of a little of what people are envisioning in this augmented reality world now I apologize I'm going to show you an ad from a company the previous was also an ad from company just bear with me it does do a good job of saying how this might play out we could go beyond the screen where your digital world is blended with your real world now we can this is the world with Holograms what will they enable us to do new ways to visualize our work I have an idea for the fuel tank new ways to share ideas with each other how things going you rent I just put the images in onedrive more immersive ways to play new ways to teach and learn so put the new trap into place of the old one and tighten here so this is augmented reality where you're blending real camera input from the world you're in with some virtual input seamlessly so that you can do your work better now you may have learned that the woman was gonna walk into a wall but presumably we are all going to get very good at working around with things strapped to our head and blending these things together we're going to have to adapt that's one example there's you know there are other examples for example minnie is designing augmented reality goggles they look - that might cut out yet but they could be very useful the idea is that if you wear these goggles you can then sense your entire environment and so you can become a safer driver because you'll know when you might be heading into a collision or you're too close to the cars in front of you or behind you all right so that gives you a flavor of all of the you know what we are an arr what does computer graphics have to do with it well computer graphics is the core technology that drives VR and AR computer graphics connects the virtual with the real so you saw for example that model of the motorbike there was this woman who was designing the motorbike on the screen and then there was also a real motorbike in computer graphics let her basically blend these two images together so she could overlay her vision of her fuel tank on the real motorbike and have that sense of seeing how it would play out now if you think we are an AR or two pie in the sky there's going to take 15 years before we get anywhere I want to just give you an idea of how computer graphics is in your life right now whether you realize it or not you or some relative of yours I'm sure has at some point bought a piece of it Maiki a-- so this is from the IKEA catalog a few years ago IKEA announced that in fact 90% of their catalog is virtually rendered that in fact it does not based on any real studio model and in fact I'm going to use this mnemonic of putting a blue V for anything that is virtually rendered as not a real photograph and this shorts most people because most people thought that they were looking at the catalog of a real scene but actually it is computer graphics and they never realized that it was not real if you've ever worried about how your kitchens never look as perfect as theirs now you know why it's because they aren't real this idea of visualizing things that aren't actually real many companies are not getting into this so for example there's a company called floored in New York City that is going to build such models of real estate for people who are trying to start new companies or get new homes and they can visualize their entire layout before they actually step in so here's another example this is in fact interactive unlike the IKEA ones which take a bunch of time to render each image but you can walk around how your office space might look before you ever sign up for that kind of interior design closer to home if you've seen gates hull which is the computing and information science department which is where I live before the building actually came up the architect showed us visualizations like this and this was not particularly pleasing to us we didn't have a clear sense of what was going on but as the project developed they started showing us visualizations like this and so this was the virtual rendering of that building long before the building actually existed and we also created this this really helped the department plan as to how they would interact in this building and just to give you an idea of how the building actually looks if you haven't wandered down there to look at it this is how it really looks now there are some differences in fact the architects changed what they actually built however it's pretty close it's impressive how close it comes to the real thing and so this is the art the lighting is different but the match is pretty good the idea of using graphics to visualize events long before they exist has much wider application you know the kernel has played a major role in space exploration you've heard about all there all the Mars exploration we have done another domain where graphic simulation plays a big role is in fact in trying to simulate an long before the mission actually takes place so that you can plan and you can anticipate different outcomes for example graphic simulation was used to visualize what would happen for the deployment of this parachute before the mission and then of course you still have to go to the planet and all hell breaks loose in a place where fact meets fiction you may have seen the recent movie interstellar and what you may not know that in fact the physics that were simulated in interstellar was actually very carefully done the movie makers collaborated with the Caltech physicist to try to correctly visualize relativistic effects and the belief is that in fact this is the closest people have ever come to understanding how this a black hole might look so that's how it computer graphics feeds into science but we have mourned are all saying their entertainment it's always played a big role in entertainment so one example is this movie you may have seen in the Curious Case of Benjamin Button the strip in the middle is the actual actor and that's shown with the are there because that's how it really looks but in the movie what they did is they assimilated his appearance both when he got young and when he got old and if you've seen the movie you'll know that it actually was a very well done it was it did not violate any assumptions of yours and you thought that looked realistic so that's an area where computer graphics has always played a big role another type of this is not so much realistic appearance but graphics has always been used for animated movies and I'm sure you've seen this here the goal is not to look real but to actually just be believable and actually relatable so you want to relate to the characters even if they don't that plastic blob doesn't look like anybody you know in real life movies invest a lot of money into making things look good the other extreme of the entertainment industry is actually much more demanding and these are games and the reason games are more demanding is because the character that is you can walk around to an arbitrary place and they can't you can wander into the part of the set that wasn't set up to look good and so they're very demanding but they have come a long way since the 80s or the seventies when then there was some progress being made in them so to give you an example here's the Madden football game and I just let you see it for a bit a chance to win and the bad blood Wow it sounds bad that's good because that means it's going to be physical on the field and it's gonna be a lot of fun to watch so that means LaMichael James will be back for the Oh and mouska looks at out so this is all virtually rendered and there are parts of the video where it's completely unclear that that's the case particularly in the group play etcetera they've done an amazing job of making you look real but there are parts where also completely violates or you see the person and you go oh that looks completely fake how terrible so that's exactly the challenge there's an arms race here and games and movies are continuing to push the boundaries so that 10 years from now you're not going to have that reaction you're going to probably accept that it actually looks really and you're going to struggle with trying to tell that it's virtual here's another example from a game this one is harder it's tough to say which one is virtual in real in this case the left is real and the right is virtual but actually if you just look at the hills if you look at that shed it's very hard to tell I had to look at the grass to finally figure it out and I do this for a living so it took me some time to figure out what was wrong there so how did we get here well funny you should ask it turns out Cornell has played a major role in creating the field of computer graphics so this is an example from 1974 so you all know of course I am pairs you know Johnson's museum this was a visualization of the Johnson museum before it was built and this was done by Don Greenberg who's the director of the program of computer graphics here and the program of computer graphics has been a pioneering one of the first labs in the country and in the world and has been a leader all along and what was amazing about this is people had not even thought that you could do this kind of visualization or you can use computers to do this kind of stuff and this was done long before modern times then your modern computing on very primitive Hardware so it's really amazing that they achieved this way back then and it created the field that we are now all enjoying reaping the benefits off so let me give you a little idea of what is the problem that computer graphics tries to solve ok so you want to produce an image what do you need to do to produce an image so first let's say they're trying to model this car the first thing you need to do is capture the shape of the car some model that represents the geometry of the car and so traditionally that's done using CAD models which is another area in which the program of computer graphics has played a role but we've done CAD models and you represent a car or se with lots of lots of little little patches or surfaces that's the level of abstraction I'll talk about so let's assume you have this very complex model and often its millions or billions of patches that represent all the geometry that you want to represent in a scene so that shape that's one big piece of the puzzle the next is what's it made of so that's the material part so often say you're designing a car you'll have a budget like this that the designer will be playing with and they'll let you attribute a different color to the car so for example nowadays if you want to go and buy this is an Audi if you want to go and buy an Audi online they will let you try different paints and to visualize how the Audi will look before you buy it car paints are actually very interesting they have lots of metallic they're called metallic paints and making them look right was actually a very hard challenge one of the early pieces of work done here again at Cornell was by Professor Ken Torrance and a student Rob who then went on to become a VP at Pixar and they showed how to make things look like metals before they did this research everything in graphics to look like it was made of plastic like that yellow ball on the bottom left but what Rob and Ken did is they actually produce metallic models and that's a nice vintage image over there but all of modern materials that you do that kind of metallic thing use are inspired by the work that they did here so now we have the shape of the car we have the material of the car is that enough not quite as it was famously said let there be light you need light to actually see things the light interacts with these materials and the shape and it produces an image and here is this car again seen in two different lighting conditions here's here it is at dusk and here it is in broad daylight and it looks very different depending on the lighting and so you do have to consider what's the environment what are the conditions under which the light comes together before you can produce an image so put it all together here are some of the key players and computer graphics you need to have some shape specification some material specification and some idea about the light that's when it's sunlight or indoor lights like this and you take all that you I mean an algorithm a computer algorithm takes all that manages for hours often and produces an image that looks something like this okay is that all again not quite because the image is only as good as it appears to a viewer so a key player in all of this is the fact that there is a human being who sees the image and it is that human being who judges does this is does this look fake or does this look real and if you can fake the human being out that's when you know you've succeeded and you can call it at it so that's the computer graphics problem I'm going to talk a little bit about the light simulation because that's something that we have done Cornell has made big contributions in and I'm going to use this particular scene to illustrate the problem now you may ask why this scene it's a room with two boxes in it it turns out this is a very famous scene it is called the Cornell box it has its own Wikipedia page and it was envisioned somewhere in the 80s as a simple but useful example to try to understand how light bounces around in a scene and they felt if they could visualize this and get it right and that on the on the right there is a picture then they were starting to make progress on figuring out how to solve this computer graphics problem so why is it hard so let's just look at it you have a box say and by the way this box actually there's an actual model in Rhodes Hall you should go and check it out if you have the time so if I want to figure out what light is arriving at this blue point I can connect up array from this point to the light and I can do some computation of the physics of light based on the energy of the light etc the geometry of the scene and come up with some number that represents the energy arriving at that blue point so if we say that's not such a hard problem and if I did that I will produce an image that looks like this unfortunately this isn't quite the whole solution to the problem and the reason is light doesn't only arrive at that blue point directly from the light source what actually happens as light bounces around and in fact in a scene like this it can bounce around millions of times and there will be very very complex and all of those paths then converge at their blue point and you need to compute all of that to produce the image on the right as seen here so you can see it makes a big difference to get the global illumination right and if you don't get it right and this problem is called global illumination because it's global then it won't look real and if you do get it right well you have to spend a lot of time computing that's that's the the challenge so back in 1984 the program of computer graphics this is Dawn and Ken and their students introduced a technique called radiosity which was breakthrough in the results it achieved one of these is a real image and one of them is one of them is a virtual image and one of them is a real picture off the box and this was back in 84 better again computers very slow it's kind of shocking that most people cannot tell the difference between these two it turns out left as a real and the right is virtual it's very hard to tell just by looking at that and so this was breakthrough work and in fact it was adopted by many early games so quake and descent which are games invented by John Carmack who's now the CTO of oculus rift designer of the VR used all of the radiosity technology and radiosity in fact became a core rendering engine in Autodesk products used for architectural walkthroughs and industrial design so that was a great start and off nearly 20 25 years ago 30 years ago even and was that enough well that is a good place to start but radiosity had to make some assumptions it assumed that materials are diffuse that they aren't shiny they aren't translucent they aren't transparent and that unfortunately the real world is much much more complex so here are a bunch of photograph just from Flickr of people's homes and you can see there's a lot more complexity to the kinds of materials in the world there's fabrics there's glass there's mirrors metals wood ceramics adding all of this to the mix is the challenge that we've been solving since 1984 so let me talk a bit about how light interacts with materials so when you have a matte material light hits it and just spreads out evenly but for metals for example light might hit the surface and then bounce off in one direction or just a small set of directions that's one of the challenges you of computing light translucent materials are very very challenging to deal with so what happens with translucent materials as light goes into the medium bounces around and comes out and translucent materials are unfortunately or fortunately everywhere the food you eat your skin glass jewelry where surfaces all around you the leaves there they're all translucent and translucency in fact is very important because if you get it wrong for example in the sushi if it's even slightly off how it looks you won't eat the sushi because you as a human being used information about s translucency to judge whether it's fresh or not and in fact there's another example of a translucent material which I'll talk about shortly so the importance of translucency you can actually see it here on the top right on the left is a picture of a woman's lips that with the model without assuming translucency as a model assuming just opaque materials and you can say it looks plastic it looks fake and on the right is what happens if you actually simulate translucency and it starts to look more like a real person rather than just a plastic doll and the work for introducing translucency to graphics was actually done by my colleague Steve Martian err and that work got adopted by the entertainment industry and it is in fact used in a lot of the virtual any rendering of skin pretty much uses their model they want in fact a technical achievement about for this work and in fact the program of computer graphics has had about thirteen or fourteen technical achievement awards over the years with various of our alums getting them because of our contributions to this area so what I'm going to do today is talk a bit about some of these challenging materials and just try to give you an intuition for why they are challenging and then what you might want have to do to make progress and in achieving true virtual realism I'm going to pick two examples one is white jade and these are actually photographs shown by the AR and the other is silk we care about fabrics a lot I'm going to talk about why fabrics are actually hard to simulate and what you need to get right so let's look at one of these projects first is what makes Jade look like Jade so this is a problem actually that I a collaboration with Teddy Dolson who's a and psychologists at MIT and Todd Ziegler who's a vision scientist from Harvard and the three of us were spent I have spent about five years on this project trying to understand why white jade looks like white jade and in fact the big motivator for us was this particular example this is the photograph of Chinese emperors dragons field and it sold for a million pounds a few years ago and we just love looking at this example because it's exquisite and you can see that there's this there are these ribbons of material of white jade and there's ribbons of light that flow along with it and we didn't we could not simulate that in computer graphics kamil graphics at that time did a great job of getting the base looking right but not the the rest of the model so why does this look like it does I've given the answer first and then I'll tell you how we understood it so the answer as to why it looks like that is because it matters how light scatters inside the the material so how do we we characterize that so at that time we did not have access to white jade we just were salivating at that beautiful white jade sample so we had soap and we had backs and so we used that as our models because we could get access to them on our research budgets and what we did is we took these two and we studied them we had models made of this this fraud prints but we also made blocks of these materials or soap and wax and then you shone and shine a laser at it and you take a photograph from the top and you try to look at that photograph to see what is the light doing inside these media so for soap light scatters and produces this characteristic what we call the teardrop appearance where is this fax and it's a very special box called pyro vex which is used to to polish floors but it looks beautiful and wax actually behaves very differently the light goes into the medium and then it turns back it scatters back which is not typically done in in in the soap and so this be called the shape and Apple shape and what we realized as if we could capture these properly this the scattering of light properly then we are able to simulate these materials to look realistic so the student was involved with this project went off and measured a whole bunch of materials mustard and milk and coffee wine soap of course and he then produced renderings like this this was a 3d scan model of soap and you can see that for for the first time that we were able to actually produce this classic appearance of this light when you shine it from behind of this thin ribbons of light that come in these ten features now you may say that's a lot of effort expended just on soap but it was the most realistic soap I think that there has ever been rendered and in fact we could do a broader range of materials olive oil Kirchhoff and milk so I've given this talk about this word before and Joe and Pauline dehghan filter who are in the in the audience right now saw that word and they very kindly Joe approached me and said you know Heath I have Jade and so they very kindly have given as this model of white jade so you have welcome to come and see it later and we just got this model today our hope is now to actually know that we have we can go beyond our soap and our wax models we can actually measure real white jade and correlate that with our measurements and understand its property so you can see here this is a particularly high quality of jade corn mutton Jade and it looks beautiful and there we are starting to take measurements we took a few in the lab today we have some photographs here there's another inkwell that they gave us on the right and you may notice if you look at that inkwell it looks almost pearlescent and we are trying to understand why does it look like pearl when it should it is Jade so these are the kinds of questions we hope to answer when we continue this project when this says they assigns an art project and we're very excited to be part of that so why Jade is one example of a tough material that we are starting to make progress on and hopefully now with real samples we can even understand improve our understanding of the material more so another material that shows up a lot in real life if you care deeply about fabrics you wear clothes and you care about silk and velvet and you're very good as a human being a distinguishing soap from velvet well why what makes silk look different from velvet so that was a question we set out to answer again I'll tell you the answer first and I'll tell you why - it turns out the structure of the fibers and the yarns that make up the material play a big role in the appearance of the role of these materials so how did we figure that out what we did is we did be collected CT scans of velvet and silk so CT is computed tomography in fact it's micro CT and so what does CT do it uses x-rays to get density information of the material that you put into the CT scanner so I'm going to now show you the kind of density information we get for velvet so on the top left you see the sample of velvet we have this is a 5 micron resolution scan in the middle you see slices of the of the CT scans and on the right you'll see a visualization of velvet and we'll start at the top of velvet and work slowly towards the base of the velvet okay so let's look at this here you're seeing the tips of the velvet yarn showing up and as you slowly go down you can see the 3d structure pops out of velvet and it's very characteristic velvet has this base and all of these fibers that are that are yarns that are poking out so that's velvet here's silk very different silk is very tightly packed yarns woven very tightly together in fact it looks shiny for that reason velvet on the other hand because it pokes out has this very classic appearance if you wear a velvet jacket you'll see it's its highlight that's called asperity scattering that's very typical let me just show you these these scans again so here's velvet again you see the tips of the velvet and as you go down you can see the 3d structure showing up and on the right here is a silk which is very tightly woven yarns interlaced with each other once you have this model and so these are micron resolution models remember was talking about capturing the shape of materials they're talking about huge volumes of data to capture their their appearance but once you have this model you can take a photograph to give some optical information and you can put that together to get a complete model so here is our rendering of silk of red silk and you can see this is a virtual rendering but you can see that the highlights like silk and this is the highest quality renderings of silk to date in computer graphics and then here is velvet and as it spins around you'll see the classic highlights that velvet has on the rim so you look at it and you know it's velvet and you'll never mistake this for silk as a human being you may have also noticed even though you were focusing on the video that the time it took to compute each of these was 240 hours on on one core of a computer and the previous one was 500 hours so this is not ready for virtual reality anytime soon but is there to at least give us good visualizations that hopefully we will then use and work on to produce interactive demos and in fact you may have heard that nowadays you can walk into certain big department stores like Macy's and they will do a full-body scan of you and get a virtual avatar one of the applications of the kind of work we are looking at in this fabric rendering is to let people try our virtual garments instead of having to go in and actually try them out for real so this is this is a big area that's actually a booming area that's coming up and we're working with textile designers in the Rhode Island School of Design to get this technology out there so let's step back again I've talked a lot about materials you know Jade and n fabrics have talked about shape by loading these micron resolution models I have not talked as much about light so how do you actually compute light efficiently so that's one of the projects that we've been working on this is actually a decade's long project and I'll give you a hint of how you go about making some progress here so first let's look at what happens to light in complex scenes now I showed you this as an example of a scene that was shattering in 1984 but of course it's not very complex the real world looks something like this and what we want to do is simulate light in in a kitchen like this one on the right so why is it so hard to compute light so I'd shown you this earlier picture of light where you trace the light out from the light source and you go and you hit some surface well when it hits the surface it actually sprays out in all kinds of directions and I'm showing here three different directions that that it might spray out and but realistically if you want to do good relation of light depending on the on the materials you have you might want to trace about thousands of rays outward in those light blue rays now each one of those thousand rays goes forward into the scene goes and interacts with other surfaces which each in turn spray another thousand rays each so you quickly can realize how the competition gets out of control so and your first bounce you have thousand computations you buy a second bounce you have to compute million computations and by the third you're at a billion computations so even though from 1984 computers have gotten thousand times faster that's not quite tracking this billion fold computation in complexity that we need to manage so why do we have any hope of making progress so this is a problem as I said we've been looking at for a decade or so in my group and I'll give you a hint of how we how we do it here is a model of the collapse a temple in Egypt and this is actually a cultural heritage application where people want to visualize how this temple looked back in its heyday before modern times so if you have a scene like this and you're trying to visualize how it looks and this is joint work with Bruce Walter and and several of my students as I said what you want is to really fool the observer as long as the observers fool you're fine so if you look at that temple if you actually zoom in on any piece of the temple there's a lot of shadowing and shading that's going on but at the high level when you were pop back at this level the observer couldn't see all of that detail so the simple rule and it sounds very obvious but the simple rule is if you don't see it don't compute it the rule is easy to state to convert that into a computer algorithm that actually works you need to be able to predict what you will not see and then don't compute it and that's where the magic goes into figuring out how to actually do that so we've developed a perceptual metric so we have some understanding how human beings will perceive the world and we encode those perceptual metrics in our algorithms so that we can take shortcuts in what we compute now here's that same scene and now I'm going to show you it at a slightly different time of the day so say it said it's nighttime now and it's a foggy evening and the light now scat it turns out that fog is extremely difficult to compute because you have to light a translucent medium the light bounces around in all kinds of directions this is extremely slow to compute but as you've probably realized if I look at that region again as a human being you really don't care about all of these billions of computations that are being done to compute this image so this is means van der Rohe said less is more this is a case where more is less and more complex computations are actually often they overwhelm the visual system and so you can take shortcuts that you could not do for the simpler scenes and this is a very counterintuitive result but plays a big role in computer graphics achieving very good visual results for very complex scenes the more complexity you add whether it's trees whether it's very highly textured surfaces the less the visual system is finicky about the accuracy of the results so exploiting that is something that we in our field spend a lot of effort and time on so we have built on this sort of high level insight to now simulate all kinds of materials and complex scenes mirrors metal ceramics translucency glass natural lighting so that image on the right these are all virtual images and they're not real photographs and in fact this technology that we've built called light cuts actually forms the core rendering engine of Autodesk products and is being used right now by millions of designers worldwide to design things all the way from big buildings you know in daytime or night all the way down to designing a coffee pot for industrial design so the same technology applies everywhere so does that mean we are done so this is the visualization of that kitchen and every time I show this to people and I have it as my screen seam and say oh that's a beautiful kitchen is that your kitchen and that's great I'm glad they feel that way but then when I showed them the real photograph of the kitchen you go it's not quite there is it so we still have a ways to go here is the model that's virtually rendered it's pretty good it gives you a good sense of the of the space but it doesn't look quite as good as a real photograph and so we continue to do research to try to bridge the gap between these two so that's this area of computer graphics there's another area that's sort of the sister field of computer graphics and this is the area of computer vision so I'm going to go back to that picture we had of how computer graphics connects virtual and real computer vision is sort of the the converse problem or the opposite problem graphics takes us from virtual images and tries to produce images that look real computer vision takes real images and tries to infer information or models of the world in the virtual world so I'm going to use one example on recognizing materials too as to motivate why this is an interesting problem and why it's hard so several of you might have seen a model if several if you might have a robot like this one called the Roomba it's supposed to clean your house we have one it's more of a household pet than an actual in that's clean it does clean but say the Roomba is going around it faces a very real problem when it hits new surfaces it needs to figure out what is this material that it's seen now you're looking at the scene can immediately tell the Roomba is on the rug it just got off the wood and there seem to be paper lots of little paper pieces over in the rug but for a vision algorithm those white pieces could be paper or they could be cream cheese or they could be something else and depending on whether it's paper or cream cheese the Roomba has to react very differently so this problem of recognizing the materials in real world images is something of great practical impact for robotic applications and also the augmented reality applications so for example if you are bearing your augmented reality glass what you really like to do is walk into a room like this and automatically have the computer tell you this is a living room and these are the objects in the living room there's a mat there's a floor chair etcetera and in fact these are the materials I made off now maybe you can immediately recognize this but a robot can benefit greatly from understanding this is what the scene is paid off and if it's a cleaning robot then it will use a different cleaning type of device for the plastic chair than it will for the wood floor or for the fabric sofa so scene understanding turns out to be a very important problem that we are increasingly seeing you as far but why is it a hard problem why can't I mean you can do this you can immediately recognize all these things why can't the computer automatically do that so let me motivate a little why this problem is hard by showing you a little optical illusion that my colleague Ted Adelson design so here's a scene on the right and it's I think you look at it and say this is a cylinder casting a shadow on a checkerboard and if I asked you there are two patches a and B can you tell me what the which one is the lighter patch and which one is the darker patch you will tell me is darker and B is light is that fair raise your hands if you agree with that good well it turns out that when you look at the image though and I'm going to add two vertical lines here they're both the exact same gray value there is no difference between a and B now I'll flip back and I'll show it to you it's clearly darker than B to your eye and yet when you measure the image I'm not playing when you measure it you can go and I get I'll post these slides online they're exactly the same color so what's going on here what's going on is your visual system your brain is looking at the same it's making an inference it says B is in shadow so even though it's a certain let's say 0.5 gray it's actually a very light material that happens to be sitting in the dark and so B is actually quite white a on the other hand is sitting in bright sunlight and it's 0.5 so it's actually a dark material your brain is automatically doing this but a computer vision algorithm has no way of figuring out that this point 5 is different from that point 5 and that's why scene understanding is a very very challenging problem so Ted came up in this illusion and this is and lots of people are banging the head on trying to fill out or solve this problem and it's one of the reasons why material recognition understanding what materials that are in the world is in fact a very hard and challenging problem so why do we have any hope of doing anything here well so it turns out that we are at a very nice point of time where there's a ton of data out there in the real world that we can use to learn from so on Flickr there are millions of images that in fact we scraped of all the different types of materials that there are in the real world and we created these large datasets of millions of materials and once you have that amount of data you can develop learning algorithms that then recognize materials and so in our research we've shown how you can use deep learning to achieve state-of-the-art rows on so now we are able to recognize materials like in this scene say there's a fabric sofa a fabric chair a tile floor and a wood wood table at about 85% accuracy is that great it's better than the earlier forty percent that people were doing it's not 95 percent where you feel like ok maybe I've got this problem solved or even hundred percent that might be a bit too hard so if you're starting to make progress with all the compute we have but they're still a ways to go so let me sort of that's that's where we are in current state of they are let me say where I think they're going to go over the next few years and where I hope we can go so are we there yet so science fiction has actually been a great inspiration for computer graphics and computer vision and science fiction has taught given us a vision of a world where virtual and real real are completely indistinguishable from each other right from the Star Trek HoloNet but if you remember the holodeck doesn't only look real right it feels real it smells real it tastes real everything in the holodeck moves real and we are not remotely close to achieving one of that so there's a long distance that computer graphics still needs to go before virtual reality in the holodeck sense is a true reality so what are the kinds of challenges that we will have to face for starters you want to compute all of these images in real time and the images that I showed you in 1984 those who are computed taking hours then and now computers are so much faster but the kinds of images we produce now still take days sometimes to compute and days is not something you can put on your holodeck goggles and walk around so that's one big trial getting everything done in real time the second is actually making things look real so this is actually a very interesting graph and I'm going to explain it a little bit Masahiro mori introduced this thought experiment so the x-axis here shows how close your image is to human likeness okay how close does it look to an actual human being and the y-axis I'm going to call it likability the people have used different terms like familiarity for it so what happens is let's start at the bottom left when you start off with something that doesn't look real so I'm gonna first ask you to look at the at the solid curve here which is for static objects nothing is moving in the world so if you have an industrial robot nobody really gets warm fuzzy feelings for an industrial robot it's okay we like it alright as you get to a stuffed animals you're starting to get to a more human likeness feeling you like it more and that you appreciate it more but it turns out you after you go past that you go into what is called and the uncanny valley so you get closer and closer to looking like a human but not quite enough so you start looking unreal and uncanny you look like a corpse oh you look like a zombie or something like that and in fact this is a very famous this uncanny valley is a very famous effect nowadays when they're designing robots they worry about the robots looking close enough to humans but not quite right and this completely flipping everybody out you don't want to deal with a zombie like robot you'd rather it look like an animal or or or a machine rather than looking almost human without quite being human so the uncanny value that's for as I said the solid curve is for nothing everything being static it's even worse when things move and in fact we saw that in that Madden the the football game they weren't quite moving right something was not right with the muscles and they've poured in millions of dollars to scan those those players but we still have a ways to go before the motion is completely correct and the appearance is completely correct so what's the best way to get to the uncanny valley of get past the uncanny valley that's the hard question that the field actually has to solve one possibility is that you go all the way down and then you crawl your way up that a possibility the other is maybe you actually develop enough understanding of how humans perceive the world so that you might be able to jump over the uncanny valley we don't know that we can do that that's one of the hard challenges we face as a field so that's a virtual reality and the problems that I think we need to solve before we can get to having full virtual reality or augmented reality I think they're very exciting times I tell my students this we have the luxury of living in the best time ever technology is advancing by leaps and bounds every day we hear of new problems like the material recognition problem is suddenly much more solvable than it ever was before but it's not quite done so there are even harder challenges that are coming our way and I think VR and AR will in the next 10 years unfold to really have great potential and I can't wait to see the applications that that will be enabled so these are all my collaborators have been very fortunate to have both great collaborators Don Greenberg and Ken Torrance who created the field of computer graphics early on and Steve Noah Bruce Todd and Ted are my collaborators at various institutions and on the right are all my students they do all the hard work so they're the ones who really get credit for all the work that I've shown you out here I want to show you there's a VR goggles so at the end of the talk you're welcome to come and actually try it out and hear is this why much nyj example - if you want to come and look at it I'm happy to take any questions questions yeah so the back in so that the the Gary building was sorry not the Gary I am Pei building was done in the 70s can has been developing since then in fact CAD was one of the first computer graphics tools nobody was worried about making things look real just getting the shape was one of the hard problems and so in the 70s and 80s was when carrot started becoming usable the 74 won the I M Pei won I think they did it manually before then and about late 70s it was getting useful enough that you could use tools but not not the way it was in the 90s that 90s it had become much more seamless and and and in fact one of the big things in the 90s is we started getting technology to do scan so we would do 3d scans so now you won't have to go and implement everything when you're building a building you can actually take scans and try to build models from scans yeah please right so that's a very good question there's actually two kinds of research that go to medical medical work so it used to be that volume rendering so this problem that I said the micro CT is an example you don't just have surfaces you have everything represented by volumes and volume rendering was a core part of computer graphics and actually volume rendering is what you need for medical applications because you have these slices and you want to visualize them you want to visualize anomalies there's two kinds of research that go in Medical one is the computer vision side where you take all these slices and you try to see whether there are tumors or something that there's a normal s behavior in that data that's the side of computer vision and in fact ramens RB one of our faculty members here works with the biomedical school they're doing some nice work there the other side is designing things that are customized to the human body for a particular patient and in fact Don has done some work with the Cleveland Clinic on designing stents for people so that's the kind of work but it's a whole that's those are the two kinds of work that Cornell has been doing there's a broader question of how do you do these things fast how accurate can you make it how noise-free can you make it and that's a whole area of research which is very rich and vibrant and lots of great work going on there go ahead yeah that's a good question I mean I think a lot of the as I see it Cornell tech tech can play a big role in getting the work out commercial right that's one of the their objectives is trying to get it from the research labs out there and I think that can play a very big role in all of our lives when we sit here in Ithaca there is a bit of a distance between ethica and all of the all of the the companies that are out there I think they can serve as a as a as a bridge between us and the technological area so that's a hope at least yeah right right right yeah there's a very nice research on that actually Brian Barsky who used to be a carnale alum and is has been at Berkeley for like nearly 20 years has been working on trying to simulate different visual problems you know myopia and Maya pairs a simple one but much more complex ones differently astigmatism etc so one is just assimilated to train people the other is to invert it to try to see if I'm given an image how can I invert it show it to a person who has that condition so that they see something that approaches normalcy and that's a much harder problem but there's a very rich body of research that tries to do that and you know people keep making progress on it but very nice work actually they will actually try to design I mean model exactly all aspects of the visual system simulate the physics through all of that and then try to reverse-engineer and invert the problems that arise and it's a rich area and and they tend to actually relate very nicely with medical applications so they have strong ties with the medical community and the doctors typically there to help and I'm happy to skip pointers to the kind of research that's done there offline if people are interested yeah yeah yes yes yes and yes so I did not talk much about motion other than saying it's very hard and actually one of my colleagues Doug James who did do exactly water simulations water there's been some really nice work out of Stanford and now Doug's actually at Stanford but Ron fat Q's group has done some of the best work on water simulations and it's state of the art and in fact if you see movies they do a pretty good job on water because they have these kinds of simulations one of the things that they focus on now is actually making water be more controllable so it not only do you want water to fluoride but also flow under some artistic direction that's been a big area but there are always new challenges water fire things like that when you know all of these are examples of of challenges that different areas of graphics have dealt with and there's some good work there that we are starting to get to very believable result what's harder is doing it real-time in games and they're still far away I think on the real-time aspect of that I actually well maybe I have seen the bad versions of all of this I thought this football game was was startlingly good when I saw it and let me just and I didn't describe how people do that how do you get these players they do full-body scans and motion capture of these players they you know put all kinds of markers of them and scan them completely their skin their cloth everything like that I think those are examples often with games there's really two more it's you see the early it sort of the preview trailer and there's some very nice effects there but those are computed offline and that the game has to take shortcuts because it has to be interactive I think you know and you just look at all the latest titles they all look pretty good and then next year they look even better so that's just an arms race and it's they're doing about if they're going along pretty much I think now their big challenge is now producing two images not one add interactive rates that's the next big challenge that they're all going for it the current state of VR is a big part of it virtual producing two images that are really beautiful and realistic is hard a big part of VR right now is actually putting cameras out there that are capturing live content for the the virtual reality so that and I showed you the the 5a role playing with that that was a visualization of Iceland and they flew a helicopter with a bunch of cameras hanging below the helicopter and they capture it's just a gorgeous visualization of Iceland actually and it's it's real and then you can go in and you can walk around and you feel like you're hanging over a gorge or you're wandering into you know you're seeing horses running below you it's worth playing around with that that demo I think that's one of the big challenges but that's real content showing it to people virtual content will follow in a few years not quite there yep good yes so new technologies are looking in the ir domain and that is i totally agree vision will whatever sensor there is if it's cheap enough then we will get that data and use that and and there is some work in ir graphics tends to so there these are sister fields but they are not the same they have slightly different goals graphics tends to worry about what the human eye can see and so it tends to stay very much in the visible spectrum but yes for scene understanding i expect some more of those sensors but we've talked about this for a while it's still not quite cheap enough it's still not quite ubiquitous enough along those lines the promises that all all cameras will be 3d cameras so why would you need to even try to understand shape anymore using traditional vision techniques that story has been true for a while but not all cameras are not 3d cameras yet and so they're still always this lag hopefully we get there but we are not and I'm I agree we would include all forms of data that we can integrate into our systems any other questions yeah yeah so no no no that's an advertisement that's an advertisement from Microsoft so that's how they think it'll play out so for starters that that that technology isn't quite there yet that's the hololens technology i showed it mainly to envision so the idea would be they're both sharing the same camera feed of the pipes right and then he marks it there it will go to her goggles and it will be overlaid on her feed so that she can see the arrow showing up that's how it would play out if it works motorbike right right so they're playing a bit fast and loose like she had something on she had the hololens on and the premise then what they're claiming they're showing us is a visualization of how it would look to her where they blended the virtual and the real somebody else watching the scene will just see this crazy woman waving hands around but she gets to see the overlay of the virtual on on the real that's that's what they are trying to sell us on and that there are augmented reality is starting to get there so it's not quite as beautiful as they made it sound because that's an advertisement but that's what we're hoping to do is overlay enough information in real-world scenes so that you can blend the two of them together and do useful things and you see it particularly the the kind of VR goggles where you see for Connors I think that's very doable there have actually seen demos of them showing things like you know a visualization of a stream of traffic coming in or something like that that's a right that's you know that's one of the so the holodeck is you know the ultimate I think we've had many false starts and graphics and vision so every ten years it comes around and you think they're going to do 3d for real this time and then you know some really hard technological problems you know get us and I think what what where they're at a nice place right now where we figured out some very core problems that used to hold us back so for example in this stuff in virtual reality people always would get nauseous that was a problem that they couldn't solve and right now they figured out cheaper and more accurate sensors so that isn't that lag between when your head turns and when the image goes and because that lag went away it's starting to become more real so yes the Holograms are sort of the next step that's the whole point with the hololens is they're claiming that we're getting there but there that's a bit more into the future I think simpler AR augmented reality where you know useful things the pipe thing might actually be something we can do more more in in the near future somebody else unquestionable yes that's a very good question yes so there's a whole area of research called haptics and in haptics you've air gloves and and I actually had a slide of that and I removed it because that's a whole different area you're supposed to have pressure sensors on it so that when you touch something you might start to feel feel some of that that feel again goes you know it goes cyclically right now it goes up and down right now there are these nice phantom gloves that are starting to give useful feedback but it's still not quite to the level where you could feel silk and that'll feel completely different from paper I've actually been talking to some researchers in the perception side they're building some devices but they're prohibitively expensive right now so that's a bit more into the future than where we are now yes good yes so aging is there's a whole line of research in computer graphics that actually simulates aging so there are two ways to handle it one is you start with a clean slate like the IKEA catalog and then simulate the kind of that's called weathering actually and we do different weathering simulations where the rain is falling on it and in fact Julie Dorsey who was my adviser who was a Cornell alum did some beautiful work on patination and stuff which is still in some of the better work in the space that's one way of doing it so there are very very detailed simulations to try different aging effects the other possibility is that you take a camera and you capture it in the aged state and then you capture it at different stages of aging and then try to blend it together so that you can get any level of youthfulness all of these have been tried and they but there remains more work to be done to make it even better it's not quite perfect often computer graphics the big failing of computer graphics it looks too clean that is one of the known problems and so you have special when your vendor making movies they'll have artists paint in things like scuff marks and stuff to make it look more realistic that's a very good question these are good areas yeah I'm hoping that some of these applications so the BR applications like you know having the sense of immersion in new places and stuff that's gonna happen I think in the next few years ten years from now I think there's we are going to start to get to avatars being much more realistic the kind of thing that I was talking about I think challenges like touch and stuff those are much farther out there's a lot of work we need to do in the hardware that you need to design before you can get there but I think we're visually we can get pretty close in the next 10 years in terms of we are in a R and C in understanding yep yes right they exist so it is not for me to have you know the the world is what it is so there are these games that are used it's ok so there's what the technology is and then what you feel about how it should be used and so my take on this as you separate the two the technology does what it does and then you have society decide through its value system how it wants to use the technology so as a scientist it's important for me to push the technology where it goes that's the right thing and as a citizen of the world I have an opinion of how I think technology should be used but I think that has to be done through social mechanisms not through scientists trying to sabotage the you know science that will never work science has to do with what it needs to do and we as a society need to take ownership of the things we are inventing and understand the implications of it and use it in the right way that's a partial answer to what we can do it's a very complicated question there is no easy answer to how we should be using I mean this is a broader question technology is amazing the things we're doing are astounding right now but for every good thing there is a bad side to that technology right the Internet is wonderful without it we would all be stupid and clueless right I mean you can look up anything right now and you can appear intelligent just by looking it up by the same token the internet is full of horrible horrible lies horrible stuff which it's instead of kids in the audience I will talk about but it do you know it exists and so does that mean we shut down you know technology no you me as a society need to learn to use it responsible and I hope this has been a production of Cornell University on the web at cornell edu 
